void:
  kotlin:
    type_info: Void
  jni:
    type_info: void
  native:
    type_info: Void
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

int:
  custom:
    pname: Int
  kotlin:
    type_info: Int
  jni:
    type_info: jint
  native:
    type_info: Int
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

short:
  custom:
    pname: Short
  kotlin:
    type_info: Short
  jni:
    type_info: jshort
  native:
    type_info: Short
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

long:
  custom:
    pname: Long
  kotlin:
    type_info: Long
  jni:
    type_info: jlong
  native:
    type_info: Long
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

long long:
  long

unsigned long:
  long

float:
  custom:
    pname: Float
  kotlin:
    type_info: Float
  jni:
    type_info: jfloat
  native:
    type_info: Float
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

double:
  custom:
    pname: Double
  kotlin:
    type_info: Double
  jni:
    type_info: jdouble
  native:
    type_info: Double
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

char:
  std::__cxx11::basic_string

$Object:
  custom:
    pname: Long
  kotlin:
    type_info: "{{type_name}}"
  jni:
    type_info: jobjectid
  native:
    type_info: Long
  jni_to_cxx: |
    {% set dereferencer = '*' if is_pointer else '' %}
    {% set pointee = target_pointee_unqualified_name %}
    {{target_type_name}} {{target_name}} = {{dereferencer}}RefFromLong<{{pointee}}>(id);
  cxx_to_jni: |
    {{target_type_name}} {{target_name}} = UnsafeRefAsLong({{name}});
  kotlin_to_native:
    val {{target_name}} = {{name}}.id
  native_to_kotlin:
    val {{target_name}} = {{target_type_name}}({{name}})

$Enum:
  custom:
    pname: Int
  kotlin:
    type_info: "{{type_name}}"
  jni:
    type_info: jint
  native:
    type_info: Int
  jni_to_cxx: |
    auto {{target_name}} = ({{target_type_name}}){{name}};
  cxx_to_jni: |
    {{target_type_name}} {{target_name}} = ({{target_type_name}}){{name}};
  kotlin_to_native:
    val {{target_name}} = {{name}}.value
  native_to_kotlin:
    val {{target_name}} = {{target_type_name}}.getByValue({{name}})!!

std::__cxx11::basic_string:
  custom:
    pname: "Object"
  kotlin:
    type_info: String
  jni:
    type_info: jstring
  native:
    type_info: String
  jni_to_cxx:
    "{{target_type_name}} {{target_name}} = jni_to_string(env, {{name}});"
  cxx_to_jni:
    "{{target_type_name}} {{target_name}} = string_to_jni(env, {{name}});"
  kotlin_to_native:
  native_to_kotlin:


std::vector:
  custom: 
    pname: "Object"
  kotlin:
    type_info: "List<{{args_t[0]}}>"
  jni:
    type_info: "{{args_t[0]}}Array"
  native:
    type_info: "{{args_t[0]}}Array"
  jni_to_cxx: |
          {% set tmp_name = '_' + target_name %}
          {% set jni_array_get = 'get{}Array'.format(args[0].custom.pname) %}

          {{target_type_name}} {{target_name}};

          auto {{tmp_name}} = {{jni_array_get}}(env, {{name}});

          for (auto& value : {{tmp_name}}) {
             {{args[0].snippet('value')}}
             {{target_name}}.emplace_back({{args[0].converted_name('value')}});
          }

  cxx_to_jni: |
          {% set jni_type_prefix = args[0].custom.pname %}
          {% set jni_array_set = 'Set{}ArrayRegion'.format(jni_type_prefix) if jni_type_prefix != 'Object' else  'SetObjectArrayElement' %}

          {{target_type_name}} {{target_name}} = env->New{{jni_type_prefix}}Array({{name}}.size());

          std::vector<{{args[0].target_type_name}}> temp;

          for (auto& value : {{name}}) {
              {{args[0].snippet('value')}}
              temp.emplace_back({{args[0].converted_name('value')}});
          }
          env->{{jni_array_set}}({{target_name}}, 0, static_cast<jsize>({{name}}.size()), temp.data());

  kotlin_to_native: |
          val {{target_name}}: MutableList<{{args[0].target_type_name}}> = mutableListOf()

          for (value in {{name}}) {
            {{args[0].snippet('value')}}
            {{target_name}}.add({{args[0].converted_name('value')}})
          }
  native_to_kotlin: |
          val {{target_name}}: MutableList<{{args[0].target_type_name}}> = mutableListOf()
          for (value in {{name}}) {
            {{args[0].snippet('value')}}
            {{target_name}}.add({{args[0].converted_name('value')}})
          }

std::map:
  custom:
    pname: "Object"
  kotlin:
    type_info: "Map<{{args_t[0]}}, {{args_t[1]}}>"
  jni:
    type_info: "jmapobject"
  native:
    type_info: "Pair<{{args[0].custom.pname}}Array, {{args[1].custom.pname}}Array>"
  jni_to_cxx: |
          {% set tmp_name = '_' + target_name %}
          {% set tmp_key_name = 'tmp_key_' + target_name %}
          {% set tmp_val_name = 'tmp_val_' + target_name %}
          {% set jni_array_get_k = 'get{}Array'.format(args[0].custom.pname) %}
          {% set jni_array_get_v = 'get{}Array'.format(args[1].custom.pname) %}
          {{target_type_name}} {{target_name}};
          auto {{tmp_name}} = extract_jni_pair(env, {{name}});
          auto {{tmp_key_name}} = {{jni_array_get_k}}(env, {{tmp_name}}.first);
          auto {{tmp_val_name}} = {{jni_array_get_v}}(env, {{tmp_name}}.second);
          for (size_t i = 0; i < {{tmp_key_name}}.size(); ++i) {
              auto ktmp = {{tmp_key_name}}[i];
              auto vtmp = {{tmp_val_name}}[i];
              {{args[0].snippet('ktmp')}}
              {{args[1].snippet('vtmp')}}
              {{target_name}}.insert({ {{args[0].converted_name('ktmp')}}, {{args[1].converted_name('vtmp')}} });
          }

  cxx_to_jni: |
          {% set key_name = 'tmp_key_' + target_name %}
          {% set val_name = 'tmp_val_' + target_name %}
          {{args[0].target_type_name}} {{key_name}} = env->New{{args[0].custom.pname}}Array({{name}}.size());
          {{args[1].target_type_name}} {{val_name}} = env->New{{args[1].custom.pname}}Array({{name}}.size());
          size_t index = 0;
          for (auto& value : {{name}}) {
              key = value.first
              val = value.second
              {{args[0].snippet('key')}}
              {{key_name}}[index] = {{args[0].converted_name('key')}};
              {{args[1].snippet('val')}}
              {{val_name}}[index] = {{args[1].converted_name('val')}};
              ++index
          }
          {{target_type_name}} {{target_name}} pair = make_jni_pair(env, {{key_name}}, {{val_name}});

  kotlin_to_native: |
          {% set tmp_key_name = 'tmp_key_' + target_name %}
          {% set tmp_val_name = 'tmp_val_' + target_name %}
          {% set karray_init =  '' if args[0].custom.pname != 'Object' else '{{{}()}}'.format(args[0].target_type_name) %}
          {% set varray_init =  '' if args[1].custom.pname != 'Object' else '{{{}()}}'.format(args[1].target_type_name) %}
          val {{tmp_key_name}} = {{args[0].custom.pname}}Array({{name}}.size){{karray_init}}
          val {{tmp_val_name}} = {{args[1].custom.pname}}Array({{name}}.size){{varray_init}}
          val {{target_name}} = {{target_type_name}}({{tmp_key_name}}, {{tmp_val_name}})
          var index = 0
          for ((key, value) in {{name}}) {
              {{args[0].snippet('key')}}
              {{args[1].snippet('value')}}
              {{tmp_key_name}}[index] = {{args[0].converted_name('key')}}
              {{tmp_val_name}}[index] = {{args[1].converted_name('value')}}
              ++index
          }

  native_to_kotlin: |
          val {{target_name}} = {{target_type_name}}()
          for ((key, value) in {{name}}.first zip {{name}}.second) {
              {{args[0].snippet('key')}}
              {{args[1].snippet('value')}}
              {{target_name}}[{{args[0].converted_name('key')}}] = {{args[1].converted_name('value')}}
          }


std::unordered_map:
  std::map


std::shared_ptr:
  custom: 
    pname: Long
  kotlin:
    type_info: "{{args_t[0]}}"
  jni:
    type_info: jobjectid
  native:
    type_info: Long
  jni_to_cxx: 
  cxx_to_jni: 
  kotlin_to_native:
  native_to_kotlin:

