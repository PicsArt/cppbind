/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-09:43.
 * Please do not change it manually.
 */

import Foundation
import HelloExample.CWrapper

/**
 * Structure to describe user.
 */
public class UserInfo {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_UserInfo(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /**
   * Creates user
   */
  public convenience init(userName: String, userAge: UInt) {
    let swifttoscuserName = strdup(userName)!
    let swifttoscuserAge = CUnsignedInt(userAge)
    var cppbindErr = CppBindCObject()
    self.init(create_UserInfo(swifttoscuserName, swifttoscuserAge, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * Age of user.
   */
  public var age: UInt {
    let result = _prop_get_UserInfo_age(cself)
    let sctoswiftresult = UInt(result)
    return sctoswiftresult
  }

  /**
   * Name of user.
   */
  public var name: String {
    let result = _prop_get_UserInfo_name(cself)
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /**
   * Some wishes of the user.
   */
  public var want_a_drink: Bool {
    get {
      let result = _prop_get_UserInfo_want_a_drink(cself)
      return result
    }

    set(value) {
      _prop_set_UserInfo_want_a_drink(cself, value)
    }
  }

  class var cppbindCxxTypeName : String { return "UserInfo" }
}
