rules:
  kotlin.type_converters:
    cppbind::example::Buffer:
      custom:
        pname: Buffer
        tname: "Buffer{{get_type_converter(template_args[0]).kotlin.target_type_name}}"
      types:
        kotlin: "{{custom.tname}}"
        jni: jobjectid
        jdk: Long
      converters:
        jni_to_cxx: |
          auto{{'&' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}} {{target_name}} = {{'*' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}}reinterpret_cast<{{cxx.resolved_type.unqualified_type_name}}*>({{name}});
        cxx_to_jni: |
          {{target_type_name}} {{target_name}} = reinterpret_cast<jlong>({{'&' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}}{{name}});
        kotlin_to_jdk:
          val {{target_name}} = {{name}}.getObjId()
        jdk_to_kotlin:
          val {{target_name}} = {{target_type_name}}({{name}})
        cxx_include:
          !concat
          - !include common_macros.yaml&templates
          - |
            {{- gen_template_args_snippets(template_args[:1], 'cxx_include') -}}
        kotlin_include:
          !concat
          - !include common_macros.yaml&templates
          - |
            {{- gen_template_args_snippets(template_args[:1], 'kotlin_include', full_package) -}}

  python.type_converters:
    cppbind::example::Buffer:
      custom:
        pname: Buffer
        tname: Buffer
      types:
        python: Buffer
        pybind: Buffer
      converters:
        cxx_to_pybind:
          py::module_::import("pybind_buffer").attr("Buffer");
        pybind_to_cxx:
        python_to_pybind:
        pybind_to_python:
