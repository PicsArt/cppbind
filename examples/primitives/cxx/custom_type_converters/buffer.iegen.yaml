rules:
  kotlin.type_converters:
    iegen::example::Buffer:
      custom:
        pname: Buffer
        tname: "Buffer{{args_t[0]}}"
      kotlin:
        type_info: "custom.tname"
      jni:
        type_info: jobjectid
      jdk:
        type_info: Long
      jni_to_cxx: |
        auto {{target_name}} = {{'*' if not is_pointer}}reinterpret_cast<{{cxx_pointee_unqualified_name}}*>({{name}});
      cxx_to_jni: |
        {{target_type_name}} {{target_name}} = reinterpret_cast<jlong>({{'&' if not is_pointer}}{{name}});
      kotlin_to_jdk:
        val {{target_name}} = {{name}}.getObjId()
      jdk_to_kotlin:
        val {{target_name}} = {{target_type_name}}({{name}})

  python.type_converters:
    iegen::example::Buffer:
      custom:
        pname: Buffer
        tname: Buffer
      python:
        type_info: Buffer
      pybind:
        type_info: Buffer
      cxx_to_pybind:
        py::module_::import("pybind_buffer").attr("Buffer");
      pybind_to_cxx:
      python_to_pybind:
      pybind_to_python:
