rules:
  kotlin.type_converters:
    cppbind::example::Size:
      custom:
        pname: Object
        tname: PointFloat
      types:
        kotlin: Point2D.Float
        jni: jfloatArray
        jdk: FloatArray
      converters:
        jni_to_cxx: |
          jfloat *elems = env->GetFloatArrayElements({{name}}, 0);
          jfloat width_{{name}} = elems[0];
          jfloat height_{{name}} = elems[1];
          env->ReleaseFloatArrayElements({{name}}, elems, 0);
          {{target_type_name}} {{target_name}} = {{cxx.resolved_type.unqualified_type_name}}(width_{{name}}, height_{{name}});
        cxx_to_jni: |
          jfloat width_{{name}} = {{name}}.width;
          jfloat height_{{name}} = {{name}}.height;
          {{target_type_name}} {{target_name}} = env->NewFloatArray(2);
          jfloat carray[] = {width_{{name}}, height_{{name}}};
          env->SetFloatArrayRegion({{target_name}}, 0 , 2, carray);
        kotlin_to_jdk: |
          val width{{name|capitalize}} = {{name}}.getX().toFloat()
          val height{{name|capitalize}} = {{name}}.getY().toFloat()
          val {{target_name}} = {{target_type_name}}(2)
          {{target_name}}.set(0, width{{name|capitalize}})
          {{target_name}}.set(1, height{{name|capitalize}})
        jdk_to_kotlin: |
          val width{{name|capitalize}} = {{name}}[0]
          val height{{name|capitalize}} = {{name}}[1]
          val {{target_name}} = {{target_type_name}}(width{{name|capitalize}}, height{{name|capitalize}})

  python.type_converters:
    cppbind::example::Size:
      custom:
        pname: SizeF
        tname: SizeF
      types:
        python: SizeF
        pybind: SizeF
      converters:
        pybind_to_cxx:
        cxx_to_pybind:
        python_to_pybind:
        pybind_to_python:


  swift.type_converters:
    cppbind::example::Size:
      custom:
        is_c_pointer_type: False
      types:
        swift: "(Float, Float)"
        c: "CppBindSizeF"
        sc: "CppBindSizeF"
      converters:
        c_to_cxx: |
          auto& first_tmp_{{name}} = {{name}}.first;
          auto& second_tmp_{{name}} = {{name}}.second;
          {{target_type_name}} {{target_name}} { first_tmp_{{name}}, second_tmp_{{name}} };
        cxx_to_c: |
          auto _first_data_{{target_name}} = {{name}}.width;
          auto _second_data_{{target_name}} = {{name}}.height;
          {{target_type_name}} {{target_name}} = { _first_data_{{target_name}}, _second_data_{{target_name}} };
        swift_to_sc: |
          var {{target_name}} = {{target_type_name}}()
          {{target_name}}.first = {{name}}.0
          {{target_name}}.second = {{name}}.1
        sc_to_swift: |
          let {{target_name}}First = {{name}}.first
          let {{target_name}}Second = {{name}}.second
          let {{target_name}}: (Float, Float) = ({{target_name}}First, {{target_name}}Second)
        c_include: |
          #include "swift/wrappers/c_size.h"