/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-05:25.
 * Please do not change it manually.
 */

package com.examples.containers

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*

open class JsonExamples
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val cppbindCxxTypeName: String = "cppbind::example::JsonExamples"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    fun setJson(j: String): Unit {
        val result = jSetjson(id, j)
        
        return result
    }

    fun getJson(): String {
        val result = jGetjson(id)
        
        return result
    }

    /**
     * comments
     * 
     */
    fun getSimpleJsonExample(): String {
        val result = jGetsimplejsonexample(id)
        
        return result
    }

    fun setJsonMatrix(jm: List<List<String>>): Unit {
        val kotlintojdkjm = ObjectArray(jm.size) { Any() }
        var index_jm = 0
        for (value_jm in jm) {
            val kotlintojdkvalue_jm = ObjectArray(value_jm.size) { Any() }
            var index_value_jm = 0
            for (value_value_jm in value_jm) {
                
                kotlintojdkvalue_jm[index_value_jm] = value_value_jm
                ++index_value_jm
            }
            kotlintojdkjm[index_jm] = kotlintojdkvalue_jm
            ++index_jm
        }
        val result = jSetjsonmatrix(id, kotlintojdkjm, jm)
        
        return result
    }

    fun getJsonMatrix(): List<List<String>> {
        val result = jGetjsonmatrix(id)
        val jdktokotlinresult: MutableList<List<String>> = mutableListOf()
        for (value_result in result) {
            @Suppress("UNCHECKED_CAST") val actual_value_result = value_result as ObjectArray
            val jdktokotlinactual_value_result: MutableList<String> = mutableListOf()
            for (value_actual_value_result in actual_value_result) {
                @Suppress("UNCHECKED_CAST") val actual_value_actual_value_result = value_actual_value_result as String
                
                jdktokotlinactual_value_result.add(actual_value_actual_value_result)
            }
            jdktokotlinresult.add(jdktokotlinactual_value_result)
        }
        return jdktokotlinresult
    }

    /**
     * CPPBind generated hashCode method returning the hash of underlying C++ object id. .
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CPPBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as JsonExamples
        return cxxId == other.cxxId
    }

    /**
     * CPPBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jSetjson(id: Long, j: String, vararg extraObjs: Any?): Unit
    private external fun jGetjson(id: Long): String
    private external fun jGetsimplejsonexample(id: Long): String
    private external fun jSetjsonmatrix(id: Long, jm: ObjectArray, vararg extraObjs: Any?): Unit
    private external fun jGetjsonmatrix(id: Long): ObjectArray
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jGettypebyid(id: Long): String
