/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 09/13/2021-11:23.
 * Please do not change it manually.
 */

package com.examples.containers

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*

open class NestedExamples
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    /**
     * comments
     * 
     */
    constructor(): this(construct_helper()) {
    }
    
    fun setNestedIntVector(v: List<List<Int>>): Unit {
        
        val kotlin_to_jdk_v = ObjectArray(v.size) { Any() }
        var index_v = 0
        for (value_v in v) {
            
            val kotlin_to_jdk_value_v = IntArray(value_v.size) 
            var index_value_v = 0
            for (value_value_v in value_v) {
                
                kotlin_to_jdk_value_v[index_value_v] = value_value_v
                ++index_value_v
            }
            kotlin_to_jdk_v[index_v] = kotlin_to_jdk_value_v
            ++index_v
        }
        val result = jSetnestedintvector(getObjId(), kotlin_to_jdk_v)
        
        return result
    }

    fun getNestedIntVector(): List<List<Int>> {
        val result = jGetnestedintvector(getObjId())
        val jdk_to_kotlin_result: MutableList<List<Int>> = mutableListOf()
        val casted_result = result as ObjectArray
        for (value_result in casted_result) {
            val jdk_to_kotlin_value_result: MutableList<Int> = mutableListOf()
            val casted_value_result = value_result as IntArray
            for (value_value_result in casted_value_result) {
                
                jdk_to_kotlin_value_result.add(value_value_result)
            }
            jdk_to_kotlin_result.add(jdk_to_kotlin_value_result)
        }
        return jdk_to_kotlin_result
    }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jSetnestedintvector(id: Long, v: ObjectArray): Unit
    private external fun jGetnestedintvector(id: Long): ObjectArray
    private external fun jFinalize(id: Long): Unit
}