/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/12/2022-06:47.
 * Please do not change it manually.
 */

package com.examples.containers

import com.examples.cppbind.*
import com.examples.cppbind.exceptions.*

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

/**
 * comments
 * 
 */
open class VectorItem
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        /**
         * comments
         * 
         */
        protected fun constructHelper(_value: Int): Long {
            val id = jConstructor(_value)
            return id
        }

        @JvmStatic
        private external fun jConstructor(_value: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::VectorItem"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    /**
     * comments
     * 
     */
    constructor(_value: Int): this(CppBindObject(constructHelper(_value), true)) {
    }
    
    /**
     * comments
     * 
     */
    var value: Int
        get() {
            val result = jValue(cppbindObjId)
            
            return result
        }
        set(value) {
            
            jSetvalue(cppbindObjId, value, value)
        }
        

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as VectorItem
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jValue(id: Long): Int
    private external fun jSetvalue(id: Long, value: Int, valueObj: Any?): Unit
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

/**
 * comments
 * 
 */
open class VectorExamples
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        /**
         * comments
         * 
         */
        protected fun constructHelper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::VectorExamples"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    /**
     * comments
     * 
     */
    constructor(): this(CppBindObject(constructHelper(), true)) {
    }
    
    /**
     * comments
     * 
     */
    fun addIntVector(v: List<Int>): Unit {
        val kotlintojdkv = IntArray(v.size) 
        var indexV = 0
        for (valueV in v) {
            
            kotlintojdkv[indexV] = valueV
            ++indexV
        }
        val result = jAddintvector(cppbindObjId, kotlintojdkv, v)
        
        return result
    }

    /**
     * comments
     * 
     */
    fun addObjVector(v: List<VectorItem>): Unit {
        val kotlintojdkv = LongArray(v.size) 
        var indexV = 0
        for (valueV in v) {
            val kotlintojdkvalueV = valueV.cppbindObjId
            kotlintojdkv[indexV] = kotlintojdkvalueV
            ++indexV
        }
        val result = jAddobjvector(cppbindObjId, kotlintojdkv, v)
        
        return result
    }

    /**
     * comments
     * 
     */
    fun addStringVector(v: List<String>): Unit {
        val kotlintojdkv = ObjectArray(v.size) { Any() }
        var indexV = 0
        for (valueV in v) {
            
            kotlintojdkv[indexV] = valueV
            ++indexV
        }
        val result = jAddstringvector(cppbindObjId, kotlintojdkv, v)
        
        return result
    }

    /**
     * comments
     * 
     */
    fun getStringVector(): List<String> {
        val result = jGetstringvector(cppbindObjId)
        val jdktokotlinresult: MutableList<String> = mutableListOf()
        for (valueResult in result) {
            @Suppress("UNCHECKED_CAST") val actualValueresult = valueResult as String
            
            jdktokotlinresult.add(actualValueresult)
        }
        return jdktokotlinresult
    }

    /**
     * comments
     * 
     */
    fun getObjVector(): List<VectorItem> {
        val result = jGetobjvector(cppbindObjId)
        val jdktokotlinresult: MutableList<VectorItem> = mutableListOf()
        for (valueResult in result) {
            val jdktokotlinvalueResult = VectorItem(CppBindObject(valueResult))
            jdktokotlinresult.add(jdktokotlinvalueResult)
        }
        return jdktokotlinresult
    }

    /**
     * comments
     * 
     */
    fun getIntVector(): List<Int> {
        val result = jGetintvector(cppbindObjId)
        val jdktokotlinresult: MutableList<Int> = mutableListOf()
        for (valueResult in result) {
            
            jdktokotlinresult.add(valueResult)
        }
        return jdktokotlinresult
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as VectorExamples
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jAddintvector(id: Long, v: IntArray, vararg extraObjs: Any?): Unit
    private external fun jAddobjvector(id: Long, v: LongArray, vararg extraObjs: Any?): Unit
    private external fun jAddstringvector(id: Long, v: ObjectArray, vararg extraObjs: Any?): Unit
    private external fun jGetstringvector(id: Long): ObjectArray
    private external fun jGetobjvector(id: Long): LongArray
    private external fun jGetintvector(id: Long): IntArray
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

fun getSquaredVector(v: List<Double>): List<Double> {
    val kotlintojdkv = DoubleArray(v.size) 
    var indexV = 0
    for (valueV in v) {
        
        kotlintojdkv[indexV] = valueV
        ++indexV
    }
    val result = jGetsquaredvector(kotlintojdkv, v)
    val jdktokotlinresult: MutableList<Double> = mutableListOf()
    for (valueResult in result) {
        
        jdktokotlinresult.add(valueResult)
    }
    return jdktokotlinresult
}

private external fun jGetsquaredvector(v: DoubleArray, vararg extraObjs: Any?): DoubleArray

private external fun jGettypebyid(id: Long): String
