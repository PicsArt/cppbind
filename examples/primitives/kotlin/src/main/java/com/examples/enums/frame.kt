/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/22/2021-13:59.
 * Please do not change it manually.
 */

package com.examples.enums

import alias.*
import com.examples.exception_helpers.*
import exceptionUtils.*
import kotlin.system.exitProcess

/**
 * Class Frame.
 */
open class Frame
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id
    }
    
    constructor(): this(construct_helper()) {
    }
    
    var backgroundColor: Color
        get() {
            val result = jBackgroundcolor(getObjId())
            val jdk_to_kotlin_result = Color.getByValue(result) ?: run {
                println("Internal error: unresolved reference to non existing field of Color enum.")
                exitProcess(1)
            }
            return jdk_to_kotlin_result
        }
        set(value) {
            val kotlin_to_jdk_value = value.value
            jSetbackgroundcolor(getObjId(), kotlin_to_jdk_value)
        }
        

    var backgroundColorShade: ColorShade
        get() {
            val result = jBackgroundcolorshade(getObjId())
            val jdk_to_kotlin_result = ColorShade.getByValue(result) ?: run {
                println("Internal error: unresolved reference to non existing field of ColorShade enum.")
                exitProcess(1)
            }
            return jdk_to_kotlin_result
        }
        set(value) {
            val kotlin_to_jdk_value = value.value
            jSetbackgroundcolorshade(getObjId(), kotlin_to_jdk_value)
        }
        

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jBackgroundcolor(id: Long): Int
    private external fun jSetbackgroundcolor(id: Long, value: Int): Unit
    private external fun jBackgroundcolorshade(id: Long): Int
    private external fun jSetbackgroundcolorshade(id: Long, value: Int): Unit
    private external fun jFinalize(id: Long): Unit
}