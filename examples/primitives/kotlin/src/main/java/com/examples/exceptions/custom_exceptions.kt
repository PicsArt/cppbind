/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/01/2022-07:54.
 * Please do not change it manually.
 */

package com.examples.exceptions

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*

open class SimpleBaseException
internal constructor(obj: CppBindObject) : AutoCloseable, Exception() {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(err_num: Int): Long {
            val id = jConstructor(err_num)
            return id
        }

        @JvmStatic
        private external fun jConstructor(err_num: Int, vararg extraObjs: Any?): Long
        const val cppbindCxxTypeName: String = "cppbind::example::SimpleBaseException"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): SimpleBaseException {
            val idType = jGettypebyid(id)
            when (idType) {
                SimpleChildException.cppbindCxxTypeName -> return SimpleChildException(CppBindObject(id, owner))
                else -> return SimpleBaseException(CppBindObject(id, owner))
            }
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(err_num: Int): this(CppBindObject(construct_helper(err_num), true)) {
    }
    
    open fun errNum(): Int {
        val result = jErrnum(id)
        
        return result
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jErrnum(id: Long): Int
    private external fun jFinalize(id: Long): Unit
}

open class SimpleChildException
internal constructor(obj: CppBindObject) : SimpleBaseException(obj) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(err_num: Int): Long {
            val id = jConstructor(err_num)
            return id
        }

        @JvmStatic
        private external fun jConstructor(err_num: Int, vararg extraObjs: Any?): Long
        const val cppbindCxxTypeName: String = "cppbind::example::SimpleChildException"
    }
    
    
    /**
     * comments
     * 
     */
    constructor(err_num: Int): this(CppBindObject(construct_helper(err_num), true)) {
    }
    
    /**
     * comments
     * 
     */
    open override fun errNum(): Int {
        val result = jErrnum(id)
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jErrnum(id: Long): Int
}

private external fun jGettypebyid(id: Long): String
