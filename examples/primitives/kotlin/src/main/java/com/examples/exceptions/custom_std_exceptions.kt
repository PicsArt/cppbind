/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/04/2022-08:43.
 * Please do not change it manually.
 */

package com.examples.exceptions

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.iegen.exception_helpers.StdException

open class SystemError
internal constructor(obj: IEGenObject) : StdException(obj) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String): Long
        const val iegenCxxTypeName: String = "iegen::example::SystemError"

        public fun iegenDowncast(id: Long, owner: Boolean = false): SystemError {
            val idType = jGettypebyid(id)
            when (idType) {
                FileError.iegenCxxTypeName -> return FileError(IEGenObject(id, owner))
                else -> return SystemError(IEGenObject(id, owner))
            }
        }
    }
    
    
    /**
     * comments
     * 
     */
    constructor(message: String): this(IEGenObject(construct_helper(message), true)) {
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(id)
        val jdktokotlinresult = result!!
        return jdktokotlinresult
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String?
}

open class FileError
internal constructor(obj: IEGenObject) : SystemError(obj) {
    companion object {
        
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String): Long
        const val iegenCxxTypeName: String = "iegen::example::FileError"
    }
    
    
    constructor(message: String): this(IEGenObject(construct_helper(message), true)) {
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(id)
        val jdktokotlinresult = result!!
        return jdktokotlinresult
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String?
}

private external fun jGettypebyid(id: Long): String
