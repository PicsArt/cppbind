/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/01/2022-07:54.
 * Please do not change it manually.
 */

package com.examples.exceptions

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*
import com.examples.cppbind.exception_helpers.StdException

open class SystemError
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String, vararg extraObjs: Any?): Long
        const val cppbindCxxTypeName: String = "cppbind::example::SystemError"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): SystemError {
            val idType = jGettypebyid(id)
            when (idType) {
                FileError.cppbindCxxTypeName -> return FileError(CppBindObject(id, owner))
                else -> return SystemError(CppBindObject(id, owner))
            }
        }
    }
    
    
    /**
     * comments
     * 
     */
    constructor(message: String): this(CppBindObject(construct_helper(message), true)) {
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(id)
        val jdktokotlinresult = result!!
        return jdktokotlinresult
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String?
}

open class FileError
internal constructor(obj: CppBindObject) : SystemError(obj) {
    companion object {
        
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String, vararg extraObjs: Any?): Long
        const val cppbindCxxTypeName: String = "cppbind::example::FileError"
    }
    
    
    constructor(message: String): this(CppBindObject(construct_helper(message), true)) {
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(id)
        val jdktokotlinresult = result!!
        return jdktokotlinresult
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String?
}

private external fun jGettypebyid(id: Long): String
