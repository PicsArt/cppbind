/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/30/2021-12:38.
 * Please do not change it manually.
 */

package com.examples.exceptions

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*

/**
 * comments
 * 
 */
open class SystemError
internal constructor(_id: Long) : StdException(_id) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String): Long
    }
    
    
    /**
     * comments
     * 
     */
    constructor(message: String): this(construct_helper(message)) {
        //jSet_this(id, this)
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(getObjId())
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String
}

/**
 * comments
 * 
 */
open class FileError
internal constructor(_id: Long) : SystemError(_id) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(message: String): Long {
            val id = jConstructor(message)
            return id
        }

        @JvmStatic
        private external fun jConstructor(message: String): Long
    }
    
    
    /**
     * comments
     * 
     */
    constructor(message: String): this(construct_helper(message)) {
        //jSet_this(id, this)
    }
    
    /**
     * comments
     * 
     */
    open override fun what(): String {
        val result = jWhat(getObjId())
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String
}

/**
 * comments
 * 
 */
open class SimpleBaseException
internal constructor(_id: Long) : AutoCloseable, Exception() {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(err_num: Int): Long {
            val id = jConstructor(err_num)
            return id
        }

        @JvmStatic
        private external fun jConstructor(err_num: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    /**
     * comments
     * 
     */
    constructor(err_num: Int): this(construct_helper(err_num)) {
        //jSet_this(id, this)
    }
    
    /**
     * comments
     * 
     */
    open fun errNum(): Int {
        val result = jErrnum(getObjId())
        
        return result
    }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jErrnum(id: Long): Int
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}

/**
 * comments
 * 
 */
open class SimpleChildException
internal constructor(_id: Long) : SimpleBaseException(_id) {
    companion object {
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(err_num: Int): Long {
            val id = jConstructor(err_num)
            return id
        }

        @JvmStatic
        private external fun jConstructor(err_num: Int): Long
    }
    
    
    /**
     * comments
     * 
     */
    constructor(err_num: Int): this(construct_helper(err_num)) {
        //jSet_this(id, this)
    }
    
    /**
     * comments
     * 
     */
    open override fun errNum(): Int {
        val result = jErrnum(getObjId())
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jErrnum(id: Long): Int
}

/**
 * comments
 * 
 */
open class Integer
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * comments
         * 
         */
        protected fun construct_helper(n: Int): Long {
            val id = jConstructor(n)
            return id
        }

        @JvmStatic
        private external fun jConstructor(n: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    /**
     * comments
     * 
     */
    constructor(n: Int): this(construct_helper(n)) {
        //jSet_this(id, this)
    }
    
    /**
     * value getter
     */
    val value: Int
        get() {
            val result = jValue(getObjId())
            
            return result
        }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jValue(id: Long): Int
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}

/**
 * comments
 * 
 */
open class Exc
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * comments
         * 
         */
        fun getByKey(m: Map<Int, Int>, key: Int): Int {
            
            val tmp_key_kotlin_to_jdk_m = IntArray(m.size) 
            val tmp_val_kotlin_to_jdk_m = IntArray(m.size) 
            val kotlin_to_jdk_m = Pair<IntArray, IntArray>(tmp_key_kotlin_to_jdk_m, tmp_val_kotlin_to_jdk_m)
            var index_m = 0
            for ((key_m, value_m) in m) {
                
                
                tmp_key_kotlin_to_jdk_m[index_m] = key_m
                tmp_val_kotlin_to_jdk_m[index_m] = value_m
                ++index_m
            }
            val result = jGetbykey(kotlin_to_jdk_m, key)
            
            return result
        }
        @JvmStatic
        private external fun jGetbykey(m: Pair<IntArray, IntArray>, key: Int): Int

        /**
         * comments
         * 
         */
        fun noop(): Unit {
            val result = jNoop()
            
            return result
        }
        @JvmStatic
        private external fun jNoop(): Unit

        /**
         * comments
         * 
         */
        fun returnInteger(do_throw: Boolean): Integer {
            val result = jReturninteger(do_throw)
            val jdk_to_kotlin_result = Integer(result)
            return jdk_to_kotlin_result
        }
        @JvmStatic
        private external fun jReturninteger(do_throw: Boolean): Long

        /**
         * comments
         * 
         */
        fun raiseErrorByType(err_type: String): Unit {
            val result = jRaiseerrorbytype(err_type)
            
            return result
        }
        @JvmStatic
        private external fun jRaiseerrorbytype(err_type: String): Unit
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}