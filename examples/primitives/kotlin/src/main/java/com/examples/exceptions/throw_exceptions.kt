/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-12:27.
 * Please do not change it manually.
 */

package com.examples.exceptions

import com.examples.exception_helpers.*
import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.simple.Task

open class ThrowExc
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        fun getByKey(m: Map<Int, Int>, key: Int): Int {
            
            val tmp_key_kotlin_to_jdk_m = IntArray(m.size) 
            val tmp_val_kotlin_to_jdk_m = IntArray(m.size) 
            val kotlin_to_jdk_m = Pair<IntArray, IntArray>(tmp_key_kotlin_to_jdk_m, tmp_val_kotlin_to_jdk_m)
            var index_m = 0
            for ((key_m, value_m) in m) {
                
                
                tmp_key_kotlin_to_jdk_m[index_m] = key_m
                tmp_val_kotlin_to_jdk_m[index_m] = value_m
                ++index_m
            }
            val result = jGetbykey(kotlin_to_jdk_m, key)
            
            return result
        }
        @JvmStatic
        private external fun jGetbykey(m: Pair<IntArray, IntArray>, key: Int): Int

        /**
         * Throws exception with return value of type string.
         */
        fun throwsWithReturnValueString(): String {
            val result = jThrowswithreturnvaluestring()
            
            return result
        }
        @JvmStatic
        private external fun jThrowswithreturnvaluestring(): String

        /**
         * Throws exception with return value of iegen type.
         */
        fun throwsWithReturnValuePtr(): Task {
            val result = jThrowswithreturnvalueptr()
            val jdk_to_kotlin_result = Task(result)
            return jdk_to_kotlin_result
        }
        @JvmStatic
        private external fun jThrowswithreturnvalueptr(): Long
    }
    
    protected var objId = _id
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }

    override fun close() {
        if (objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jFinalize(id: Long): Unit
}