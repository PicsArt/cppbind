/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 07/26/2022-17:27.
 * Please do not change it manually.
 */

package com.examples.factories

import com.examples.cppbind.*
import com.examples.cppbind.exception_helpers.*
import com.examples.forward_decl.teacher.Teacher

open class School
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(teachers: List<Teacher>): Long {
            val kotlintojdkteachers = LongArray(teachers.size) 
            var index_teachers = 0
            for (value_teachers in teachers) {
                val kotlintojdkvalue_teachers = value_teachers.cppbindObjId
                kotlintojdkteachers[index_teachers] = kotlintojdkvalue_teachers
                ++index_teachers
            }
            val id = jCreate(kotlintojdkteachers, teachers)
            return id
        }

        @JvmStatic
        private external fun jCreate(teachers: LongArray, vararg extraObjs: Any?): Long

        protected fun construct_helper(): Long {
            val id = jCreate_1()
            return id
        }

        @JvmStatic
        private external fun jCreate_1(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::School"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(teachers: List<Teacher>): this(CppBindObject(construct_helper(teachers), true)) {
        this.keepCppBindReference(teachers)
    }

    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    val teachers: List<Teacher>
        get() {
            val result = jTeachers(cppbindObjId)
            val jdktokotlinresult: MutableList<Teacher> = mutableListOf()
            for (value_result in result) {
                val jdktokotlinvalue_result = Teacher(CppBindObject(value_result))
                jdktokotlinresult.add(jdktokotlinvalue_result)
            }
            for (valuejdktokotlinresult in jdktokotlinresult) {
                valuejdktokotlinresult.keepCppBindReference(this)
            }
            return jdktokotlinresult
        }
    
    fun addTeacher(teacher: Teacher): Unit {
        val kotlintojdkteacher = teacher.cppbindObjId
        val result = jAddteacher(cppbindObjId, kotlintojdkteacher, teacher)
        
        this.keepCppBindReference(teacher)
        return result
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as School
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jAddteacher(id: Long, teacher: Long, vararg extraObjs: Any?): Unit
    private external fun jTeachers(id: Long): LongArray
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jGettypebyid(id: Long): String
