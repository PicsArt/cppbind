/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 08/30/2021-11:26.
 * Please do not change it manually.
 */

package com.examples.forward_decl.student

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*
import com.examples.forward_decl.teacher.Teacher

open class Student
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        protected fun construct_helper(st_name: String): Long {
            val id = jConstructor(st_name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(st_name: String): Long

        protected fun construct_helper(teachers: List<Teacher>): Long {
            val kotlin_to_jdk_teachers = LongArray(teachers.size) 
            var index_teachers = 0
            for (value_teachers in teachers) {
                val kotlin_to_jdk_value_teachers = value_teachers.getObjId()
                kotlin_to_jdk_teachers[index_teachers] = kotlin_to_jdk_value_teachers
                ++index_teachers
            }
            val id = jConstructor_1(kotlin_to_jdk_teachers)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(teachers: LongArray): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    constructor(st_name: String): this(construct_helper(st_name)) {
    }

    constructor(teachers: List<Teacher>): this(construct_helper(teachers)) {
    }
    
    var name: String
        get() {
            val result = jName(getObjId())
            
            return result
        }
        set(value) {
            
            jSetname(getObjId(), value)
        }
        
    
    fun addTeacher(t: Teacher): Unit {
        val kotlin_to_jdk_t = t.getObjId()
        val result = jAddteacher(getObjId(), kotlin_to_jdk_t)
        
        return result
    }

    fun teachers(): List<Teacher> {
        val result = jTeachers(getObjId())
        val jdk_to_kotlin_result: MutableList<Teacher> = mutableListOf()
        for (value_result in result) {
            val jdk_to_kotlin_value_result = Teacher(value_result)
            jdk_to_kotlin_result.add(jdk_to_kotlin_value_result)
        }
        return jdk_to_kotlin_result
    }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jAddteacher(id: Long, t: Long): Unit
    private external fun jTeachers(id: Long): LongArray
    private external fun jName(id: Long): String
    private external fun jSetname(id: Long, value: String): Unit
    private external fun jFinalize(id: Long): Unit
}