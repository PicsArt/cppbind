/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/23/2021-09:22.
 * Please do not change it manually.
 */

package com.examples.getters

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*

open class SimpleItem
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        protected fun construct_helper(v: Int): Long {
            val id = jConstructor(v)
            return id
        }

        @JvmStatic
        private external fun jConstructor(v: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    constructor(v: Int): this(construct_helper(v)) {
        //jSet_this(id, this)
    }
    
    var value: Int
        get() {
            val result = jValue(getObjId())
            
            return result
        }
        set(value) {
            
            jSetvalue(getObjId(), value)
        }
        

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jValue(id: Long): Int
    private external fun jSetvalue(id: Long, value: Int): Unit
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}

/**
 * An example class containing template getters that depend on the same type.
 * 
 */
open class OneTypeTemplateGetter
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * Default constructor.
         * 
         */
        protected fun construct_helper(v: Int): Long {
            val id = jConstructor(v)
            return id
        }

        @JvmStatic
        private external fun jConstructor(v: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    /**
     * Default constructor.
     * 
     */
    constructor(v: Int): this(construct_helper(v)) {
        //jSet_this(id, this)
    }
    
    /**
     * Template getter example with return type from one template argument.
     * As we don´t specify a name here then type name(SimpleItem) will be used with appropriate naming convention.
     * E.g. for python will be simple_item.
     * 
     */
    open var simpleItem: SimpleItem
        get() {
            val err = ErrorObj()
            val result = jItemSimpleItem(getObjId(), err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
            val jdk_to_kotlin_result = SimpleItem(result)
            return jdk_to_kotlin_result
        }
        set(value) {
            val err = ErrorObj()
            val kotlin_to_jdk_value = value.getObjId()
            jSetitemSimpleItem(getObjId(), kotlin_to_jdk_value, err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
        }

    /**
     * Template getter example with return type from one template argument.
     * Giving a name here is important as we have another template getter that can have the same type.
     * If we won´t specify the name here then both will have the same name retrieved from type name
     * thus this one will override the previous one or the code won´t compile.
     * 
     */
    open var simpleItemWithType: SimpleItem
        get() {
            val err = ErrorObj()
            val result = jItemwithtypeSimpleItem(getObjId(), err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
            val jdk_to_kotlin_result = SimpleItem(result)
            return jdk_to_kotlin_result
        }
        set(value) {
            val err = ErrorObj()
            val kotlin_to_jdk_value = value.getObjId()
            jSetitemwithtypeSimpleItem(getObjId(), kotlin_to_jdk_value, err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
        }

    var value: Int
        get() {
            val result = jValue(getObjId())
            
            return result
        }
        set(value) {
            
            jSetvalue(getObjId(), value)
        }
        

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jItemSimpleItem(id: Long, __err_obj__: ErrorObj): Long
    private external fun jSetitemSimpleItem(id: Long, value: Long, __err_obj__: ErrorObj): Unit
    private external fun jItemwithtypeSimpleItem(id: Long, __err_obj__: ErrorObj): Long
    private external fun jSetitemwithtypeSimpleItem(id: Long, value: Long, __err_obj__: ErrorObj): Unit
    private external fun jValue(id: Long): Int
    private external fun jSetvalue(id: Long, value: Int): Unit
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}