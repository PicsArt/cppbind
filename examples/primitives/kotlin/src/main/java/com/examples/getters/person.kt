/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/22/2021-11:43.
 * Please do not change it manually.
 */

package com.examples.getters

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*

/**
 * This class contains a private string field and getter/setter methods for it.
 */
open class Person
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        protected fun construct_helper(name: String, email: String, age: Int): Long {
            val id = jConstructor(name, email, age)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String, email: String, age: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    constructor(name: String, email: String, age: Int): this(construct_helper(name, email, age)) {
        //jSet_this(id, this)
    }
    
    var fullName: String
        get() {
            val err = ErrorObj()
            val result = jFullname(getObjId(), err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
            
            return result
        }
        set(value) {
            val err = ErrorObj()
            
            jSetfullname(getObjId(), value, err)
            if (err.typeId != 0) {
                when (err.typeId) {
                    1 -> {
                        val excObj = StdException(err.ptrId)
                        ExceptionHandler.handleUncaughtException(excObj.what())
                    }
                    else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
                }
            }
        }

    val email: String
        get() {
            val result = jEmail(getObjId())
            
            return result
        }

    var age: Int
        get() {
            val result = jAge(getObjId())
            
            return result
        }
        set(value) {
            
            jSetage(getObjId(), value)
        }
        

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFullname(id: Long, __err_obj__: ErrorObj): String
    private external fun jSetfullname(id: Long, value: String, __err_obj__: ErrorObj): Unit
    private external fun jEmail(id: Long): String
    private external fun jAge(id: Long): Int
    private external fun jSetage(id: Long, value: Int): Unit
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}