/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 07/22/2022-13:29.
 * Please do not change it manually.
 */

package com.examples.globs

import com.examples.cppbind.*
import com.examples.cppbind.exception_helpers.*

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

/**
 * An example of template function which is overloaded in target languages and for Kotlin should be annotated
 * with JvmName, otherwise all overloads will have the same JVM signature.
 */
@JvmName("mergeInt")
fun merge(first: List<Int>, second: List<Int>): List<Int> {
    val kotlintojdkfirst = IntArray(first.size) 
    var index_first = 0
    for (value_first in first) {
        
        kotlintojdkfirst[index_first] = value_first
        ++index_first
    }
    val kotlintojdksecond = IntArray(second.size) 
    var index_second = 0
    for (value_second in second) {
        
        kotlintojdksecond[index_second] = value_second
        ++index_second
    }
    val result = jMergeInt(kotlintojdkfirst, kotlintojdksecond, first, second)
    val jdktokotlinresult: MutableList<Int> = mutableListOf()
    for (value_result in result) {
        
        jdktokotlinresult.add(value_result)
    }
    return jdktokotlinresult
}

/**
 * An example of template function which is overloaded in target languages and for Kotlin should be annotated
 * with JvmName, otherwise all overloads will have the same JVM signature.
 */
@JvmName("mergeString")
fun merge(first: List<String>, second: List<String>): List<String> {
    val kotlintojdkfirst = ObjectArray(first.size) { Any() }
    var index_first = 0
    for (value_first in first) {
        
        kotlintojdkfirst[index_first] = value_first
        ++index_first
    }
    val kotlintojdksecond = ObjectArray(second.size) { Any() }
    var index_second = 0
    for (value_second in second) {
        
        kotlintojdksecond[index_second] = value_second
        ++index_second
    }
    val result = jMergeString(kotlintojdkfirst, kotlintojdksecond, first, second)
    val jdktokotlinresult: MutableList<String> = mutableListOf()
    for (value_result in result) {
        @Suppress("UNCHECKED_CAST") val actual_value_result = value_result as String
        
        jdktokotlinresult.add(actual_value_result)
    }
    return jdktokotlinresult
}

/**
 * An example of overloaded function which has template argument and for Kotlin should be annotated
 * with JvmName, otherwise all overloads will have the same JVM signature.
 */
fun sum(first: List<Int>, second: List<Int>): List<Int> {
    val kotlintojdkfirst = IntArray(first.size) 
    var index_first = 0
    for (value_first in first) {
        
        kotlintojdkfirst[index_first] = value_first
        ++index_first
    }
    val kotlintojdksecond = IntArray(second.size) 
    var index_second = 0
    for (value_second in second) {
        
        kotlintojdksecond[index_second] = value_second
        ++index_second
    }
    val result = jSum(kotlintojdkfirst, kotlintojdksecond, first, second)
    val jdktokotlinresult: MutableList<Int> = mutableListOf()
    for (value_result in result) {
        
        jdktokotlinresult.add(value_result)
    }
    return jdktokotlinresult
}

/**
 * An example of overloaded function which has template argument and for Kotlin should be annotated
 * with JvmName, otherwise all overloads will have the same JVM signature.
 */
@JvmName("sum1")
fun sum(first: List<Float>, second: List<Float>): List<Float> {
    val kotlintojdkfirst = FloatArray(first.size) 
    var index_first = 0
    for (value_first in first) {
        
        kotlintojdkfirst[index_first] = value_first
        ++index_first
    }
    val kotlintojdksecond = FloatArray(second.size) 
    var index_second = 0
    for (value_second in second) {
        
        kotlintojdksecond[index_second] = value_second
        ++index_second
    }
    val result = jSum_1(kotlintojdkfirst, kotlintojdksecond, first, second)
    val jdktokotlinresult: MutableList<Float> = mutableListOf()
    for (value_result in result) {
        
        jdktokotlinresult.add(value_result)
    }
    return jdktokotlinresult
}

private external fun jMergeInt(first: IntArray, second: IntArray, vararg extraObjs: Any?): IntArray
private external fun jMergeString(first: ObjectArray, second: ObjectArray, vararg extraObjs: Any?): ObjectArray
private external fun jSum(first: IntArray, second: IntArray, vararg extraObjs: Any?): IntArray
private external fun jSum_1(first: FloatArray, second: FloatArray, vararg extraObjs: Any?): FloatArray

private external fun jGettypebyid(id: Long): String
