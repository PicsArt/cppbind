/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/11/2022-09:04.
 * Please do not change it manually.
 */

package com.examples.globs

import com.examples.cppbind.*
import com.examples.cppbind.exceptions.*
import com.examples.simple.Project
import com.examples.simple.Root

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

/**
 * A global function example.
 */
fun mul(first: Int, second: Int): Int {
    val result = jMul(first, second)
    
    return result
}

/**
 * A global function example.
 */
fun mul(first: Int, second: Int, third: Int): Int {
    val result = jMulThree(first, second, third)
    
    return result
}

/**
 * A global function example.
 */
fun concat(str1: String, str2: String): String {
    val result = jConcat(str1, str2)
    
    return result
}

/**
 * A global overloaded function example.
 */
fun concat(str1: String, str2: String, str3: String): String {
    val result = jConcat1(str1, str2, str3)
    
    return result
}

/**
 * A global template function example.
 */
fun max(a: Int, b: Int): Int {
    val result = jMaxInt(a, b)
    
    return result
}

/**
 * A global template function example.
 */
fun max(a: String, b: String): String {
    val result = jMaxString(a, b)
    
    return result
}

/**
 * A global template function example in namespace.
 */
fun makePair(a: Project, b: Project): Pair<Project, Project> {
    val kotlintojdka = a.cppbindObjId
    val kotlintojdkb = b.cppbindObjId
    val result = jMakepairProjectProject(kotlintojdka, kotlintojdkb, a, b)
    val firstResult = result.first
    val secondResult = result.second
    val jdktokotlinfirstResult = Project(CppBindObject(firstResult))
    val jdktokotlinsecondResult = Project(CppBindObject(secondResult))
    val jdktokotlinresult = Pair<Project, Project>(jdktokotlinfirstResult, jdktokotlinsecondResult)
    return jdktokotlinresult
}

/**
 * A global template function example in namespace.
 */
fun makePair(a: Root, b: Project): Pair<Root, Project> {
    val kotlintojdka = a.cppbindObjId
    val kotlintojdkb = b.cppbindObjId
    val result = jMakepairRootProject(kotlintojdka, kotlintojdkb, a, b)
    val firstResult = result.first
    val secondResult = result.second
    val jdktokotlinfirstResult = Root(CppBindObject(firstResult))
    val jdktokotlinsecondResult = Project(CppBindObject(secondResult))
    val jdktokotlinresult = Pair<Root, Project>(jdktokotlinfirstResult, jdktokotlinsecondResult)
    return jdktokotlinresult
}

/**
 * A global function with pointer default value and nullable return value.
 */
fun optionalFDPtr(project: Project? = null): Project? {
    val kotlintojdkproject = project?.cppbindObjId ?: 0L
    val result = jOptionalfdptr(kotlintojdkproject, project)
    val jdktokotlinresult = if (result == 0L) null else Project(CppBindObject(result))
    return jdktokotlinresult
}

/**
 * A global function with no return value.
 */
fun doNothing(): Unit {
    val result = jDonothing()
    
    return result
}

private external fun jMul(first: Int, second: Int, vararg extraObjs: Any?): Int
private external fun jMulThree(first: Int, second: Int, third: Int, vararg extraObjs: Any?): Int
private external fun jConcat(str1: String, str2: String, vararg extraObjs: Any?): String
private external fun jConcat1(str1: String, str2: String, str3: String, vararg extraObjs: Any?): String
private external fun jMaxInt(a: Int, b: Int, vararg extraObjs: Any?): Int
private external fun jMaxString(a: String, b: String, vararg extraObjs: Any?): String
private external fun jMakepairProjectProject(a: Long, b: Long, vararg extraObjs: Any?): Pair<Long, Long>
private external fun jMakepairRootProject(a: Long, b: Long, vararg extraObjs: Any?): Pair<Long, Long>
private external fun jOptionalfdptr(project: Long, vararg extraObjs: Any?): Long
private external fun jDonothing(): Unit

private external fun jGettypebyid(id: Long): String
