/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/05/2022-13:33.
 * Please do not change it manually.
 */

package com.examples.inheritance

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.inheritance.mammals.IMammals


interface IAnimal : AutoCloseable {
    val id: Long
    fun keepIEGenReference(ref: Any)
    
    
    open fun typeName(): String {
        val result = IAnimalHelper.jTypename(id)
        
        return result
    }

    fun equals(a: IAnimal): Boolean {
        val kotlintojdka = a.id
        val result = IAnimalHelper.jEquals(id, kotlintojdka)
        
        return result
    }

    companion object {
        public fun iegenConstructObject(id: Long, owner: Boolean = false): IAnimal {
            val idType = jGettypebyid(id)
            when (idType) {
                LittleFrog.iegenCxxTypeName -> return LittleFrog(IEGenObject(id, owner))
                Frog.iegenCxxTypeName -> return Frog(IEGenObject(id, owner))
                IMammals.Dolphin.iegenCxxTypeName -> return IMammals.Dolphin(IEGenObject(id, owner))
                AquaticAnimal.iegenCxxTypeName -> return AquaticAnimal(IEGenObject(id, owner))
                TerrestrialAnimalImpl.iegenCxxTypeName -> return TerrestrialAnimalImpl(IEGenObject(id, owner))
                else -> return AnimalImpl(IEGenObject(id, owner))
            }
        }
    }
}


class IAnimalHelper {
    companion object {
        @JvmStatic
        external fun jTypename(id: Long): String
        @JvmStatic
        external fun jEquals(id: Long, a: Long): Boolean
    }
}


open class AnimalImpl
internal constructor(obj : IEGenObject) : IAnimal {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::Animal"
    }

    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }

    override val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}


interface ITerrestrialAnimal : IAnimal {
    
    
    open override fun typeName(): String {
        val result = ITerrestrialAnimalHelper.jTypename(id)
        
        return result
    }

    companion object {
        public fun iegenConstructObject(id: Long, owner: Boolean = false): ITerrestrialAnimal {
            val idType = jGettypebyid(id)
            when (idType) {
                LittleFrog.iegenCxxTypeName -> return LittleFrog(IEGenObject(id, owner))
                Frog.iegenCxxTypeName -> return Frog(IEGenObject(id, owner))
                else -> return TerrestrialAnimalImpl(IEGenObject(id, owner))
            }
        }
    }
}


class ITerrestrialAnimalHelper {
    companion object {
        @JvmStatic
        external fun jTypename(id: Long): String
    }
}


open class TerrestrialAnimalImpl
internal constructor(obj : IEGenObject) : ITerrestrialAnimal {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::TerrestrialAnimal"
    }

    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }

    override val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}

open class AquaticAnimal
internal constructor(obj: IEGenObject) : IAnimal, AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::AquaticAnimal"

        public fun iegenConstructObject(id: Long, owner: Boolean = false): AquaticAnimal {
            val idType = jGettypebyid(id)
            when (idType) {
                LittleFrog.iegenCxxTypeName -> return LittleFrog(IEGenObject(id, owner))
                Frog.iegenCxxTypeName -> return Frog(IEGenObject(id, owner))
                IMammals.Dolphin.iegenCxxTypeName -> return IMammals.Dolphin(IEGenObject(id, owner))
                else -> return AquaticAnimal(IEGenObject(id, owner))
            }
        }
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    override val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
    
    open override fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
    private external fun jFinalize(id: Long): Unit
}

open class Frog
internal constructor(obj: IEGenObject) : ITerrestrialAnimal, AquaticAnimal(obj) {
    companion object {
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::Frog"
    }
    
    override val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
    
    open override fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
}

/**
 * Class to help checking the empty case of descendants list
 */
open class LittleFrog
internal constructor(obj: IEGenObject) : Frog(obj) {
    companion object {
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::LittleFrog"
    }
    
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
}

open class AnimalUsage
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        protected fun construct_helper(little_frog: LittleFrog): Long {
            val kotlintojdklittle_frog = little_frog.id
            val id = jConstructor_1(kotlintojdklittle_frog)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(little_frog: Long): Long

        fun getAnimalTypeName(animal: IAnimal): String {
            val kotlintojdkanimal = animal.id
            val result = jGetanimaltypename(kotlintojdkanimal)
            
            return result
        }
        @JvmStatic
        private external fun jGetanimaltypename(animal: Long): String

        fun getAquaticAnimalTypeName(animal: AquaticAnimal): String {
            val kotlintojdkanimal = animal.id
            val result = jGetaquaticanimaltypename(kotlintojdkanimal)
            
            return result
        }
        @JvmStatic
        private external fun jGetaquaticanimaltypename(animal: Long): String
        const val iegenCxxTypeName: String = "iegen::example::AnimalUsage"
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }

    constructor(little_frog: LittleFrog): this(IEGenObject(construct_helper(little_frog), true)) {
    }
    
    fun getAnimal(): IAnimal {
        val result = jGetanimal(id)
        
        val jdktokotlinresult : IAnimal
        jdktokotlinresult = IAnimal.iegenConstructObject(result)
        return jdktokotlinresult
    }

    fun getAquaticAnimal(): AquaticAnimal {
        val result = jGetaquaticanimal(id)
        
        val jdktokotlinresult : AquaticAnimal
        jdktokotlinresult = AquaticAnimal.iegenConstructObject(result)
        return jdktokotlinresult
    }

    fun getFrog(): Frog {
        val result = jGetfrog(id)
        val jdktokotlinresult = Frog(IEGenObject(result))
        return jdktokotlinresult
    }

    /**
     * Method to check that any downcast is not done when descendants=[]
     */
    fun getLittleFrog(): Frog {
        val result = jGetlittlefrog(id)
        val jdktokotlinresult = Frog(IEGenObject(result))
        return jdktokotlinresult
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jGetanimal(id: Long): Long
    private external fun jGetaquaticanimal(id: Long): Long
    private external fun jGetfrog(id: Long): Long
    private external fun jGetlittlefrog(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
