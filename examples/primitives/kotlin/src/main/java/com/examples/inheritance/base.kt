/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/05/2022-07:39.
 * Please do not change it manually.
 */

package com.examples.inheritance

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*


interface IBase : AutoCloseable {
    val id: Long
    fun keepIEGenReference(ref: Any)
    
    
    open fun value(): String {
        val result = IBaseHelper.jValue(id)
        
        return result
    }

    companion object {
        public fun iegenDowncast(id: Long, owner: Boolean = false): IBase {
            val idType = jGettypebyid(id)
            when (idType) {
                DateTime.iegenCxxTypeName -> return DateTime(IEGenObject(id, owner))
                Date.iegenCxxTypeName -> return Date(IEGenObject(id, owner))
                TimeImpl.iegenCxxTypeName -> return TimeImpl(IEGenObject(id, owner))
                else -> return BaseImpl(IEGenObject(id, owner))
            }
        }
    }
}


class IBaseHelper {
    companion object {
        @JvmStatic
        external fun jValue(id: Long): String
    }
}


open class BaseImpl
internal constructor(obj : IEGenObject) : IBase {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        const val iegenCxxTypeName: String = "iegen::example::Base"
    }

    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }

    override val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
