/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/11/2022-13:52.
 * Please do not change it manually.
 */

package com.examples.inheritance

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*


interface ISign : AutoCloseable {
    val id: Long
    
    
    open fun typeName(): String {
        val result = ISignHelper.jTypename(id)
        
        return result
    }
}


class ISignHelper {
    companion object {
        @JvmStatic
        external fun jTypename(id: Long): String
    }
}


open class SignImpl
internal constructor(_id: Long, _owner: Boolean = false) : ISign {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }

    protected var objId = _id
    protected val owner = _owner
    override val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}

open class Text
internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var objId = _id
    protected val owner = _owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }
    
    open fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
    private external fun jFinalize(id: Long): Unit
}

open class Digit
internal constructor(_id: Long, _owner: Boolean = false) : ISign, Text(_id, _owner) {
    companion object {
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    override val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }
    
    open override fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
}

open class SymbolUsage
internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        protected fun construct_helper(d: Digit): Long {
            val kotlintojdkd = d.id
            val id = jConstructor_1(kotlintojdkd)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(d: Long): Long
    }
    
    protected var objId = _id
    protected val owner = _owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }

    constructor(d: Digit): this(construct_helper(d), true) {
    }
    
    fun getTextType(t: Text): String {
        val kotlintojdkt = t.id
        val result = jGettexttype(id, kotlintojdkt)
        
        return result
    }

    fun getSignType(s: ISign): String {
        val kotlintojdks = s.id
        val result = jGetsigntype(id, kotlintojdks)
        
        return result
    }

    fun getTextId(t: Text): Int {
        val kotlintojdkt = t.id
        val result = jGettextid(id, kotlintojdkt)
        
        return result
    }

    fun getSignId(s: ISign): Int {
        val kotlintojdks = s.id
        val result = jGetsignid(id, kotlintojdks)
        
        return result
    }

    fun getTextPtr(): Text {
        val result = jGettextptr(id)
        
        val jdktokotlinresult : Text
        val resultType = jGettypebyid(result)
        when (resultType) {
            "iegen::example::Digit" -> jdktokotlinresult = Digit(result)
            else -> jdktokotlinresult = Text(result)
        }
        return jdktokotlinresult
    }

    fun getSignPtr(): ISign {
        val result = jGetsignptr(id)
        
        val jdktokotlinresult : ISign
        val resultType = jGettypebyid(result)
        when (resultType) {
            "iegen::example::Digit" -> jdktokotlinresult = Digit(result)
            else -> jdktokotlinresult = SignImpl(result)
        }
        return jdktokotlinresult
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jGettexttype(id: Long, t: Long): String
    private external fun jGetsigntype(id: Long, s: Long): String
    private external fun jGettextid(id: Long, t: Long): Int
    private external fun jGetsignid(id: Long, s: Long): Int
    private external fun jGettextptr(id: Long): Long
    private external fun jGetsignptr(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
