/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/01/2022-07:54.
 * Please do not change it manually.
 */

package com.examples.misc

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*

open class WithExternalAPIComments
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(s: String): Long {
            val id = jConstructor(s)
            return id
        }

        @JvmStatic
        private external fun jConstructor(s: String, vararg extraObjs: Any?): Long

        /**
         * retInt function
         * returns integer passed by argument
         */
        fun retInt(n: Int): Int {
            val result = jRetint(n)
            
            return result
        }
        @JvmStatic
        private external fun jRetint(n: Int, vararg extraObjs: Any?): Int

        fun max(a: Int, b: Int): Int {
            val result = jMaxInt(a, b)
            
            return result
        }
        @JvmStatic
        private external fun jMaxInt(a: Int, b: Int, vararg extraObjs: Any?): Int

        fun max(a: String, b: String): String {
            val result = jMaxString(a, b)
            
            return result
        }
        @JvmStatic
        private external fun jMaxString(a: String, b: String, vararg extraObjs: Any?): String
        const val cppbindCxxTypeName: String = "cppbind::example::WithExternalAPIComments"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(s: String): this(CppBindObject(construct_helper(s), true)) {
    }
    
    var str: String
        get() {
            val result = jStr(id)
            
            return result
        }
        set(value) {
            
            jSetstr(id, value, value)
        }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jStr(id: Long): String
    private external fun jSetstr(id: Long, value: String, valueObj: Any?): Unit
    private external fun jFinalize(id: Long): Unit
}

open class AdderInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        fun add(a: Int, b: Int): Int {
            val result = jAdd(a, b)
            
            return result
        }
        @JvmStatic
        private external fun jAdd(a: Int, b: Int, vararg extraObjs: Any?): Int
        const val cppbindCxxTypeName: String = "cppbind::example::Adder<int>"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jFinalize(id: Long): Unit
}

open class AdderDouble
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        fun add(a: Double, b: Double): Double {
            val result = jAdd(a, b)
            
            return result
        }
        @JvmStatic
        private external fun jAdd(a: Double, b: Double, vararg extraObjs: Any?): Double
        const val cppbindCxxTypeName: String = "cppbind::example::Adder<double>"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jFinalize(id: Long): Unit
}

enum class color(val value: Int) {
    RED(0),
    GREEN(1),
    BLUE(2);

    companion object {
        private val values = values()
        fun getByValue(value: Int) = values.firstOrNull { it.value == value }
    }
}

private external fun jGettypebyid(id: Long): String
