/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/19/2022-06:38.
 * Please do not change it manually.
 */

package com.examples.nested_types

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*

open class List
internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var objId = _id
    protected val owner = _owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }
    
    val back: Item
        get() {
            val result = jBack(id)
            val jdktokotlinresult = Item(result)
            return jdktokotlinresult
        }
    
    open class Item
    internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
        companion object {
            init {
                System.loadLibrary("wrapper_jni")
            }
            
            protected fun construct_helper(v: Value): Long {val kotlintojdkv = v.id
                val id = jConstructor(kotlintojdkv)
                return id
            }

            @JvmStatic
            private external fun jConstructor(v: Long): Long
        }
        
        protected var objId = _id
        protected val owner = _owner
        
        open val id: Long
            get() {
                if (objId == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return objId
            }
        
        constructor(v: Value): this(construct_helper(v), true) {
        }
        
        var value: Value
            get() {
                val result = jValue(id)
                val jdktokotlinresult = Value(result)
                return jdktokotlinresult
            }
            set(value) {
                val kotlintojdkvalue = value.id
                jSetvalue(id, kotlintojdkvalue)
            }
            
        
        open class Value
        internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
            companion object {
                init {
                    System.loadLibrary("wrapper_jni")
                }
                
                protected fun construct_helper(_value: Int): Long {
                    val id = jConstructor(_value)
                    return id
                }

                @JvmStatic
                private external fun jConstructor(_value: Int): Long
            }
            
            protected var objId = _id
            protected val owner = _owner
            
            open val id: Long
                get() {
                    if (objId == 0L) {
                        throw RuntimeException("Object is not allocated")
                    }
                    return objId
                }
            
            constructor(_value: Int): this(construct_helper(_value), true) {
            }
            
            var value: Int
                get() {
                    val result = jValue(id)
                    
                    return result
                }
                set(value) {
                    
                    jSetvalue(id, value)
                }
                

            override fun close() {
                if (owner && objId != 0L) {
                    jFinalize(objId)
                    objId = 0L
                }
            }

            /**
             * Finalize and deletes the object
             */
            protected fun finalize() {
                close()
            }

            ///// External wrapper functions ////////////
            private external fun jValue(id: Long): Int
            private external fun jSetvalue(id: Long, value: Int): Unit
            private external fun jFinalize(id: Long): Unit
        }

        override fun close() {
            if (owner && objId != 0L) {
                jFinalize(objId)
                objId = 0L
            }
        }

        /**
         * Finalize and deletes the object
         */
        protected fun finalize() {
            close()
        }

        ///// External wrapper functions ////////////
        private external fun jValue(id: Long): Long
        private external fun jSetvalue(id: Long, value: Long): Unit
        private external fun jFinalize(id: Long): Unit
    }

    fun push_back(item: Item): Unit {
        val kotlintojdkitem = item.id
        val result = jPush_back(id, kotlintojdkitem)
        
        return result
    }

    fun pop_back(): Unit {
        val result = jPop_back(id)
        
        return result
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jPush_back(id: Long, item: Long): Unit
    private external fun jPop_back(id: Long): Unit
    private external fun jBack(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}
