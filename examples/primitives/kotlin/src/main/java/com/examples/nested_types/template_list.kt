/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/05/2022-07:39.
 * Please do not change it manually.
 */

package com.examples.nested_types

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*

/**
 * An example with template nested types.
 */
open class TemplateListInt
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::TemplateList<int>"
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
    
    open class Item
    internal constructor(obj: IEGenObject) : AutoCloseable {
        companion object {
            init {
                System.loadLibrary("wrapper_jni")
            }
            
            protected fun construct_helper(v: Int): Long {
                val id = jConstructor(v)
                return id
            }

            @JvmStatic
            private external fun jConstructor(v: Int): Long
            const val iegenCxxTypeName: String = "iegen::example::TemplateList<int>::Item"
        }
        
        protected var iegObj = obj
        private var refs: MutableList<Any> = mutableListOf()

        fun keepIEGenReference(ref: Any) {
            refs.add(ref)
        }
        
        open val id: Long
            get() {
                if (iegObj.id == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return iegObj.id
            }
        
        constructor(v: Int): this(IEGenObject(construct_helper(v), true)) {
        }
        
        var value: Int
            get() {
                val result = jValue(id)
                
                return result
            }
            set(value) {
                
                jSetvalue(id, value)
            }
            

        override fun close() {
            if (iegObj.owner && iegObj.id != 0L) {
                jFinalize(iegObj.id)
                iegObj.id = 0L
            }
        }

        /**
         * Finalize and deletes the object
         */
        protected fun finalize() {
            close()
        }

        ///// External wrapper functions ////////////
        private external fun jValue(id: Long): Int
        private external fun jSetvalue(id: Long, value: Int): Unit
        private external fun jFinalize(id: Long): Unit
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jFinalize(id: Long): Unit
}

/**
 * An example with template nested types.
 */
open class TemplateListDouble
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val iegenCxxTypeName: String = "iegen::example::TemplateList<double>"
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
    
    open class Item
    internal constructor(obj: IEGenObject) : AutoCloseable {
        companion object {
            init {
                System.loadLibrary("wrapper_jni")
            }
            
            protected fun construct_helper(v: Double): Long {
                val id = jConstructor(v)
                return id
            }

            @JvmStatic
            private external fun jConstructor(v: Double): Long
            const val iegenCxxTypeName: String = "iegen::example::TemplateList<double>::Item"
        }
        
        protected var iegObj = obj
        private var refs: MutableList<Any> = mutableListOf()

        fun keepIEGenReference(ref: Any) {
            refs.add(ref)
        }
        
        open val id: Long
            get() {
                if (iegObj.id == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return iegObj.id
            }
        
        constructor(v: Double): this(IEGenObject(construct_helper(v), true)) {
        }
        
        var value: Double
            get() {
                val result = jValue(id)
                
                return result
            }
            set(value) {
                
                jSetvalue(id, value)
            }
            

        override fun close() {
            if (iegObj.owner && iegObj.id != 0L) {
                jFinalize(iegObj.id)
                iegObj.id = 0L
            }
        }

        /**
         * Finalize and deletes the object
         */
        protected fun finalize() {
            close()
        }

        ///// External wrapper functions ////////////
        private external fun jValue(id: Long): Double
        private external fun jSetvalue(id: Long, value: Double): Unit
        private external fun jFinalize(id: Long): Unit
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
