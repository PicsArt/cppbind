/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-08:29.
 * Please do not change it manually.
 */

package com.examples.nested_types

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*

/**
 * An example with template nested types.
 */
open class TemplateListInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::TemplateList<int>"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    open class Item
    internal constructor(obj: CppBindObject) : AutoCloseable {
        companion object {
            init {
                System.loadLibrary("wrapper_jni")
            }
            
            protected fun construct_helper(v: Int): Long {
                val id = jConstructor(v)
                return id
            }

            @JvmStatic
            private external fun jConstructor(v: Int, vararg extraObjs: Any?): Long
            /**
             * An internal property to keep an information about the underlying C++ object type.
             * It is intended to be used by the generated code.
             */
            const val cppbindCxxTypeName: String = "cppbind::example::TemplateList<int>::Item"
        }
        
        protected var cppbindObj = obj
        private var refs: MutableList<Any> = mutableListOf()

        /**
         * An internal method to bind the lifetimes of the current and another object.
         * It is intended to be used by the generated code.
         */
        fun keepCppBindReference(ref: Any) {
            refs.add(ref)
        }
        /**
         * An internal getter to get the id of an object.
         * It is intended to be used by the generated code.
         */
        
        open val id: Long
            get() {
                if (cppbindObj.id == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return cppbindObj.id
            }

        /**
         * An internal property returning underlying C++ object id.
         * It is intended to be used by the generated code.
         */
        internal val cxxId: Long by lazy {
            jGetcxxid(cppbindObj.id)
        }

        /**
         * An internal property returning underlying C++ type name.
         * It is intended to be used by the generated code.
         */
        internal val cxxTypeName: String by lazy {
            jGettypebyid(cppbindObj.id)
        }
        
        constructor(v: Int): this(CppBindObject(construct_helper(v), true)) {
        }
        
        var value: Int
            get() {
                val result = jValue(id)
                
                return result
            }
            set(value) {
                
                jSetvalue(id, value, value)
            }
            

        /**
         * CPPBind generated hashCode method returning the hash of underlying C++ object id. .
         */
        override fun hashCode(): Int {
            return cxxId.hashCode()
        }

        /**
         * CPPBind generated equals method comparing the underlying C++ object ids.
         */
        override fun equals(other: Any?): Boolean {
            other as Item
            return cxxId == other.cxxId
        }

        /**
         * CPPBind generated toString method returning underlying C++ object type and id.
         */
        override fun toString(): String {
            return "<0x%x: %s>".format(cxxId, cxxTypeName)
        }

        override fun close() {
            if (cppbindObj.owner && cppbindObj.id != 0L) {
                jFinalize(cppbindObj.id)
                cppbindObj.id = 0L
            }
        }

        /**
         * Finalize and deletes the object
         */
        protected fun finalize() {
            close()
        }

        ///// External wrapper functions ////////////
        private external fun jValue(id: Long): Int
        private external fun jSetvalue(id: Long, value: Int, valueObj: Any?): Unit
        private external fun jFinalize(id: Long): Unit
        private external fun jGetcxxid(id: Long): Long
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

/**
 * An example with template nested types.
 */
open class TemplateListDouble
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::TemplateList<double>"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    open class Item
    internal constructor(obj: CppBindObject) : AutoCloseable {
        companion object {
            init {
                System.loadLibrary("wrapper_jni")
            }
            
            protected fun construct_helper(v: Double): Long {
                val id = jConstructor(v)
                return id
            }

            @JvmStatic
            private external fun jConstructor(v: Double, vararg extraObjs: Any?): Long
            /**
             * An internal property to keep an information about the underlying C++ object type.
             * It is intended to be used by the generated code.
             */
            const val cppbindCxxTypeName: String = "cppbind::example::TemplateList<double>::Item"
        }
        
        protected var cppbindObj = obj
        private var refs: MutableList<Any> = mutableListOf()

        /**
         * An internal method to bind the lifetimes of the current and another object.
         * It is intended to be used by the generated code.
         */
        fun keepCppBindReference(ref: Any) {
            refs.add(ref)
        }
        /**
         * An internal getter to get the id of an object.
         * It is intended to be used by the generated code.
         */
        
        open val id: Long
            get() {
                if (cppbindObj.id == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return cppbindObj.id
            }

        /**
         * An internal property returning underlying C++ object id.
         * It is intended to be used by the generated code.
         */
        internal val cxxId: Long by lazy {
            jGetcxxid(cppbindObj.id)
        }

        /**
         * An internal property returning underlying C++ type name.
         * It is intended to be used by the generated code.
         */
        internal val cxxTypeName: String by lazy {
            jGettypebyid(cppbindObj.id)
        }
        
        constructor(v: Double): this(CppBindObject(construct_helper(v), true)) {
        }
        
        var value: Double
            get() {
                val result = jValue(id)
                
                return result
            }
            set(value) {
                
                jSetvalue(id, value, value)
            }
            

        /**
         * CPPBind generated hashCode method returning the hash of underlying C++ object id. .
         */
        override fun hashCode(): Int {
            return cxxId.hashCode()
        }

        /**
         * CPPBind generated equals method comparing the underlying C++ object ids.
         */
        override fun equals(other: Any?): Boolean {
            other as Item
            return cxxId == other.cxxId
        }

        /**
         * CPPBind generated toString method returning underlying C++ object type and id.
         */
        override fun toString(): String {
            return "<0x%x: %s>".format(cxxId, cxxTypeName)
        }

        override fun close() {
            if (cppbindObj.owner && cppbindObj.id != 0L) {
                jFinalize(cppbindObj.id)
                cppbindObj.id = 0L
            }
        }

        /**
         * Finalize and deletes the object
         */
        protected fun finalize() {
            close()
        }

        ///// External wrapper functions ////////////
        private external fun jValue(id: Long): Double
        private external fun jSetvalue(id: Long, value: Double, valueObj: Any?): Unit
        private external fun jFinalize(id: Long): Unit
        private external fun jGetcxxid(id: Long): Long
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jGettypebyid(id: Long): String
