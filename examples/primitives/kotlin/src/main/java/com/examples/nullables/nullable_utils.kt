/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 06/28/2021-12:40.
 * Please do not change it manually.
 */

package com.examples.nullables

import alias.*
import com.examples.simple.Task

open class NumberInt
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        protected fun construct_helper(val_: Int): Long {
            val id = jConstructor(val_)
            return id
        }

        @JvmStatic
        private external fun jConstructor(val_: Int): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    constructor(val_: Int): this(construct_helper(val_)) {
        //jSet_this(id, this)
    }
    
    val value: Int
        get() {
            val result = jValue(getObjId())
            
            return result
        }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jValue(id: Long): Int
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}

open class NumberDouble
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        protected fun construct_helper(val_: Double): Long {
            val id = jConstructor(val_)
            return id
        }

        @JvmStatic
        private external fun jConstructor(val_: Double): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    constructor(val_: Double): this(construct_helper(val_)) {
        //jSet_this(id, this)
    }
    
    val value: Double
        get() {
            val result = jValue(getObjId())
            
            return result
        }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jValue(id: Long): Double
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}

/**
 * An example with nullable arguments.
 */
open class Utils
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        fun max(first: NumberDouble?, second: NumberDouble): NumberDouble? {
            val kotlin_to_jdk_first = first?.getObjId() ?: 0L
            val kotlin_to_jdk_second = second.getObjId()
            val result = jMax(kotlin_to_jdk_first, kotlin_to_jdk_second)
            val jdk_to_kotlin_result = if (result == 0L) null else NumberDouble(result)
            return jdk_to_kotlin_result
        }
        @JvmStatic
        private external fun jMax(first: Long, second: Long): Long

        fun max(first: NumberInt?, second: NumberInt?): NumberInt? {
            val kotlin_to_jdk_first = first?.getObjId() ?: 0L
            val kotlin_to_jdk_second = second?.getObjId() ?: 0L
            val result = jMax_1(kotlin_to_jdk_first, kotlin_to_jdk_second)
            val jdk_to_kotlin_result = if (result == 0L) null else NumberInt(result)
            return jdk_to_kotlin_result
        }
        @JvmStatic
        private external fun jMax_1(first: Long, second: Long): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    


    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    

    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}