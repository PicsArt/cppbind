/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/25/2021-13:08.
 * Please do not change it manually.
 */

package com.examples.operators

import alias.*
import com.examples.exception_helpers.*
import exceptionUtils.*

/**
 * An example for with overloaded methods.
 */
open class Counter
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * Counter constructor.
         */
        protected fun construct_helper(count: Int): Long {
            val id = jConstructor(count)
            return id
        }

        @JvmStatic
        private external fun jConstructor(count: Int): Long
    }
    
    protected var ObjId = _id
    
    open val id: Long
        get() {
            if (ObjId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return ObjId;
        }
    
    /**
     * Counter constructor.
     */
    constructor(count: Int): this(construct_helper(count)) {
    }
    
    /**
     * Getter for count.
     */
    val count: Int
        get() {
            val result = jCount(id)
            
            return result
        }
    
    /**
     * Plus operator
     */
    operator fun plus(counter: Counter): Counter {
        val kotlin_to_jdk_counter = counter.id
        val result = jPlus(id, kotlin_to_jdk_counter)
        val jdk_to_kotlin_result = Counter(result)
        return jdk_to_kotlin_result
    }

    /**
     * Comparison operator for kotlin
     */
    operator fun compareTo(counter: Counter): Int {
        val kotlin_to_jdk_counter = counter.id
        val result = jCompareto(id, kotlin_to_jdk_counter)
        
        return result
    }

    fun gt(counter: Counter): Boolean {
        val kotlin_to_jdk_counter = counter.id
        val result = jGt(id, kotlin_to_jdk_counter)
        
        return result
    }

    fun add(counter: Counter): Counter {
        val kotlin_to_jdk_counter = counter.id
        val result = jAdd(id, kotlin_to_jdk_counter)
        val jdk_to_kotlin_result = Counter(result)
        return jdk_to_kotlin_result
    }

    override fun close() {
        if (ObjId != 0L) {
            jFinalize(ObjId)
            ObjId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jCount(id: Long): Int
    private external fun jPlus(id: Long, counter: Long): Long
    private external fun jCompareto(id: Long, counter: Long): Int
    private external fun jGt(id: Long, counter: Long): Boolean
    private external fun jAdd(id: Long, counter: Long): Long
    private external fun jFinalize(id: Long): Unit
}