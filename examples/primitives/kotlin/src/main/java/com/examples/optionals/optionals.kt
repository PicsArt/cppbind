/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/06/2022-18:58.
 * Please do not change it manually.
 */

package com.examples.optionals

import com.examples.enums.Color
import com.examples.enums.ColorShade
import com.examples.getters.Person
import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.simple.Project
import com.examples.simple.Root
import com.examples.simple.Task

open class Optionals
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor_1()
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(): Long


        protected fun construct_helper(task: Task, i: Int): Long {
            val kotlintojdktask = task.id
            val id = jConstructor_2(kotlintojdktask, i)
            return id
        }

        @JvmStatic
        private external fun jConstructor_2(task: Long, i: Int): Long


        protected fun construct_helper(task: Task, i: Int, r: Root): Long {
            val kotlintojdktask = task.id
            val kotlintojdkr = r.id
            val id = jConstructor(kotlintojdktask, i, kotlintojdkr)
            return id
        }

        @JvmStatic
        private external fun jConstructor(task: Long, i: Int, r: Long): Long
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }


    constructor(task: Task, i: Int = 1): this(IEGenObject(construct_helper(task, i), true)) {
    }


    constructor(task: Task, i: Int = 1, r: Root): this(IEGenObject(construct_helper(task, i, r), true)) {
    }
    
    fun optionalPtrWithNullptrDefault(task: Task? = null): Task? {
        val kotlintojdktask = task?.id ?: 0L
        val result = jOptionalptrwithnullptrdefault(id, kotlintojdktask)
        val jdktokotlinresult = if (result == 0L) null else Task(IEGenObject(result))
        return jdktokotlinresult
    }

    fun optionalPtrWithNullDefault(task: Task? = null): Task? {
        val kotlintojdktask = task?.id ?: 0L
        val result = jOptionalptrwithnulldefault(id, kotlintojdktask)
        val jdktokotlinresult = if (result == 0L) null else Task(IEGenObject(result))
        return jdktokotlinresult
    }

    fun optionalIntWithDefault(value: Int = 5): Int {
        val result = jOptionalintwithdefault(id, value)
        
        return result
    }

    fun optionalLongWithDefault(value: Long = 7L): Long {
        val result = jOptionallongwithdefault(id, value)
        
        return result
    }

    fun optionalDoubleWithDefault(value: Double = 9.0): Double {
        val result = jOptionaldoublewithdefault(id, value)
        
        return result
    }

    fun optionalFloatWithDefault(value: Float = 11.0F): Float {
        val result = jOptionalfloatwithdefault(id, value)
        
        return result
    }

    fun optionalBoolWithDefault(value: Boolean = true): Boolean {
        val result = jOptionalboolwithdefault(id, value)
        
        return result
    }

    /**
     * @param[in] optionalStr string with default value
     */
    fun optionalStringWithDefault(optionalStr: String = "abc"): String {
        val result = jOptionalstringwithdefault(id, optionalStr)
        
        return result
    }

    fun optionalCharWithDefault(symbol: Char = ','): Char {
        val result = jOptionalcharwithdefault(id, symbol)
        
        return result
    }

    fun optionalCharPointerWithDefault(optionalStr: String = "def"): String {
        val result = jOptionalcharpointerwithdefault(id, optionalStr)
        
        return result
    }

    fun optionalEnumWithDefault(c: Color = Color.Red): Color {
        val kotlintojdkc = c.value
        val result = jOptionalenumwithdefault(id, kotlintojdkc)
        val jdktokotlinresult_optional = Color.getByValue(result)
        if (jdktokotlinresult_optional == null) {
            ExceptionHandler.handleUncaughtException("Internal error: unresolved reference to non existing field of Color enum.")
        }
        val jdktokotlinresult = jdktokotlinresult_optional!!
        return jdktokotlinresult
    }

    fun singleComplexDefaultValue(): Task {
        val result = jSinglecomplexdefaultvalue_1(id)
        val jdktokotlinresult = Task(IEGenObject(result, true))
        return jdktokotlinresult
    }


    fun singleComplexDefaultValue(task: Task): Task {
        val kotlintojdktask = task.id
        val result = jSinglecomplexdefaultvalue(id, kotlintojdktask)
        val jdktokotlinresult = Task(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun multipleMixedDefaultValues(): String {
        val result = jMultiplemixeddefaultvalues_1(id)
        
        return result
    }


    fun multipleMixedDefaultValues(task: Task, i: Int = 1): String {
        val kotlintojdktask = task.id
        val result = jMultiplemixeddefaultvalues_2(id, kotlintojdktask, i)
        
        return result
    }


    fun multipleMixedDefaultValues(task: Task, i: Int = 1, r: Root): String {
        val kotlintojdktask = task.id
        val kotlintojdkr = r.id
        val result = jMultiplemixeddefaultvalues(id, kotlintojdktask, i, kotlintojdkr)
        
        return result
    }

    fun optionalEnumWithDefaultAndFieldPrefix(c: ColorShade = ColorShade.ShadeLight): ColorShade {
        val kotlintojdkc = c.value
        val result = jOptionalenumwithdefaultandfieldprefix(id, kotlintojdkc)
        val jdktokotlinresult_optional = ColorShade.getByValue(result)
        if (jdktokotlinresult_optional == null) {
            ExceptionHandler.handleUncaughtException("Internal error: unresolved reference to non existing field of ColorShade enum.")
        }
        val jdktokotlinresult = jdktokotlinresult_optional!!
        return jdktokotlinresult
    }

    fun optionalEnumWithInternalDefault(c: ColorShade): ColorShade {
        val kotlintojdkc = c.value
        val result = jOptionalenumwithinternaldefault(id, kotlintojdkc)
        val jdktokotlinresult_optional = ColorShade.getByValue(result)
        if (jdktokotlinresult_optional == null) {
            ExceptionHandler.handleUncaughtException("Internal error: unresolved reference to non existing field of ColorShade enum.")
        }
        val jdktokotlinresult = jdktokotlinresult_optional!!
        return jdktokotlinresult
    }

    /**
     * @param[in] optionalStr string with default value
     */
    fun optionalStringViewWithDefault(optionalStr: String = "abc"): String {
        val result = jOptionalstringviewwithdefault(id, optionalStr)
        
        return result
    }

    fun optionalFDPtrWithNullptrDefault(project: Project? = null): Project? {
        val kotlintojdkproject = project?.id ?: 0L
        val result = jOptionalfdptrwithnullptrdefault(id, kotlintojdkproject)
        val jdktokotlinresult = if (result == 0L) null else Project(IEGenObject(result))
        return jdktokotlinresult
    }

    fun optionalSharedPtrWithNullptrDefault(person: Person? = null): Person? {
        val kotlintojdkperson = person?.id ?: 0L
        val result = jOptionalsharedptrwithnullptrdefault(id, kotlintojdkperson)
        val jdktokotlinresult = if (result == 0L) null else Person(IEGenObject(result, true))
        return jdktokotlinresult
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jOptionalptrwithnullptrdefault(id: Long, task: Long): Long
    private external fun jOptionalptrwithnulldefault(id: Long, task: Long): Long
    private external fun jOptionalintwithdefault(id: Long, value: Int): Int
    private external fun jOptionallongwithdefault(id: Long, value: Long): Long
    private external fun jOptionaldoublewithdefault(id: Long, value: Double): Double
    private external fun jOptionalfloatwithdefault(id: Long, value: Float): Float
    private external fun jOptionalboolwithdefault(id: Long, value: Boolean): Boolean
    private external fun jOptionalstringwithdefault(id: Long, optionalStr: String): String
    private external fun jOptionalcharwithdefault(id: Long, symbol: Char): Char
    private external fun jOptionalcharpointerwithdefault(id: Long, optionalStr: String): String
    private external fun jOptionalenumwithdefault(id: Long, c: Int): Int
    private external fun jSinglecomplexdefaultvalue_1(id: Long): Long

    private external fun jSinglecomplexdefaultvalue(id: Long, task: Long): Long
    private external fun jMultiplemixeddefaultvalues_1(id: Long): String

    private external fun jMultiplemixeddefaultvalues_2(id: Long, task: Long, i: Int): String

    private external fun jMultiplemixeddefaultvalues(id: Long, task: Long, i: Int, r: Long): String
    private external fun jOptionalenumwithdefaultandfieldprefix(id: Long, c: Int): Int
    private external fun jOptionalenumwithinternaldefault(id: Long, c: Int): Int
    private external fun jOptionalstringviewwithdefault(id: Long, optionalStr: String): String
    private external fun jOptionalfdptrwithnullptrdefault(id: Long, project: Long): Long
    private external fun jOptionalsharedptrwithnullptrdefault(id: Long, person: Long): Long
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
