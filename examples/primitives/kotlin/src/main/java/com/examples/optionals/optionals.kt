/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/23/2021-09:57.
 * Please do not change it manually.
 */

package com.examples.optionals

import alias.*
import exceptionUtils.*

import com.examples.exception_helpers.*import com.examples.simple.Task
import com.examples.simple.Project
import com.examples.getters.Person
import com.examples.enums.Color

open class Optionals
internal constructor(_id: Long) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni");
        }
        
        /**
         * constructor
         */
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var id = _id
    
    open fun getObjId(): Long {
        if (id == 0L) {
            throw RuntimeException("Object is not allocated")
        }
        return id;
    }
    
    /**
     * constructor
     */
    constructor(): this(construct_helper()) {
        //jSet_this(id, this)
    }
    
    fun optionalPtrWithNullptrDefault(task: Task? = null): Task? {
        val kotlin_to_jdk_task = task?.getObjId() ?: 0L
        val err = ErrorObj()
        val result = jOptionalptrwithnullptrdefault(getObjId(), kotlin_to_jdk_task, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        val jdk_to_kotlin_result = if (result == 0L) null else Task(result)
        return jdk_to_kotlin_result
    }

    fun optionalFDPtrWithNullptrDefault(project: Project? = null): Project? {
        val kotlin_to_jdk_project = project?.getObjId() ?: 0L
        val err = ErrorObj()
        val result = jOptionalfdptrwithnullptrdefault(getObjId(), kotlin_to_jdk_project, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        val jdk_to_kotlin_result = if (result == 0L) null else Project(result)
        return jdk_to_kotlin_result
    }

    fun optionalSharedPtrWithNullptrDefault(person: Person? = null): Person? {
        val kotlin_to_jdk_person = person?.getObjId() ?: 0L
        val err = ErrorObj()
        val result = jOptionalsharedptrwithnullptrdefault(getObjId(), kotlin_to_jdk_person, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        val jdk_to_kotlin_result = if (result == 0L) null else Person(result)
        return jdk_to_kotlin_result
    }

    fun optionalIntWithDefault(value: Int = 5): Int {
        val err = ErrorObj()
        val result = jOptionalintwithdefault(getObjId(), value, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalLongWithDefault(value: Long = 7L): Long {
        val err = ErrorObj()
        val result = jOptionallongwithdefault(getObjId(), value, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalDoubleWithDefault(value: Double = 9.0): Double {
        val err = ErrorObj()
        val result = jOptionaldoublewithdefault(getObjId(), value, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalFloatWithDefault(value: Float = 11.0F): Float {
        val err = ErrorObj()
        val result = jOptionalfloatwithdefault(getObjId(), value, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalBoolWithDefault(value: Boolean = true): Boolean {
        val err = ErrorObj()
        val result = jOptionalboolwithdefault(getObjId(), value, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    /**
     * @param[in] optionalStr string with default value
     */
    fun optionalStringWithDefault(optionalStr: String = "abc"): String {
        val err = ErrorObj()
        val result = jOptionalstringwithdefault(getObjId(), optionalStr, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalCharWithDefault(symbol: Char = ','): Char {
        val err = ErrorObj()
        val result = jOptionalcharwithdefault(getObjId(), symbol, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalCharPointerWithDefault(optionalStr: String = "def"): String {
        val err = ErrorObj()
        val result = jOptionalcharpointerwithdefault(getObjId(), optionalStr, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        
        return result
    }

    fun optionalEnumWithDefault(c: Color = Color.Red): Color {
        val kotlin_to_jdk_c = c.value
        val err = ErrorObj()
        val result = jOptionalenumwithdefault(getObjId(), kotlin_to_jdk_c, err)
        if (err.typeId != 0) {
            when (err.typeId) {
                1 -> {
                    val excObj = StdException(err.ptrId)
                    ExceptionHandler.handleUncaughtException(excObj.what())
                }
                else -> ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        val jdk_to_kotlin_result = Color.getByValue(result)!!
        return jdk_to_kotlin_result
    }

    override fun close() {
        if (id != 0L) {
            jFinalize(id)
            id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jOptionalptrwithnullptrdefault(id: Long, task: Long, __err_obj__: ErrorObj): Long
    private external fun jOptionalfdptrwithnullptrdefault(id: Long, project: Long, __err_obj__: ErrorObj): Long
    private external fun jOptionalsharedptrwithnullptrdefault(id: Long, person: Long, __err_obj__: ErrorObj): Long
    private external fun jOptionalintwithdefault(id: Long, value: Int, __err_obj__: ErrorObj): Int
    private external fun jOptionallongwithdefault(id: Long, value: Long, __err_obj__: ErrorObj): Long
    private external fun jOptionaldoublewithdefault(id: Long, value: Double, __err_obj__: ErrorObj): Double
    private external fun jOptionalfloatwithdefault(id: Long, value: Float, __err_obj__: ErrorObj): Float
    private external fun jOptionalboolwithdefault(id: Long, value: Boolean, __err_obj__: ErrorObj): Boolean
    private external fun jOptionalstringwithdefault(id: Long, optionalStr: String, __err_obj__: ErrorObj): String
    private external fun jOptionalcharwithdefault(id: Long, symbol: Char, __err_obj__: ErrorObj): Char
    private external fun jOptionalcharpointerwithdefault(id: Long, optionalStr: String, __err_obj__: ErrorObj): String
    private external fun jOptionalenumwithdefault(id: Long, c: Int, __err_obj__: ErrorObj): Int
    private external fun jSet_this(id: Long, self: Any): Unit
    private external fun jFinalize(id: Long): Unit
}