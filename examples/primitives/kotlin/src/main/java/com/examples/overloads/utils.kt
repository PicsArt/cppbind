/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 07/22/2022-13:29.
 * Please do not change it manually.
 */

package com.examples.overloads

import com.examples.cppbind.*
import com.examples.cppbind.exception_helpers.*

/**
 * An example with overloaded methods.
 */
open class Utils
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        /**
         * Sum two ints.
         */
        fun sum(first: Int, second: Int): Int {
            val result = jSum(first, second)
            
            return result
        }
        @JvmStatic
        private external fun jSum(first: Int, second: Int, vararg extraObjs: Any?): Int

        /**
         * Sum two floats.
         */
        fun sum(first: Float, second: Float): Float {
            val result = jSum_1(first, second)
            
            return result
        }
        @JvmStatic
        private external fun jSum_1(first: Float, second: Float, vararg extraObjs: Any?): Float

        /**
         * Sub two ints.
         */
        fun minus(first: Int, second: Int): Int {
            val result = jMinus(first, second)
            
            return result
        }
        @JvmStatic
        private external fun jMinus(first: Int, second: Int, vararg extraObjs: Any?): Int

        /**
         * Sub two floats.
         */
        fun minus(first: Float, second: Float): Float {
            val result = jMinus_1(first, second)
            
            return result
        }
        @JvmStatic
        private external fun jMinus_1(first: Float, second: Float, vararg extraObjs: Any?): Float
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::Utils"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    /**
     * Concatenate with two strings.
     */
    fun concatenate(first: String, second: String): String {
        val result = jConcatenate(cppbindObjId, first, second)
        
        return result
    }

    /**
     * Concatenate with three strings.
     */
    fun concatenate(first: String, second: String, third: String): String {
        val result = jConcatenate_1(cppbindObjId, first, second, third)
        
        return result
    }

    @JvmName("sum2")
    fun sum(first: List<Int>, second: List<Int>): List<Int> {
        val kotlintojdkfirst = IntArray(first.size) 
        var index_first = 0
        for (value_first in first) {
            
            kotlintojdkfirst[index_first] = value_first
            ++index_first
        }
        val kotlintojdksecond = IntArray(second.size) 
        var index_second = 0
        for (value_second in second) {
            
            kotlintojdksecond[index_second] = value_second
            ++index_second
        }
        val result = jSum_2(cppbindObjId, kotlintojdkfirst, kotlintojdksecond, first, second)
        val jdktokotlinresult: MutableList<Int> = mutableListOf()
        for (value_result in result) {
            
            jdktokotlinresult.add(value_result)
        }
        return jdktokotlinresult
    }

    @JvmName("sum3")
    fun sum(first: List<Float>, second: List<Float>): List<Float> {
        val kotlintojdkfirst = FloatArray(first.size) 
        var index_first = 0
        for (value_first in first) {
            
            kotlintojdkfirst[index_first] = value_first
            ++index_first
        }
        val kotlintojdksecond = FloatArray(second.size) 
        var index_second = 0
        for (value_second in second) {
            
            kotlintojdksecond[index_second] = value_second
            ++index_second
        }
        val result = jSum_3(cppbindObjId, kotlintojdkfirst, kotlintojdksecond, first, second)
        val jdktokotlinresult: MutableList<Float> = mutableListOf()
        for (value_result in result) {
            
            jdktokotlinresult.add(value_result)
        }
        return jdktokotlinresult
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as Utils
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jConcatenate(id: Long, first: String, second: String, vararg extraObjs: Any?): String
    private external fun jConcatenate_1(id: Long, first: String, second: String, third: String, vararg extraObjs: Any?): String
    private external fun jSum_2(id: Long, first: IntArray, second: IntArray, vararg extraObjs: Any?): IntArray
    private external fun jSum_3(id: Long, first: FloatArray, second: FloatArray, vararg extraObjs: Any?): FloatArray
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jGettypebyid(id: Long): String
