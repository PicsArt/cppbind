/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:29.
 * Please do not change it manually.
 */

package com.examples.rv_policies

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*

/**
 * A test example for keep_alive policy with shared_ref=False.
 */
open class Child1
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
        const val cppbindCxxTypeName: String = "cppbind::example::Child1"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(name: String): this(CppBindObject(construct_helper(name), true)) {
    }
    
    val name: String
        get() {
            val result = jName(id)
            
            return result
        }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jFinalize(id: Long): Unit
}


/**
 * A test example for keep_alive policy with action=gen_interface.
 */
interface IChild3 : AutoCloseable {
    val id: Long
    fun keepCppBindReference(ref: Any)
    
    val name: String
        get() {
            val result = IChild3Helper.jName(id)
            
            return result
        }
    
}


class IChild3Helper {
    companion object {
        @JvmStatic
        external fun jName(id: Long): String
    }
}


open class Child3Impl
internal constructor(obj : CppBindObject) : IChild3 {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
        const val cppbindCxxTypeName: String = "cppbind::example::Child3"
    }

    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }

    override val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(name: String): this(CppBindObject(construct_helper(name), true)) {
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}

/**
 * A test example for keep_alive policy with shared_ref=True.
 */
open class Child2
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
        const val cppbindCxxTypeName: String = "cppbind::example::Child2"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(name: String): this(CppBindObject(construct_helper(name), true)) {
    }
    
    val name: String
        get() {
            val result = jName(id)
            
            return result
        }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jFinalize(id: Long): Unit
}

/**
 * A test example for keep_alive policy. Container holding shared_ref and non shared_ref class and interface types.
 */
open class Parent1
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String, child1: Child1, child2: Child2, _child3: IChild3): Long {
            val kotlintojdkchild1 = child1.id
            val kotlintojdkchild2 = child2.id
            val kotlintojdk_child3 = _child3.id
            val id = jConstructor(name, kotlintojdkchild1, kotlintojdkchild2, kotlintojdk_child3)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String, child1: Long, child2: Long, _child3: Long): Long
        const val cppbindCxxTypeName: String = "cppbind::example::Parent1"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(name: String, child1: Child1, child2: Child2, _child3: IChild3): this(CppBindObject(construct_helper(name, child1, child2, _child3), true)) {
        this.keepCppBindReference(child1)
        this.keepCppBindReference(child3)
    }
    
    val name: String
        get() {
            val result = jName(id)
            
            return result
        }

    var child1: Child1
        get() {
            val result = jChild1(id)
            val jdktokotlinresult = Child1(CppBindObject(result))
            jdktokotlinresult.keepCppBindReference(this)
            return jdktokotlinresult
        }
        set(value) {
            val kotlintojdkvalue = value.id
            jSetchild1(id, kotlintojdkvalue)
        }

    val child2: Child2
        get() {
            val result = jChild2(id)
            val jdktokotlinresult = Child2(CppBindObject(result, true))
            return jdktokotlinresult
        }

    var child3: IChild3
        get() {
            val result = jChild3(id)
            val jdktokotlinresult = Child3Impl(CppBindObject(result))
            jdktokotlinresult.keepCppBindReference(this)
            return jdktokotlinresult
        }
        set(value) {
            val kotlintojdkvalue = value.id
            jSetchild3(id, kotlintojdkvalue)
            this.keepCppBindReference(value)
        }
        

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jChild1(id: Long): Long
    private external fun jSetchild1(id: Long, value: Long): Unit
    private external fun jChild2(id: Long): Long
    private external fun jChild3(id: Long): Long
    private external fun jSetchild3(id: Long, value: Long): Unit
    private external fun jFinalize(id: Long): Unit
}

/**
 * A test example for keep_alive policy. Container holding shared_ref and non shared_ref class and interface types.
 */
open class Parent2
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
        const val cppbindCxxTypeName: String = "cppbind::example::Parent2"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(name: String): this(CppBindObject(construct_helper(name), true)) {
    }
    
    val name: String
        get() {
            val result = jName(id)
            
            return result
        }

    val children1: List<Child1>
        get() {
            val result = jChildren1(id)
            val jdktokotlinresult: MutableList<Child1> = mutableListOf()
            for (value_result in result) {
                val jdktokotlinvalue_result = Child1(CppBindObject(value_result))
                jdktokotlinresult.add(jdktokotlinvalue_result)
            }
            for (valuejdktokotlinresult in jdktokotlinresult) {
                valuejdktokotlinresult.keepCppBindReference(this)
            }
            return jdktokotlinresult
        }

    val children2: List<Child2>
        get() {
            val result = jChildren2(id)
            val jdktokotlinresult: MutableList<Child2> = mutableListOf()
            for (value_result in result) {
                val jdktokotlinvalue_result = Child2(CppBindObject(value_result, true))
                jdktokotlinresult.add(jdktokotlinvalue_result)
            }
            return jdktokotlinresult
        }
    
    fun addChild1(c: Child1): Unit {
        val kotlintojdkc = c.id
        val result = jAddchild1(id, kotlintojdkc)
        
        return result
    }

    fun addChildren1(c: List<Child1>): Unit {
        val kotlintojdkc = LongArray(c.size) 
        var index_c = 0
        for (value_c in c) {
            val kotlintojdkvalue_c = value_c.id
            kotlintojdkc[index_c] = kotlintojdkvalue_c
            ++index_c
        }
        val result = jAddchildren1(id, kotlintojdkc)
        
        this.keepCppBindReference(c)
        return result
    }

    fun addChild2(c: Child2): Unit {
        val kotlintojdkc = c.id
        val result = jAddchild2(id, kotlintojdkc)
        
        return result
    }

    fun addChildren2(c: List<Child2>): Unit {
        val kotlintojdkc = LongArray(c.size) 
        var index_c = 0
        for (value_c in c) {
            val kotlintojdkvalue_c = value_c.id
            kotlintojdkc[index_c] = kotlintojdkvalue_c
            ++index_c
        }
        val result = jAddchildren2(id, kotlintojdkc)
        
        return result
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jChildren1(id: Long): LongArray
    private external fun jAddchild1(id: Long, c: Long): Unit
    private external fun jAddchildren1(id: Long, c: LongArray): Unit
    private external fun jAddchild2(id: Long, c: Long): Unit
    private external fun jAddchildren2(id: Long, c: LongArray): Unit
    private external fun jChildren2(id: Long): LongArray
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
