/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/14/2022-14:14.
 * Please do not change it manually.
 */

package com.examples.rv_policies

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*

/**
 * A test example for return value policies. This is not used in documentation.
 */
open class Value
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
    }
    
    protected var objId = obj.id
    protected val owner = obj.owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(name: String): this(IEGenObject(construct_helper(name), true)) {
    }
    
    var name: String
        get() {
            val result = jName(id)
            
            return result
        }
        set(value) {
            
            jSetname(id, value)
        }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jSetname(id: Long, value: String): Unit
    private external fun jFinalize(id: Long): Unit
}

open class ValueSharedRef
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(name: String): Long {
            val id = jConstructor(name)
            return id
        }

        @JvmStatic
        private external fun jConstructor(name: String): Long
    }
    
    protected var objId = obj.id
    protected val owner = obj.owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(name: String): this(IEGenObject(construct_helper(name), true)) {
    }
    
    var name: String
        get() {
            val result = jName(id)
            
            return result
        }
        set(value) {
            
            jSetname(id, value)
        }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jName(id: Long): String
    private external fun jSetname(id: Long, value: String): Unit
    private external fun jFinalize(id: Long): Unit
}

open class ValuesHolder
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        protected fun construct_helper(valuePtr: Value, valueRef: ValueSharedRef): Long {
            val kotlintojdkvaluePtr = valuePtr.id
            val kotlintojdkvalueRef = valueRef.id
            val id = jConstructor_1(kotlintojdkvaluePtr, kotlintojdkvalueRef)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(valuePtr: Long, valueRef: Long): Long
    }
    
    protected var objId = obj.id
    protected val owner = obj.owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }

    constructor(valuePtr: Value, valueRef: ValueSharedRef): this(IEGenObject(construct_helper(valuePtr, valueRef), true)) {
    }
    
    fun getPtrDefault(): Value {
        val result = jGetptrdefault(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getPtrCopy(): Value {
        val result = jGetptrcopy(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getPtrMove(): Value {
        val result = jGetptrmove(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getPtrReference(): Value {
        val result = jGetptrreference(id)
        val jdktokotlinresult = Value(IEGenObject(result))
        return jdktokotlinresult
    }

    fun getPtrAutomatic(): Value {
        val result = jGetptrautomatic(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getPtrAutomaticReference(): Value {
        val result = jGetptrautomaticreference(id)
        val jdktokotlinresult = Value(IEGenObject(result))
        return jdktokotlinresult
    }

    fun getPtrTakeOwnership(): Value {
        val result = jGetptrtakeownership(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueDefault(): Value {
        val result = jGetvaluedefault(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueCopy(): Value {
        val result = jGetvaluecopy(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueMove(): Value {
        val result = jGetvaluemove(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueReference(): Value {
        val result = jGetvaluereference(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueAutomatic(): Value {
        val result = jGetvalueautomatic(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueAutomaticReference(): Value {
        val result = jGetvalueautomaticreference(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getValueTakeOwnership(): Value {
        val result = jGetvaluetakeownership(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefCopy(): Value {
        val result = jGetrefcopy(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefDefault(): Value {
        val result = jGetrefdefault(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefMove(): Value {
        val result = jGetrefmove(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefReference(): Value {
        val result = jGetrefreference(id)
        val jdktokotlinresult = Value(IEGenObject(result))
        return jdktokotlinresult
    }

    fun getRefAutomatic(): Value {
        val result = jGetrefautomatic(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefAutomaticReference(): Value {
        val result = jGetrefautomaticreference(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getRefTakeOwnership(): Value {
        val result = jGetreftakeownership(id)
        val jdktokotlinresult = Value(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefDefault(): ValueSharedRef {
        val result = jGetsharedrefdefault(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefCopy(): ValueSharedRef {
        val result = jGetsharedrefcopy(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefMove(): ValueSharedRef {
        val result = jGetsharedrefmove(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefReference(): ValueSharedRef {
        val result = jGetsharedrefreference(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefAutomatic(): ValueSharedRef {
        val result = jGetsharedrefautomatic(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefAutomaticReference(): ValueSharedRef {
        val result = jGetsharedrefautomaticreference(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    fun getSharedRefTakeOwnership(): ValueSharedRef {
        val result = jGetsharedreftakeownership(id)
        val jdktokotlinresult = ValueSharedRef(IEGenObject(result, true))
        return jdktokotlinresult
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jGetptrdefault(id: Long): Long
    private external fun jGetptrcopy(id: Long): Long
    private external fun jGetptrmove(id: Long): Long
    private external fun jGetptrreference(id: Long): Long
    private external fun jGetptrautomatic(id: Long): Long
    private external fun jGetptrautomaticreference(id: Long): Long
    private external fun jGetptrtakeownership(id: Long): Long
    private external fun jGetvaluedefault(id: Long): Long
    private external fun jGetvaluecopy(id: Long): Long
    private external fun jGetvaluemove(id: Long): Long
    private external fun jGetvaluereference(id: Long): Long
    private external fun jGetvalueautomatic(id: Long): Long
    private external fun jGetvalueautomaticreference(id: Long): Long
    private external fun jGetvaluetakeownership(id: Long): Long
    private external fun jGetrefcopy(id: Long): Long
    private external fun jGetrefdefault(id: Long): Long
    private external fun jGetrefmove(id: Long): Long
    private external fun jGetrefreference(id: Long): Long
    private external fun jGetrefautomatic(id: Long): Long
    private external fun jGetrefautomaticreference(id: Long): Long
    private external fun jGetreftakeownership(id: Long): Long
    private external fun jGetsharedrefdefault(id: Long): Long
    private external fun jGetsharedrefcopy(id: Long): Long
    private external fun jGetsharedrefmove(id: Long): Long
    private external fun jGetsharedrefreference(id: Long): Long
    private external fun jGetsharedrefautomatic(id: Long): Long
    private external fun jGetsharedrefautomaticreference(id: Long): Long
    private external fun jGetsharedreftakeownership(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}
