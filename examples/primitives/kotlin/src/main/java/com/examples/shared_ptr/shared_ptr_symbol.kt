/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:29.
 * Please do not change it manually.
 */

package com.examples.shared_ptr

import com.examples.cppbind.alias.*
import com.examples.cppbind.exceptionUtils.*
import com.examples.cppbind.exception_helpers.*


interface ISignShared : AutoCloseable {
    val id: Long
    fun keepCppBindReference(ref: Any)
    
    
    open fun typeName(): String {
        val result = ISignSharedHelper.jTypename(id)
        
        return result
    }

    companion object {
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): ISignShared {
            val idType = jGettypebyid(id)
            when (idType) {
                DigitShared.cppbindCxxTypeName -> return DigitShared(CppBindObject(id, owner))
                else -> return SignSharedImpl(CppBindObject(id, owner))
            }
        }
    }
}


class ISignSharedHelper {
    companion object {
        @JvmStatic
        external fun jTypename(id: Long): String
    }
}


open class SignSharedImpl
internal constructor(obj : CppBindObject) : ISignShared {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val cppbindCxxTypeName: String = "cppbind::example::SignShared"
    }

    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    override fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }

    override val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
    * Finalize and deletes the object
    */
    protected fun finalize() {
        close()
    }
    
    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
}

open class TextShared
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val cppbindCxxTypeName: String = "cppbind::example::TextShared"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TextShared {
            val idType = jGettypebyid(id)
            when (idType) {
                DigitShared.cppbindCxxTypeName -> return DigitShared(CppBindObject(id, owner))
                else -> return TextShared(CppBindObject(id, owner))
            }
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    open fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
    private external fun jFinalize(id: Long): Unit
}

open class DigitShared
internal constructor(obj: CppBindObject) : ISignShared, TextShared(obj) {
    companion object {
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        const val cppbindCxxTypeName: String = "cppbind::example::DigitShared"
    }
    
    override val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    open override fun typeName(): String {
        val result = jTypename(id)
        
        return result
    }

    ///// External wrapper functions ////////////
    private external fun jTypename(id: Long): String
}

open class SymbolUsageShared
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long

        protected fun construct_helper(d: DigitShared): Long {
            val kotlintojdkd = d.id
            val id = jConstructor_1(kotlintojdkd)
            return id
        }

        @JvmStatic
        private external fun jConstructor_1(d: Long): Long
        const val cppbindCxxTypeName: String = "cppbind::example::SymbolUsageShared"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }

    constructor(d: DigitShared): this(CppBindObject(construct_helper(d), true)) {
    }
    
    fun getTextType(t: TextShared): String {
        val kotlintojdkt = t.id
        val result = jGettexttype(id, kotlintojdkt)
        
        return result
    }

    fun getSignType(s: ISignShared): String {
        val kotlintojdks = s.id
        val result = jGetsigntype(id, kotlintojdks)
        
        return result
    }

    fun getTextId(t: TextShared): Int {
        val kotlintojdkt = t.id
        val result = jGettextid(id, kotlintojdkt)
        
        return result
    }

    fun getSignId(s: ISignShared): Int {
        val kotlintojdks = s.id
        val result = jGetsignid(id, kotlintojdks)
        
        return result
    }

    fun getTextPtr(): TextShared {
        val result = jGettextptr(id)
        
        val jdktokotlinresult : TextShared
        jdktokotlinresult = TextShared.cppbindConstructObject(result, true)
        return jdktokotlinresult
    }

    fun getSignPtr(): ISignShared {
        val result = jGetsignptr(id)
        
        val jdktokotlinresult : ISignShared
        jdktokotlinresult = ISignShared.cppbindConstructObject(result, true)
        return jdktokotlinresult
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jGettexttype(id: Long, t: Long): String
    private external fun jGetsigntype(id: Long, s: Long): String
    private external fun jGettextid(id: Long, t: Long): Int
    private external fun jGetsignid(id: Long, s: Long): Int
    private external fun jGettextptr(id: Long): Long
    private external fun jGetsignptr(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
