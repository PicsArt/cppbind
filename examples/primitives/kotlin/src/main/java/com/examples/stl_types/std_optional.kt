/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/13/2022-10:26.
 * Please do not change it manually.
 */

package com.examples.stl_types

import com.examples.cppbind.*
import com.examples.cppbind.exceptions.*
import com.examples.enums.Color
import com.examples.enums.Frame

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

fun mul(a: Int?, b: Int): Int? {
    
    val kotlintojdka = a?.let {
        IntArray(1) { a }
    }

    val result = jMulInt(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mul(a: Float?, b: Float): Float? {
    
    val kotlintojdka = a?.let {
        FloatArray(1) { a }
    }

    val result = jMulFloat(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mul(a: Double?, b: Double): Double? {
    
    val kotlintojdka = a?.let {
        DoubleArray(1) { a }
    }

    val result = jMulDouble(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mul(a: Short?, b: Short): Short? {
    
    val kotlintojdka = a?.let {
        ShortArray(1) { a }
    }

    val result = jMulShort(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mulLong(a: Long?, b: Long): Long? {
    
    val kotlintojdka = a?.let {
        LongArray(1) { a }
    }

    val result = jMullong(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun reverseBool(a: Boolean?): Boolean? {
    
    val kotlintojdka = a?.let {
        BooleanArray(1) { a }
    }

    val result = jReversebool(kotlintojdka, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mulUnsignedInt(a: Long?, b: Long): Long? {
    
    val kotlintojdka = a?.let {
        LongArray(1) { a }
    }

    val result = jMulunsignedint(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mulUnsignedLong(a: Long?, b: Long): Long? {
    
    val kotlintojdka = a?.let {
        LongArray(1) { a }
    }

    val result = jMulunsignedlong(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mulLongLong(a: Long?, b: Long): Long? {
    
    val kotlintojdka = a?.let {
        LongArray(1) { a }
    }

    val result = jMullonglong(kotlintojdka, b, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun mulUnsignedChar(a: UByte?, b: UByte): UByte? {
    
    val kotlintojdka = a?.let {
        val kotlintojdka = a.toInt()
        IntArray(1) { kotlintojdka }
    }

    val kotlintojdkb = b.toInt()
    val result = jMulunsignedchar(kotlintojdka, kotlintojdkb, a, b)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        val jdktokotlin_result = _result.toUByte()
        jdktokotlin_result
    }

    return jdktokotlinresult
}

fun charToUpper(a: Char?): Char? {
    
    val kotlintojdka = a?.let {
        CharArray(1) { a }
    }

    val result = jChartoupper(kotlintojdka, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun concatString(first: String?, second: String): String? {
    
    val kotlintojdkfirst = first?.let {
        first
    }

    val result = jConcatstring(kotlintojdkfirst, second, first)
    
    val jdktokotlinresult = result?.let {
        result
    }

    return jdktokotlinresult
}

fun concat(v: List<String>?, s: String): List<String>? {
    
    val kotlintojdkv = v?.let {
        val kotlintojdkv = ObjectArray(v.size) { Any() }
        var indexV = 0
        for (valueV in v) {
            
            kotlintojdkv[indexV] = valueV
            ++indexV
        }
        kotlintojdkv
    }

    val result = jConcat(kotlintojdkv, s, v)
    
    val jdktokotlinresult = result?.let {
        val jdktokotlinresult: MutableList<String> = mutableListOf()
        for (valueResult in result) {
            @Suppress("UNCHECKED_CAST") val actualValueresult = valueResult as String
            
            jdktokotlinresult.add(actualValueresult)
        }
        jdktokotlinresult
    }

    return jdktokotlinresult
}

fun concat2(v: List<String?>, s: String): List<String?> {
    val kotlintojdkv = ObjectArray(v.size) { Any() }
    var indexV = 0
    for (valueV in v) {
        
        val kotlintojdkvalueV = valueV?.let {
            valueV
        }

        kotlintojdkv[indexV] = kotlintojdkvalueV
        ++indexV
    }
    val result = jConcat2(kotlintojdkv, s, v)
    val jdktokotlinresult: MutableList<String?> = mutableListOf()
    for (valueResult in result) {
        @Suppress("UNCHECKED_CAST") val actualValueresult = valueResult as String?
        
        val jdktokotlinactualValueresult = actualValueresult?.let {
            actualValueresult
        }

        jdktokotlinresult.add(jdktokotlinactualValueresult)
    }
    return jdktokotlinresult
}

fun sameColor(color: Color?): Color? {
    
    val kotlintojdkcolor = color?.let {
        val kotlintojdkcolor = color.value
        IntArray(1) { kotlintojdkcolor }
    }

    val result = jSamecolor(kotlintojdkcolor, color)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        val jdktokotlin_resultOptional = Color.getByValue(_result)
        if (jdktokotlin_resultOptional == null) {
            ExceptionHandler.handleUncaughtException("Internal error: unresolved reference to non existing field of Color enum.")
        }
        val jdktokotlin_result = jdktokotlin_resultOptional!!
        jdktokotlin_result
    }

    return jdktokotlinresult
}

fun same_template(a: Int?): Int? {
    
    val kotlintojdka = a?.let {
        IntArray(1) { a }
    }

    val result = jSame_templateOptionalInt(kotlintojdka, a)
    
    val jdktokotlinresult = result?.let {
        val _result = result[0]
        _result
    }

    return jdktokotlinresult
}

fun same_template(a: String?): String? {
    
    val kotlintojdka = a?.let {
        a
    }

    val result = jSame_templateOptionalString(kotlintojdka, a)
    
    val jdktokotlinresult = result?.let {
        result
    }

    return jdktokotlinresult
}

fun samePair(pair: Pair<Int, Int>?): Pair<Int, Int>? {
    
    val kotlintojdkpair = pair?.let {
        val firstPair = pair.first
        val secondPair = pair.second


        val kotlintojdkpair = Pair<Int, Int>(firstPair, secondPair)
        kotlintojdkpair
    }

    val result = jSamepair(kotlintojdkpair, pair)
    
    val jdktokotlinresult = result?.let {
        val firstResult = result.first
        val secondResult = result.second


        val jdktokotlinresult = Pair<Int, Int>(firstResult, secondResult)
        jdktokotlinresult
    }

    return jdktokotlinresult
}

fun sameMap(map: Map<Int, Int>?): Map<Int, Int>? {
    
    val kotlintojdkmap = map?.let {
        
        val tmpKeyKotlintojdkmap = IntArray(map.size) 
        val tmpValKotlintojdkmap = IntArray(map.size) 
        val kotlintojdkmap = Pair<IntArray, IntArray>(tmpKeyKotlintojdkmap, tmpValKotlintojdkmap)
        var indexMap = 0
        for ((keyMap, valueMap) in map) {
            
            
            tmpKeyKotlintojdkmap[indexMap] = keyMap
            tmpValKotlintojdkmap[indexMap] = valueMap
            ++indexMap
        }
        kotlintojdkmap
    }

    val result = jSamemap(kotlintojdkmap, map)
    
    val jdktokotlinresult = result?.let {
        val jdktokotlinresult = HashMap<Int, Int>()
        for (iResult in 0..result.first.size - 1) {
            val elem1Result = result.first.get(iResult)
            val elem2Result = result.second.get(iResult)
            
            
            jdktokotlinresult.put(elem1Result, elem2Result)
        }
        jdktokotlinresult
    }

    return jdktokotlinresult
}

open class FrameUsage
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::FrameUsage"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(constructHelper(), true)) {
    }
    
    fun sameFrame(frame: Frame?): Frame? {
        
        val kotlintojdkframe = frame?.let {
            val kotlintojdkframe = frame.cppbindObjId
            LongArray(1) { kotlintojdkframe }
        }

        val result = jSameframe(cppbindObjId, kotlintojdkframe, frame)
        
        val jdktokotlinresult = result?.let {
            val _result = result[0]
            val jdktokotlin_result = Frame(CppBindObject(_result, true))
            jdktokotlin_result
        }

        if (frame != null) {
            this.keepCppBindReference(frame)
        }
        return jdktokotlinresult
    }

    fun getFrame(): Frame? {
        val result = jGetframe(cppbindObjId)
        
        val jdktokotlinresult = result?.let {
            val _result = result[0]
            val jdktokotlin_result = Frame(CppBindObject(_result, true))
            jdktokotlin_result
        }

        if (jdktokotlinresult != null) {
            jdktokotlinresult.keepCppBindReference(this)
        }
        return jdktokotlinresult
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as FrameUsage
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jSameframe(id: Long, frame: LongArray?, vararg extraObjs: Any?): LongArray?
    private external fun jGetframe(id: Long): LongArray?
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jMulInt(a: IntArray?, b: Int, vararg extraObjs: Any?): IntArray?
private external fun jMulFloat(a: FloatArray?, b: Float, vararg extraObjs: Any?): FloatArray?
private external fun jMulDouble(a: DoubleArray?, b: Double, vararg extraObjs: Any?): DoubleArray?
private external fun jMulShort(a: ShortArray?, b: Short, vararg extraObjs: Any?): ShortArray?
private external fun jMullong(a: LongArray?, b: Long, vararg extraObjs: Any?): LongArray?
private external fun jReversebool(a: BooleanArray?, vararg extraObjs: Any?): BooleanArray?
private external fun jMulunsignedint(a: LongArray?, b: Long, vararg extraObjs: Any?): LongArray?
private external fun jMulunsignedlong(a: LongArray?, b: Long, vararg extraObjs: Any?): LongArray?
private external fun jMullonglong(a: LongArray?, b: Long, vararg extraObjs: Any?): LongArray?
private external fun jMulunsignedchar(a: IntArray?, b: Int, vararg extraObjs: Any?): IntArray?
private external fun jChartoupper(a: CharArray?, vararg extraObjs: Any?): CharArray?
private external fun jConcatstring(first: String?, second: String, vararg extraObjs: Any?): String?
private external fun jConcat(v: ObjectArray?, s: String, vararg extraObjs: Any?): ObjectArray?
private external fun jConcat2(v: ObjectArray, s: String, vararg extraObjs: Any?): ObjectArray
private external fun jSamecolor(color: IntArray?, vararg extraObjs: Any?): IntArray?
private external fun jSame_templateOptionalInt(a: IntArray?, vararg extraObjs: Any?): IntArray?
private external fun jSame_templateOptionalString(a: String?, vararg extraObjs: Any?): String?
private external fun jSamepair(pair: Pair<Int, Int>?, vararg extraObjs: Any?): Pair<Int, Int>?
private external fun jSamemap(map: Pair<IntArray, IntArray>?, vararg extraObjs: Any?): Pair<IntArray, IntArray>?

private external fun jGettypebyid(id: Long): String
