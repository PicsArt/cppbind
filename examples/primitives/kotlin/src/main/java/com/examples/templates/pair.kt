/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/14/2022-14:14.
 * Please do not change it manually.
 */

package com.examples.templates

import com.examples.forward_decl.student.Student
import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.overloads.Employee

open class PairEmployee
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(first: String, second: Employee): Long {
            val kotlintojdksecond = second.id
            val id = jConstructor(first, kotlintojdksecond)
            return id
        }

        @JvmStatic
        private external fun jConstructor(first: String, second: Long): Long
    }
    
    protected var objId = obj.id
    protected val owner = obj.owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(first: String, second: Employee): this(IEGenObject(construct_helper(first, second), true)) {
    }
    
    val first: String
        get() {
            val result = jFirst(id)
            
            return result
        }

    val second: Employee
        get() {
            val result = jSecond(id)
            val jdktokotlinresult = Employee(IEGenObject(result, true))
            return jdktokotlinresult
        }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFirst(id: Long): String
    private external fun jSecond(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}

open class PairStudent
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(first: String, second: Student): Long {
            val kotlintojdksecond = second.id
            val id = jConstructor(first, kotlintojdksecond)
            return id
        }

        @JvmStatic
        private external fun jConstructor(first: String, second: Long): Long
    }
    
    protected var objId = obj.id
    protected val owner = obj.owner
    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(first: String, second: Student): this(IEGenObject(construct_helper(first, second), true)) {
    }
    
    val first: String
        get() {
            val result = jFirst(id)
            
            return result
        }

    val second: Student
        get() {
            val result = jSecond(id)
            val jdktokotlinresult = Student(IEGenObject(result, true))
            return jdktokotlinresult
        }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFirst(id: Long): String
    private external fun jSecond(id: Long): Long
    private external fun jFinalize(id: Long): Unit
}
