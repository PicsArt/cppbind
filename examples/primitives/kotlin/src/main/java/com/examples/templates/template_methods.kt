/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/22/2022-09:26.
 * Please do not change it manually.
 */

package com.examples.templates

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.simple.Project
import com.examples.simple.Root

open class TemplateMethods
internal constructor(_id: Long, _owner: Boolean = false) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var objId = _id
    protected val owner = _owner
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }

    
    open val id: Long
        get() {
            if (objId == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return objId
        }
    
    constructor(): this(construct_helper(), true) {
    }
    
    open fun max(arg0: Int, arg1: Int): Int {
        val result = jMaxInt(id, arg0, arg1)
        
        return result
    }

    open fun max(arg0: String, arg1: String): String {
        val result = jMaxString(id, arg0, arg1)
        
        return result
    }

    open fun makePair(arg0: Project, arg1: Project): Pair<Project, Project> {
        val kotlintojdkarg0 = arg0.id
        val kotlintojdkarg1 = arg1.id
        val result = jMakepairProjectProject(id, kotlintojdkarg0, kotlintojdkarg1)
        val first_result = result.first
        val second_result = result.second
        val jdktokotlinfirst_result = Project(first_result)
        val jdktokotlinsecond_result = Project(second_result)
        val jdktokotlinresult = Pair<Project, Project>(jdktokotlinfirst_result, jdktokotlinsecond_result)
        return jdktokotlinresult
    }

    open fun makePair(arg0: Root, arg1: Project): Pair<Root, Project> {
        val kotlintojdkarg0 = arg0.id
        val kotlintojdkarg1 = arg1.id
        val result = jMakepairRootProject(id, kotlintojdkarg0, kotlintojdkarg1)
        val first_result = result.first
        val second_result = result.second
        val jdktokotlinfirst_result = Root(first_result)
        val jdktokotlinsecond_result = Project(second_result)
        val jdktokotlinresult = Pair<Root, Project>(jdktokotlinfirst_result, jdktokotlinsecond_result)
        return jdktokotlinresult
    }

    override fun close() {
        if (owner && objId != 0L) {
            jFinalize(objId)
            objId = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jMaxInt(id: Long, arg0: Int, arg1: Int): Int
    private external fun jMaxString(id: Long, arg0: String, arg1: String): String
    private external fun jMakepairProjectProject(id: Long, arg0: Long, arg1: Long): Pair<Long, Long>
    private external fun jMakepairRootProject(id: Long, arg0: Long, arg1: Long): Pair<Long, Long>
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
