/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/14/2022-14:03.
 * Please do not change it manually.
 */

package com.examples.templates

import com.examples.iegen.alias.*
import com.examples.iegen.exceptionUtils.*
import com.examples.iegen.exception_helpers.*
import com.examples.simple.Project
import com.examples.simple.Root

open class TemplateMethods
internal constructor(obj: IEGenObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
    }
    
    protected var iegObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepIEGenReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (iegObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return iegObj.id
        }
    
    constructor(): this(IEGenObject(construct_helper(), true)) {
    }
    
    open fun max(a: Int, b: Int): Int {
        val result = jMaxInt(id, a, b)
        
        return result
    }

    open fun max(a: String, b: String): String {
        val result = jMaxString(id, a, b)
        
        return result
    }

    open fun makePair(a: Project, b: Project): Pair<Project, Project> {
        val kotlintojdka = a.id
        val kotlintojdkb = b.id
        val result = jMakepairProjectProject(id, kotlintojdka, kotlintojdkb)
        val first_result = result.first
        val second_result = result.second
        val jdktokotlinfirst_result = Project(IEGenObject(first_result))
        val jdktokotlinsecond_result = Project(IEGenObject(second_result))
        val jdktokotlinresult = Pair<Project, Project>(jdktokotlinfirst_result, jdktokotlinsecond_result)
        return jdktokotlinresult
    }

    open fun makePair(a: Root, b: Project): Pair<Root, Project> {
        val kotlintojdka = a.id
        val kotlintojdkb = b.id
        val result = jMakepairRootProject(id, kotlintojdka, kotlintojdkb)
        val first_result = result.first
        val second_result = result.second
        val jdktokotlinfirst_result = Root(IEGenObject(first_result))
        val jdktokotlinsecond_result = Project(IEGenObject(second_result))
        val jdktokotlinresult = Pair<Root, Project>(jdktokotlinfirst_result, jdktokotlinsecond_result)
        return jdktokotlinresult
    }

    override fun close() {
        if (iegObj.owner && iegObj.id != 0L) {
            jFinalize(iegObj.id)
            iegObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jMaxInt(id: Long, a: Int, b: Int): Int
    private external fun jMaxString(id: Long, a: String, b: String): String
    private external fun jMakepairProjectProject(id: Long, a: Long, b: Long): Pair<Long, Long>
    private external fun jMakepairRootProject(id: Long, a: Long, b: Long): Pair<Long, Long>
    private external fun jFinalize(id: Long): Unit
}

private external fun jGettypebyid(id: Long): String
