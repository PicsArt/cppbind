/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:39.
 * Please do not change it manually.
 */

package com.examples.templates

import com.examples.cppbind.*
import com.examples.cppbind.exceptions.*

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

open class TupleEmpty
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleEmpty {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleEmpty(CppBindObject(id, owner))
            }
            return obj as TupleEmpty
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleEmpty
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleThreeInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Int, ts1: Int, ts2: Int): Long {
            val id = jConstructor(t, ts1, ts2)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Int, ts1: Int, ts2: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<int, int, int>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleThreeInt {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleThreeInt(CppBindObject(id, owner))
            }
            return obj as TupleThreeInt
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Int, ts1: Int, ts2: Int): this(CppBindObject(constructHelper(t, ts1, ts2), true)) {
    }
    
    val tail: Int
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleTwoInt
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleTwoInt
            jdktokotlinresult = TupleTwoInt.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleThreeInt
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Int
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleTwoInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Int, ts1: Int): Long {
            val id = jConstructor(t, ts1)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Int, ts1: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<int, int>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleTwoInt {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleTwoInt(CppBindObject(id, owner))
            }
            return obj as TupleTwoInt
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Int, ts1: Int): this(CppBindObject(constructHelper(t, ts1), true)) {
    }
    
    val tail: Int
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleInt
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleInt
            jdktokotlinresult = TupleInt.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleTwoInt
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Int
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Int): Long {
            val id = jConstructor(t)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<int>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleInt {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleInt(CppBindObject(id, owner))
            }
            return obj as TupleInt
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Int): this(CppBindObject(constructHelper(t), true)) {
    }
    
    val tail: Int
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleEmpty
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleEmpty
            jdktokotlinresult = TupleEmpty.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleInt
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Int
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleDouble
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Double): Long {
            val id = jConstructor(t)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Double, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<double>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleDouble {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleDouble(CppBindObject(id, owner))
            }
            return obj as TupleDouble
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Double): this(CppBindObject(constructHelper(t), true)) {
    }
    
    val tail: Double
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleEmpty
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleEmpty
            jdktokotlinresult = TupleEmpty.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleDouble
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Double
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleDoubles
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Double, ts1: Double): Long {
            val id = jConstructor(t, ts1)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Double, ts1: Double, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<double, double>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleDoubles {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleDoubles(CppBindObject(id, owner))
            }
            return obj as TupleDoubles
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Double, ts1: Double): this(CppBindObject(constructHelper(t, ts1), true)) {
    }
    
    val tail: Double
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleDouble
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleDouble
            jdktokotlinresult = TupleDouble.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleDoubles
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Double
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

open class TupleDoubleInt
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun constructHelper(t: Int, ts1: Double): Long {
            val id = jConstructor(t, ts1)
            return id
        }

        @JvmStatic
        private external fun jConstructor(t: Int, ts1: Double, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::tuple<int, double>"

        /**
         * An internal method to create a Kotlin object from a C++ object.
         * It is intended to be used by the generated code.
         */
        public fun cppbindConstructObject(id: Long, owner: Boolean = false): TupleDoubleInt {
            val idType = jGettypebyid(id)
            val obj : Any
            when (idType) {
                IntsTuple.cppbindCxxTypeName -> obj = IntsTuple(CppBindObject(id, owner))
                MyTupleDouble.cppbindCxxTypeName -> obj = MyTupleDouble(CppBindObject(id, owner))
                MyTupleInt.cppbindCxxTypeName -> obj = MyTupleInt(CppBindObject(id, owner))
                else -> obj = TupleDoubleInt(CppBindObject(id, owner))
            }
            return obj as TupleDoubleInt
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    open val cppbindObjId: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(t: Int, ts1: Double): this(CppBindObject(constructHelper(t, ts1), true)) {
    }
    
    val tail: Int
        get() {
            val result = jTail(cppbindObjId)
            
            return result
        }

    val rest: TupleDouble
        get() {
            val result = jRest(cppbindObjId)
            
            val jdktokotlinresult : TupleDouble
            jdktokotlinresult = TupleDouble.cppbindConstructObject(result, true)
            return jdktokotlinresult
        }

    /**
     * CppBind generated hashCode method returning the hash of underlying C++ object id.
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CppBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as TupleDoubleInt
        return cxxId == other.cxxId
    }

    /**
     * CppBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x$cxxId: $cxxTypeName>"
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jTail(id: Long): Int
    private external fun jRest(id: Long): Long
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

/**
 * An example with variadic template.
 */
fun createTuple(args1: Int, args2: Int): TupleTwoInt {
    val result = jCreatetupleIntInt(args1, args2)
    
    val jdktokotlinresult : TupleTwoInt
    jdktokotlinresult = TupleTwoInt.cppbindConstructObject(result, true)
    return jdktokotlinresult
}

/**
 * An example with variadic template.
 */
fun createTuple(args1: Int, args2: Double): TupleDoubleInt {
    val result = jCreatetupleIntDouble(args1, args2)
    
    val jdktokotlinresult : TupleDoubleInt
    jdktokotlinresult = TupleDoubleInt.cppbindConstructObject(result, true)
    return jdktokotlinresult
}

private external fun jCreatetupleIntInt(args1: Int, args2: Int, vararg extraObjs: Any?): Long
private external fun jCreatetupleIntDouble(args1: Int, args2: Double, vararg extraObjs: Any?): Long

private external fun jGettypebyid(id: Long): String
