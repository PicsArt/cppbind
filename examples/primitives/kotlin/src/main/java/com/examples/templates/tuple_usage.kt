/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:39.
 * Please do not change it manually.
 */

package com.examples.templates

import com.examples.cppbind.*
import com.examples.cppbind.exceptions.*

private val INIT = run {
    System.loadLibrary("wrapper_jni");
}

open class IntsTuple
internal constructor(obj: CppBindObject) : TupleThreeInt(obj) {
    companion object {
        
        protected fun constructHelper(a: Int, b: Int, c: Int): Long {
            val id = jConstructor(a, b, c)
            return id
        }

        @JvmStatic
        private external fun jConstructor(a: Int, b: Int, c: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::IntsTuple"
    }
    
    
    constructor(a: Int, b: Int, c: Int): this(CppBindObject(constructHelper(a, b, c), true)) {
    }
}

open class MyTupleDouble
internal constructor(obj: CppBindObject) : TupleDoubles(obj) {
    companion object {
        
        protected fun constructHelper(a: Double, b: Double): Long {
            val id = jConstructor(a, b)
            return id
        }

        @JvmStatic
        private external fun jConstructor(a: Double, b: Double, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::MyTuple<double>"
    }
    
    
    constructor(a: Double, b: Double): this(CppBindObject(constructHelper(a, b), true)) {
    }
}

open class MyTupleInt
internal constructor(obj: CppBindObject) : TupleTwoInt(obj) {
    companion object {
        
        protected fun constructHelper(a: Int, b: Int): Long {
            val id = jConstructor(a, b)
            return id
        }

        @JvmStatic
        private external fun jConstructor(a: Int, b: Int, vararg extraObjs: Any?): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::example::MyTuple<int>"
    }
    
    
    constructor(a: Int, b: Int): this(CppBindObject(constructHelper(a, b), true)) {
    }
}

fun getTupleFirstElement(t1: TupleDoubleInt): Int {
    val kotlintojdkt1 = t1.cppbindObjId
    val result = jGettuplefirstelementIntDouble(kotlintojdkt1, t1)
    
    return result
}

fun getTupleFirstElement(t1: TupleTwoInt): Int {
    val kotlintojdkt1 = t1.cppbindObjId
    val result = jGettuplefirstelementIntInt(kotlintojdkt1, t1)
    
    return result
}

private external fun jGettuplefirstelementIntDouble(t1: Long, vararg extraObjs: Any?): Int
private external fun jGettuplefirstelementIntInt(t1: Long, vararg extraObjs: Any?): Int

private external fun jGettypebyid(id: Long): String
