/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 07/25/2022-06:14.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/basic_types/short.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;



extern "C" JNIEXPORT jshort Java_com_examples_basic_1types_ShortKt_jAdd(JNIEnv* env, jclass, jshort a, jshort b, ...){
    
    
    try {
        const auto& result = cppbind::example::add(a, b);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jshort result {};
    return result;
}

extern "C" JNIEXPORT jshortArray Java_com_examples_basic_1types_ShortKt_jAdd_11(JNIEnv* env, jclass, jshortArray v, jshort a, ...){
    

    std::vector<short> jnitocxxv;
    auto _jnitocxxv = cppbind::getShortArray(env, v);
    for (auto& value__jnitocxxv : _jnitocxxv) {
        
        jnitocxxv.emplace_back(value__jnitocxxv);
    }
    
    try {
        const auto& result = cppbind::example::add(jnitocxxv, a);
        
        jshortArray cxxtojniresult = env->NewShortArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetShortArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jshortArray result {};
    return result;
}

extern "C" JNIEXPORT jobject Java_com_examples_basic_1types_ShortKt_jAdd_12(JNIEnv* env, jclass, jobject p1, jobject p2, ...){
    
    jclass pairClass_p1 = env->FindClass("kotlin/Pair");

    jfieldID firstID_p1 = env->GetFieldID(pairClass_p1, "first", "Ljava/lang/Object;");
    jfieldID secondID_p1 = env->GetFieldID(pairClass_p1, "second", "Ljava/lang/Object;");

    auto firstObject_p1 = env->GetObjectField(p1, firstID_p1);
    auto secondObject_p1 = env->GetObjectField(p1, secondID_p1);
    auto first_p1 = cppbind::extractShort(env, firstObject_p1);
    auto second_p1 = cppbind::extractShort(env, secondObject_p1);


    std::pair<short, short> jnitocxxp1 = std::make_pair(first_p1, second_p1);
    jclass pairClass_p2 = env->FindClass("kotlin/Pair");

    jfieldID firstID_p2 = env->GetFieldID(pairClass_p2, "first", "Ljava/lang/Object;");
    jfieldID secondID_p2 = env->GetFieldID(pairClass_p2, "second", "Ljava/lang/Object;");

    auto firstObject_p2 = env->GetObjectField(p2, firstID_p2);
    auto secondObject_p2 = env->GetObjectField(p2, secondID_p2);
    auto first_p2 = cppbind::extractShort(env, firstObject_p2);
    auto second_p2 = cppbind::extractShort(env, secondObject_p2);


    std::pair<short, short> jnitocxxp2 = std::make_pair(first_p2, second_p2);
    
    try {
        const auto& result = cppbind::example::add(jnitocxxp1, jnitocxxp2);
        auto first_result = result.first;
        auto second_result = result.second;


        jobject first_result_obj = cppbind::shortToObject(env, first_result);
        jobject second_result_obj = cppbind::shortToObject(env, second_result);
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_basic_1types_ShortKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
