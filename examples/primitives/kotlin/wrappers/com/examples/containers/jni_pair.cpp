/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:33.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/containers/pair.hpp"
#include "cxx/containers/map.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MAPITEM;

const char* CPPBIND_CPPBIND_EXAMPLE_PAIREXAMPLES = "cppbind::example::PairExamples";


extern "C" JNIEXPORT void Java_com_examples_containers_PairExamples_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_containers_PairExamples_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_containers_PairExamples_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    using namespace cppbind::example;
    try {
        cppbind::example::PairExamples* this_object = new cppbind::example::PairExamples();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_PAIREXAMPLES), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_containers_PairExamples_jSumintpairs([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobject p1, jobject p2, ...){
    using namespace cppbind::example;
    
    jclass pairClass_p1 = env->FindClass("kotlin/Pair");

    jfieldID firstID_p1 = env->GetFieldID(pairClass_p1, "first", "Ljava/lang/Object;");
    jfieldID secondID_p1 = env->GetFieldID(pairClass_p1, "second", "Ljava/lang/Object;");

    auto firstObject_p1 = env->GetObjectField(p1, firstID_p1);
    auto secondObject_p1 = env->GetObjectField(p1, secondID_p1);
    auto first_p1 = cppbind::extractInt(env, firstObject_p1);
    auto second_p1 = cppbind::extractInt(env, secondObject_p1);


    std::pair<int, int> jnitocxxp1 = std::make_pair(first_p1, second_p1);

    jclass pairClass_p2 = env->FindClass("kotlin/Pair");

    jfieldID firstID_p2 = env->GetFieldID(pairClass_p2, "first", "Ljava/lang/Object;");
    jfieldID secondID_p2 = env->GetFieldID(pairClass_p2, "second", "Ljava/lang/Object;");

    auto firstObject_p2 = env->GetObjectField(p2, firstID_p2);
    auto secondObject_p2 = env->GetObjectField(p2, secondID_p2);
    auto first_p2 = cppbind::extractInt(env, firstObject_p2);
    auto second_p2 = cppbind::extractInt(env, secondObject_p2);


    std::pair<int, int> jnitocxxp2 = std::make_pair(first_p2, second_p2);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->sumIntPairs(jnitocxxp1, jnitocxxp2);
        auto first_result = result.first;
        auto second_result = result.second;


        jobject first_result_obj = cppbind::intToObject(env, first_result);
        jobject second_result_obj = cppbind::intToObject(env, second_result);
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_containers_PairExamples_jSetnestedpair([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobject p, ...){
    using namespace cppbind::example;
    
    jclass pairClass_p = env->FindClass("kotlin/Pair");

    jfieldID firstID_p = env->GetFieldID(pairClass_p, "first", "Ljava/lang/Object;");
    jfieldID secondID_p = env->GetFieldID(pairClass_p, "second", "Ljava/lang/Object;");

    auto firstObject_p = env->GetObjectField(p, firstID_p);
    auto secondObject_p = env->GetObjectField(p, secondID_p);
    auto first_p = cppbind::extractObject(env, firstObject_p);
    auto second_p = cppbind::extractObject(env, secondObject_p);
    jclass pairClass_first_p = env->FindClass("kotlin/Pair");

    jfieldID firstID_first_p = env->GetFieldID(pairClass_first_p, "first", "Ljava/lang/Object;");
    jfieldID secondID_first_p = env->GetFieldID(pairClass_first_p, "second", "Ljava/lang/Object;");

    auto firstObject_first_p = env->GetObjectField(first_p, firstID_first_p);
    auto secondObject_first_p = env->GetObjectField(first_p, secondID_first_p);
    auto first_first_p = cppbind::extractObject(env, firstObject_first_p);
    auto second_first_p = cppbind::extractObject(env, secondObject_first_p);
    jstring jjnitocxxfirst_first_pStr = static_cast<jstring>(first_first_p);
    auto jnitocxxfirst_first_p_cstr = env->GetStringUTFChars(jjnitocxxfirst_first_pStr, 0);
    std::string jnitocxxfirst_first_p = jnitocxxfirst_first_p_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirst_first_pStr, jnitocxxfirst_first_p_cstr);
    jstring jjnitocxxsecond_first_pStr = static_cast<jstring>(second_first_p);
    auto jnitocxxsecond_first_p_cstr = env->GetStringUTFChars(jjnitocxxsecond_first_pStr, 0);
    std::string jnitocxxsecond_first_p = jnitocxxsecond_first_p_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecond_first_pStr, jnitocxxsecond_first_p_cstr);
    std::pair<std::string, std::string> jnitocxxfirst_p = std::make_pair(jnitocxxfirst_first_p, jnitocxxsecond_first_p);
    jclass pairClass_second_p = env->FindClass("kotlin/Pair");

    jfieldID firstID_second_p = env->GetFieldID(pairClass_second_p, "first", "Ljava/lang/Object;");
    jfieldID secondID_second_p = env->GetFieldID(pairClass_second_p, "second", "Ljava/lang/Object;");

    auto firstObject_second_p = env->GetObjectField(second_p, firstID_second_p);
    auto secondObject_second_p = env->GetObjectField(second_p, secondID_second_p);
    auto first_second_p = cppbind::extractObject(env, firstObject_second_p);
    auto second_second_p = cppbind::extractObject(env, secondObject_second_p);
    jstring jjnitocxxfirst_second_pStr = static_cast<jstring>(first_second_p);
    auto jnitocxxfirst_second_p_cstr = env->GetStringUTFChars(jjnitocxxfirst_second_pStr, 0);
    std::string jnitocxxfirst_second_p = jnitocxxfirst_second_p_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirst_second_pStr, jnitocxxfirst_second_p_cstr);
    jstring jjnitocxxsecond_second_pStr = static_cast<jstring>(second_second_p);
    auto jnitocxxsecond_second_p_cstr = env->GetStringUTFChars(jjnitocxxsecond_second_pStr, 0);
    std::string jnitocxxsecond_second_p = jnitocxxsecond_second_p_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecond_second_pStr, jnitocxxsecond_second_p_cstr);
    std::pair<std::string, std::string> jnitocxxsecond_p = std::make_pair(jnitocxxfirst_second_p, jnitocxxsecond_second_p);
    std::pair<std::pair<std::string, std::string>, std::pair<std::string, std::string>> jnitocxxp = std::make_pair(jnitocxxfirst_p, jnitocxxsecond_p);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setNestedPair(jnitocxxp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobject Java_com_examples_containers_PairExamples_jGetnestedpair([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->getNestedPair();
        auto first_result = result.first;
        auto second_result = result.second;
        auto first_first_result = first_result.first;
        auto second_first_result = first_result.second;
        jstring cxxtojnifirst_first_result = env->NewStringUTF(first_first_result.data());
        jstring cxxtojnisecond_first_result = env->NewStringUTF(second_first_result.data());
        jobject first_first_result_obj = cxxtojnifirst_first_result;
        jobject second_first_result_obj = cxxtojnisecond_first_result;
        jobject cxxtojnifirst_result = cppbind::make_jni_object_pair(env, first_first_result_obj, second_first_result_obj);
        auto first_second_result = second_result.first;
        auto second_second_result = second_result.second;
        jstring cxxtojnifirst_second_result = env->NewStringUTF(first_second_result.data());
        jstring cxxtojnisecond_second_result = env->NewStringUTF(second_second_result.data());
        jobject first_second_result_obj = cxxtojnifirst_second_result;
        jobject second_second_result_obj = cxxtojnisecond_second_result;
        jobject cxxtojnisecond_result = cppbind::make_jni_object_pair(env, first_second_result_obj, second_second_result_obj);
        jobject first_result_obj = cxxtojnifirst_result;
        jobject second_result_obj = cxxtojnisecond_result;
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_containers_PairExamples_jGetstringpair([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->getStringPair();
        auto first_result = result.first;
        auto second_result = result.second;
        jstring cxxtojnifirst_result = env->NewStringUTF(first_result.data());
        jstring cxxtojnisecond_result = env->NewStringUTF(second_result.data());
        jobject first_result_obj = cxxtojnifirst_result;
        jobject second_result_obj = cxxtojnisecond_result;
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_containers_PairExamples_jSetnestedvectorofpairs([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectArray v, ...){
    using namespace cppbind::example;
    

    std::vector<std::vector<std::pair<int, std::string>>> jnitocxxv;
    auto _jnitocxxv = cppbind::getObjectArray(env, v);
    for (auto& value__jnitocxxv : _jnitocxxv) {
        
        std::vector<std::pair<int, std::string>> jnitocxxvalue__jnitocxxv;
        auto _jnitocxxvalue__jnitocxxv = cppbind::getObjectArray(env, value__jnitocxxv);
        for (auto& value__jnitocxxvalue__jnitocxxv : _jnitocxxvalue__jnitocxxv) {
            jclass pairClass_value__jnitocxxvalue__jnitocxxv = env->FindClass("kotlin/Pair");

            jfieldID firstID_value__jnitocxxvalue__jnitocxxv = env->GetFieldID(pairClass_value__jnitocxxvalue__jnitocxxv, "first", "Ljava/lang/Object;");
            jfieldID secondID_value__jnitocxxvalue__jnitocxxv = env->GetFieldID(pairClass_value__jnitocxxvalue__jnitocxxv, "second", "Ljava/lang/Object;");

            auto firstObject_value__jnitocxxvalue__jnitocxxv = env->GetObjectField(value__jnitocxxvalue__jnitocxxv, firstID_value__jnitocxxvalue__jnitocxxv);
            auto secondObject_value__jnitocxxvalue__jnitocxxv = env->GetObjectField(value__jnitocxxvalue__jnitocxxv, secondID_value__jnitocxxvalue__jnitocxxv);
            auto first_value__jnitocxxvalue__jnitocxxv = cppbind::extractInt(env, firstObject_value__jnitocxxvalue__jnitocxxv);
            auto second_value__jnitocxxvalue__jnitocxxv = cppbind::extractObject(env, secondObject_value__jnitocxxvalue__jnitocxxv);

            jstring jjnitocxxsecond_value__jnitocxxvalue__jnitocxxvStr = static_cast<jstring>(second_value__jnitocxxvalue__jnitocxxv);
            auto jnitocxxsecond_value__jnitocxxvalue__jnitocxxv_cstr = env->GetStringUTFChars(jjnitocxxsecond_value__jnitocxxvalue__jnitocxxvStr, 0);
            std::string jnitocxxsecond_value__jnitocxxvalue__jnitocxxv = jnitocxxsecond_value__jnitocxxvalue__jnitocxxv_cstr;
            env->ReleaseStringUTFChars(jjnitocxxsecond_value__jnitocxxvalue__jnitocxxvStr, jnitocxxsecond_value__jnitocxxvalue__jnitocxxv_cstr);
            std::pair<int, std::string> jnitocxxvalue__jnitocxxvalue__jnitocxxv = std::make_pair(first_value__jnitocxxvalue__jnitocxxv, jnitocxxsecond_value__jnitocxxvalue__jnitocxxv);
            jnitocxxvalue__jnitocxxv.emplace_back(jnitocxxvalue__jnitocxxvalue__jnitocxxv);
        }
        jnitocxxv.emplace_back(jnitocxxvalue__jnitocxxv);
    }

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setNestedVectorOfPairs(jnitocxxv);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectArray Java_com_examples_containers_PairExamples_jGetnestedvectorofpairs([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->getNestedVectorOfPairs();
        
        jobjectArray cxxtojniresult = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            jobjectArray cxxtojnivalue_result = env->NewObjectArray(value_result.size(), env->FindClass("java/lang/Object"), NULL);
            size_t index_value_result = 0;
            for (auto& value_value_result : value_result) {
                auto first_value_value_result = value_value_result.first;
                auto second_value_value_result = value_value_result.second;

                jstring cxxtojnisecond_value_value_result = env->NewStringUTF(second_value_value_result.data());
                jobject first_value_value_result_obj = cppbind::intToObject(env, first_value_value_result);
                jobject second_value_value_result_obj = cxxtojnisecond_value_value_result;
                jobject cxxtojnivalue_value_result = cppbind::make_jni_object_pair(env, first_value_value_result_obj, second_value_value_result_obj);
                env->SetObjectArrayElement(cxxtojnivalue_result, index_value_result, cxxtojnivalue_value_result);
                ++index_value_result ;
            }
            env->SetObjectArrayElement(cxxtojniresult, index_result, cxxtojnivalue_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectArray result {};
    return result;
}

extern "C" JNIEXPORT jobject Java_com_examples_containers_PairExamples_jComplexpairobj([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    try {
        decltype(auto) result = jnitocxxid->complexPairObj();
        auto first_result = result.first;
        auto second_result = result.second;
        cppbind::example::MapItem* cxxtojnifirst_result_ptr = new cppbind::example::MapItem(first_result);
        char* type_first_result = strdup(CPPBIND_CPPBIND_EXAMPLE_MAPITEM);
        CppBindCObject* cppbind_obj_cxxtojnifirst_result = new CppBindCObject {type_first_result, cxxtojnifirst_result_ptr};
        jobjectid cxxtojnifirst_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnifirst_result);

        jobjectidArray cxxtojnisecond_result = env->NewLongArray(second_result.size());
        size_t index_second_result = 0;
        for (auto& value_second_result : second_result) {
            cppbind::example::MapItem* cxxtojnivalue_second_result_ptr = new cppbind::example::MapItem(value_second_result);
            char* type_value_second_result = strdup(CPPBIND_CPPBIND_EXAMPLE_MAPITEM);
            CppBindCObject* cppbind_obj_cxxtojnivalue_second_result = new CppBindCObject {type_value_second_result, cxxtojnivalue_second_result_ptr};
            jobjectid cxxtojnivalue_second_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnivalue_second_result);
            env->SetLongArrayRegion(cxxtojnisecond_result, index_second_result, 1, &cxxtojnivalue_second_result);
            ++index_second_result ;
        }
        jobject first_result_obj = cppbind::longToObject(env, cxxtojnifirst_result);
        jobject second_result_obj = cxxtojnisecond_result;
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_containers_PairExamples_jSetcomplexpairobj([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobject p, ...){
    using namespace cppbind::example;
    validateID(id);
    
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    jclass pairClass_p = env->FindClass("kotlin/Pair");

    jfieldID firstID_p = env->GetFieldID(pairClass_p, "first", "Ljava/lang/Object;");
    jfieldID secondID_p = env->GetFieldID(pairClass_p, "second", "Ljava/lang/Object;");

    auto firstObject_p = env->GetObjectField(p, firstID_p);
    auto secondObject_p = env->GetObjectField(p, secondID_p);
    auto first_p = cppbind::extractLong(env, firstObject_p);
    auto second_p = cppbind::extractObject(env, secondObject_p);

    auto cppbind_obj_first_p = reinterpret_cast<CppBindCObject*>(first_p);
    auto cppbind_obj_first_p_ptr = cppbind_obj_first_p ? cppbind_obj_first_p->ptr : nullptr;
    auto& jnitocxxfirst_p = *static_cast<cppbind::example::MapItem*>(cppbind_obj_first_p_ptr);

    std::vector<MapItem> jnitocxxsecond_p;
    auto _jnitocxxsecond_p = cppbind::getLongArray(env, second_p);
    for (auto& value__jnitocxxsecond_p : _jnitocxxsecond_p) {
        
        auto cppbind_obj_value__jnitocxxsecond_p = reinterpret_cast<CppBindCObject*>(value__jnitocxxsecond_p);
        auto cppbind_obj_value__jnitocxxsecond_p_ptr = cppbind_obj_value__jnitocxxsecond_p ? cppbind_obj_value__jnitocxxsecond_p->ptr : nullptr;
        auto& jnitocxxvalue__jnitocxxsecond_p = *static_cast<cppbind::example::MapItem*>(cppbind_obj_value__jnitocxxsecond_p_ptr);
        jnitocxxsecond_p.emplace_back(jnitocxxvalue__jnitocxxsecond_p);
    }
    std::pair<MapItem, std::vector<MapItem>> jnitocxxp = std::make_pair(jnitocxxfirst_p, jnitocxxsecond_p);
    try {
       jnitocxxid->setComplexPairObj(jnitocxxp);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}



extern "C" JNIEXPORT jlong Java_com_examples_containers_PairExamples_jSumpairitems([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobject p, ...){
    using namespace cppbind::example;
    
    jclass pairClass_p = env->FindClass("kotlin/Pair");

    jfieldID firstID_p = env->GetFieldID(pairClass_p, "first", "Ljava/lang/Object;");
    jfieldID secondID_p = env->GetFieldID(pairClass_p, "second", "Ljava/lang/Object;");

    auto firstObject_p = env->GetObjectField(p, firstID_p);
    auto secondObject_p = env->GetObjectField(p, secondID_p);
    auto first_p = cppbind::extractLong(env, firstObject_p);
    auto second_p = cppbind::extractLong(env, secondObject_p);


    std::pair<long, long> jnitocxxp = std::make_pair(first_p, second_p);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::PairExamples*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->sumPairItems(jnitocxxp);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlong result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_containers_PairKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
