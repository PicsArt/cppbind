/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/21/2021-16:40.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/containers/json.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_containers_JsonExamples_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_containers_JsonExamples_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::JsonExamples* this_object = reinterpret_cast<iegen::example::JsonExamples*>(id);
    delete this_object;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_containers_JsonExamples_jConstructor(JNIEnv* env, jobject obj){
    iegen::example::JsonExamples* baseptr = new iegen::example::JsonExamples();
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT void Java_com_examples_containers_JsonExamples_jSetjson(JNIEnv* env, jobject obj, jobjectid id, jstring j, jobject err_obj){
    
    auto jni_to_cxx_j = nlohmann::json::parse(iegen::jni_to_string(env, j))

    validateID(id);
    iegen::example::JsonExamples* this_object = reinterpret_cast<iegen::example::JsonExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->setJson(jni_to_cxx_j);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT jstring Java_com_examples_containers_JsonExamples_jGetjson(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::JsonExamples* this_object = reinterpret_cast<iegen::example::JsonExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->getJson();
      jstring cxx_to_jni_result = iegen::string_to_jni(env, result.dump(4));
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jstring result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_containers_JsonExamples_jGetsimplejsonexample(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::JsonExamples* this_object = reinterpret_cast<iegen::example::JsonExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->getSimpleJsonExample();
      jstring cxx_to_jni_result = iegen::string_to_jni(env, result.dump(4));
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jstring result;
    return result;
}