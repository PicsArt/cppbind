/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/22/2021-12:29.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/containers/map.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_containers_MapItem_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_containers_MapItem_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::MapItem* this_object = reinterpret_cast<iegen::example::MapItem*>(id);
    delete this_object;
}

extern "C" JNIEXPORT jint Java_com_examples_containers_MapItem_jValue(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    iegen::example::MapItem* this_object = reinterpret_cast<iegen::example::MapItem*>(id);
    auto result = this_object->value;
    
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_containers_MapItem_jSetvalue(JNIEnv* env, jobject obj, jobjectid id, jint value){
    validateID(id);
    iegen::example::MapItem* this_object = reinterpret_cast<iegen::example::MapItem*>(id);
    
    
    this_object->value = value;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_containers_MapItem_jConstructor(JNIEnv* env, jobject obj, jint _value){
    
    iegen::example::MapItem* baseptr = new iegen::example::MapItem(_value);
    return reinterpret_cast<jlong>(baseptr);
}

extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    delete this_object;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_containers_MapExamples_jConstructor(JNIEnv* env, jobject obj){
    iegen::example::MapExamples* baseptr = new iegen::example::MapExamples();
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jAddstringpair(JNIEnv* env, jobject obj, jobjectid id, jobject info, jobject err_obj){
    
    jclass pairClass_info = env->FindClass("kotlin/Pair");

    jfieldID firstID_info = env->GetFieldID(pairClass_info, "first", "Ljava/lang/Object;");
    jfieldID secondID_info = env->GetFieldID(pairClass_info, "second", "Ljava/lang/Object;");

    auto firstObject_info = env->GetObjectField(info, firstID_info);
    auto secondObject_info = env->GetObjectField(info, secondID_info);
    auto first_info = iegen::extractObject(env, firstObject_info);
    auto second_info = iegen::extractObject(env, secondObject_info);
    jstring jjni_to_cxx_first_infoStr = (jstring)first_info;
    auto jni_to_cxx_first_info_cstr = env->GetStringUTFChars(jjni_to_cxx_first_infoStr, 0);
    std::string jni_to_cxx_first_info = jni_to_cxx_first_info_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_first_infoStr, jni_to_cxx_first_info_cstr);
    jstring jjni_to_cxx_second_infoStr = (jstring)second_info;
    auto jni_to_cxx_second_info_cstr = env->GetStringUTFChars(jjni_to_cxx_second_infoStr, 0);
    std::string jni_to_cxx_second_info = jni_to_cxx_second_info_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_second_infoStr, jni_to_cxx_second_info_cstr);
    std::pair<std::string, std::string> jni_to_cxx_info = std::make_pair(jni_to_cxx_first_info, jni_to_cxx_second_info);

    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->addStringPair(jni_to_cxx_info);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jAddintmap(JNIEnv* env, jobject obj, jobjectid id, jmapobject info, jobject err_obj){
    

    std::map<int, int> jni_to_cxx_info;
    auto _jni_to_cxx_info = iegen::extract_jni_pair(env, info);
    auto tmp_key_jni_to_cxx_info = iegen::getIntArray(env, _jni_to_cxx_info.first);
    auto tmp_val_jni_to_cxx_info = iegen::getIntArray(env, _jni_to_cxx_info.second);
    for (size_t i = 0; i < tmp_key_jni_to_cxx_info.size(); ++i) {
        auto ktmp_info = tmp_key_jni_to_cxx_info[i];
        auto vtmp_info = tmp_val_jni_to_cxx_info[i];
        
        
        jni_to_cxx_info.insert({ ktmp_info, vtmp_info });
    }

    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->addIntMap(jni_to_cxx_info);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jAddstringmap(JNIEnv* env, jobject obj, jobjectid id, jmapobject info, jobject err_obj){
    

    std::map<std::string, std::string> jni_to_cxx_info;
    auto _jni_to_cxx_info = iegen::extract_jni_pair(env, info);
    auto tmp_key_jni_to_cxx_info = iegen::getObjectArray(env, _jni_to_cxx_info.first);
    auto tmp_val_jni_to_cxx_info = iegen::getObjectArray(env, _jni_to_cxx_info.second);
    for (size_t i = 0; i < tmp_key_jni_to_cxx_info.size(); ++i) {
        auto ktmp_info = tmp_key_jni_to_cxx_info[i];
        auto vtmp_info = tmp_val_jni_to_cxx_info[i];
        jstring jjni_to_cxx_ktmp_infoStr = (jstring)ktmp_info;
        auto jni_to_cxx_ktmp_info_cstr = env->GetStringUTFChars(jjni_to_cxx_ktmp_infoStr, 0);
        std::string jni_to_cxx_ktmp_info = jni_to_cxx_ktmp_info_cstr;
        env->ReleaseStringUTFChars(jjni_to_cxx_ktmp_infoStr, jni_to_cxx_ktmp_info_cstr);
        jstring jjni_to_cxx_vtmp_infoStr = (jstring)vtmp_info;
        auto jni_to_cxx_vtmp_info_cstr = env->GetStringUTFChars(jjni_to_cxx_vtmp_infoStr, 0);
        std::string jni_to_cxx_vtmp_info = jni_to_cxx_vtmp_info_cstr;
        env->ReleaseStringUTFChars(jjni_to_cxx_vtmp_infoStr, jni_to_cxx_vtmp_info_cstr);
        jni_to_cxx_info.insert({ jni_to_cxx_ktmp_info, jni_to_cxx_vtmp_info });
    }

    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->addStringMap(jni_to_cxx_info);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT jmapobject Java_com_examples_containers_MapExamples_jGetstringmap(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->getStringMap();
      
    jobjectArray tmp_key_cxx_to_jni_result = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
    jobjectArray tmp_val_cxx_to_jni_result = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
    size_t index_result  = 0;
    for (auto& value_result : result) {
        auto key_result = value_result.first;
        auto val_result = value_result.second;
        jstring cxx_to_jni_key_result = env->NewStringUTF(key_result.c_str());
        env->SetObjectArrayElement(tmp_key_cxx_to_jni_result, index_result, cxx_to_jni_key_result);
        jstring cxx_to_jni_val_result = env->NewStringUTF(val_result.c_str());
        env->SetObjectArrayElement(tmp_val_cxx_to_jni_result, index_result, cxx_to_jni_val_result);
        ++index_result;
    }
    jmapobject cxx_to_jni_result = iegen::make_jni_object_pair(env, tmp_key_cxx_to_jni_result, tmp_val_cxx_to_jni_result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jmapobject result;
    return result;
}


extern "C" JNIEXPORT jmapobject Java_com_examples_containers_MapExamples_jGetintmap(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->getIntMap();
      
    auto tmp_key_cxx_to_jni_result = env->NewIntArray(result.size());
    auto tmp_val_cxx_to_jni_result = env->NewIntArray(result.size());
    size_t index_result  = 0;
    for (auto& value_result : result) {
        auto key_result = value_result.first;
        auto val_result = value_result.second;
        
        env->SetIntArrayRegion(tmp_key_cxx_to_jni_result, index_result, 1, &key_result);
        
        env->SetIntArrayRegion(tmp_val_cxx_to_jni_result, index_result, 1, &val_result);
        ++index_result;
    }
    jmapobject cxx_to_jni_result = iegen::make_jni_object_pair(env, tmp_key_cxx_to_jni_result, tmp_val_cxx_to_jni_result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jmapobject result;
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_containers_MapExamples_jAddmixedmap(JNIEnv* env, jobject obj, jobjectid id, jmapobject info, jobject err_obj){
    

    std::map<std::string, MapItem> jni_to_cxx_info;
    auto _jni_to_cxx_info = iegen::extract_jni_pair(env, info);
    auto tmp_key_jni_to_cxx_info = iegen::getObjectArray(env, _jni_to_cxx_info.first);
    auto tmp_val_jni_to_cxx_info = iegen::getLongArray(env, _jni_to_cxx_info.second);
    for (size_t i = 0; i < tmp_key_jni_to_cxx_info.size(); ++i) {
        auto ktmp_info = tmp_key_jni_to_cxx_info[i];
        auto vtmp_info = tmp_val_jni_to_cxx_info[i];
        jstring jjni_to_cxx_ktmp_infoStr = (jstring)ktmp_info;
        auto jni_to_cxx_ktmp_info_cstr = env->GetStringUTFChars(jjni_to_cxx_ktmp_infoStr, 0);
        std::string jni_to_cxx_ktmp_info = jni_to_cxx_ktmp_info_cstr;
        env->ReleaseStringUTFChars(jjni_to_cxx_ktmp_infoStr, jni_to_cxx_ktmp_info_cstr);
        
        auto& jni_to_cxx_vtmp_info = * reinterpret_cast<iegen::example::MapItem*>(vtmp_info);
        jni_to_cxx_info.insert({ jni_to_cxx_ktmp_info, jni_to_cxx_vtmp_info });
    }

    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->addMixedMap(jni_to_cxx_info);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT jmapobject Java_com_examples_containers_MapExamples_jGetmixedmap(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::MapExamples* this_object = reinterpret_cast<iegen::example::MapExamples*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->getMixedMap();
      
    jobjectArray tmp_key_cxx_to_jni_result = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
    auto tmp_val_cxx_to_jni_result = env->NewLongArray(result.size());
    size_t index_result  = 0;
    for (auto& value_result : result) {
        auto key_result = value_result.first;
        auto val_result = value_result.second;
        jstring cxx_to_jni_key_result = env->NewStringUTF(key_result.c_str());
        env->SetObjectArrayElement(tmp_key_cxx_to_jni_result, index_result, cxx_to_jni_key_result);
        
        iegen::example::MapItem* _val_result = new iegen::example::MapItem(val_result);

        iegen::example::MapItem* cxx_to_jni_val_result_baseptr = _val_result;
        jobjectid cxx_to_jni_val_result = reinterpret_cast<jlong>(cxx_to_jni_val_result_baseptr);
        env->SetLongArrayRegion(tmp_val_cxx_to_jni_result, index_result, 1, &cxx_to_jni_val_result);
        ++index_result;
    }
    jmapobject cxx_to_jni_result = iegen::make_jni_object_pair(env, tmp_key_cxx_to_jni_result, tmp_val_cxx_to_jni_result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jmapobject result;
    return result;
}