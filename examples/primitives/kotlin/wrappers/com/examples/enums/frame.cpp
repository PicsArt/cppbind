/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/24/2022-13:21.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/enums/frame.hpp"
#include "cxx/enums/color.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_enums_Frame_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frame*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_enums_Frame_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::Frame* ptr = new iegen::example::Frame();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Frame"), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jint Java_com_examples_enums_Frame_jBackgroundcolor(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frame*>(iegen_obj_id_ptr);
    const auto& result = jnitocxxid->backgroundColor;
    jint cxxtojniresult = (jint)result;
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_enums_Frame_jSetbackgroundcolor(JNIEnv* env, jobject obj, jobjectid id, jint value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frame*>(iegen_obj_id_ptr);
    
    auto jnitocxxvalue = (iegen::example::Color)value;
    jnitocxxid->backgroundColor = jnitocxxvalue;
}

extern "C" JNIEXPORT jint Java_com_examples_enums_Frame_jBackgroundcolorshade(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frame*>(iegen_obj_id_ptr);
    const auto& result = jnitocxxid->backgroundColorShade;
    jint cxxtojniresult = (jint)result;
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_enums_Frame_jSetbackgroundcolorshade(JNIEnv* env, jobject obj, jobjectid id, jint value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frame*>(iegen_obj_id_ptr);
    
    auto jnitocxxvalue = (iegen::example::ColorShade)value;
    jnitocxxid->backgroundColorShade = jnitocxxvalue;
}


extern "C" JNIEXPORT jstring Java_com_examples_enums_FrameKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
