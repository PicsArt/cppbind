/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/30/2021-08:58.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

extern "C" JNIEXPORT jobjectid Java_com_examples_exceptions_SystemError_jConstructor(JNIEnv* env, jobject obj, jstring message){
    jstring jjni_to_cxx_messageStr = (jstring)message;
    auto jni_to_cxx_message_cstr = env->GetStringUTFChars(jjni_to_cxx_messageStr, 0);
    const std::string & jni_to_cxx_message = jni_to_cxx_message_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_messageStr, jni_to_cxx_message_cstr);
    std::exception* baseptr = new iegen::example::SystemError(jni_to_cxx_message);
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT jstring Java_com_examples_exceptions_SystemError_jWhat(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    std::exception* baseptr = reinterpret_cast<std::exception*>(id);
    iegen::example::SystemError* this_object = dynamic_cast<iegen::example::SystemError*>(baseptr);
    void* err_ptr = nullptr;

    try {
      auto result = this_object->what();
      jstring cxx_to_jni_result = env->NewStringUTF(result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_ptr = new std::exception(e);
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Excepiton"));
    }

    jstring result;
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_exceptions_FileError_jConstructor(JNIEnv* env, jobject obj, jstring message){
    jstring jjni_to_cxx_messageStr = (jstring)message;
    auto jni_to_cxx_message_cstr = env->GetStringUTFChars(jjni_to_cxx_messageStr, 0);
    const std::string & jni_to_cxx_message = jni_to_cxx_message_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_messageStr, jni_to_cxx_message_cstr);
    std::exception* baseptr = new iegen::example::FileError(jni_to_cxx_message);
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT jstring Java_com_examples_exceptions_FileError_jWhat(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    std::exception* baseptr = reinterpret_cast<std::exception*>(id);
    iegen::example::FileError* this_object = dynamic_cast<iegen::example::FileError*>(baseptr);
    void* err_ptr = nullptr;

    try {
      auto result = this_object->what();
      jstring cxx_to_jni_result = env->NewStringUTF(result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_ptr = new std::exception(e);
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Excepiton"));
    }

    jstring result;
    return result;
}