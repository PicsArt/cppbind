/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/22/2021-12:29.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/forward_decl/student.hpp"
#include "cxx/forward_decl/teacher.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto this_object = *reinterpret_cast<std::shared_ptr<iegen::example::Student>*>(id);
    delete &this_object;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_forward_1decl_student_Student_jConstructor(JNIEnv* env, jobject obj, jstring st_name){
    jstring jjni_to_cxx_st_nameStr = (jstring)st_name;
    auto jni_to_cxx_st_name_cstr = env->GetStringUTFChars(jjni_to_cxx_st_nameStr, 0);
    const std::string & jni_to_cxx_st_name = jni_to_cxx_st_name_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_st_nameStr, jni_to_cxx_st_name_cstr);
    iegen::example::Student* obj_ptr = new iegen::example::Student(jni_to_cxx_st_name);
    auto this_object = std::shared_ptr<iegen::example::Student>(obj_ptr);
    return reinterpret_cast<jlong>(new std::shared_ptr<iegen::example::Student>(this_object));
}
extern "C" JNIEXPORT jobjectid Java_com_examples_forward_1decl_student_Student_jConstructor_11(JNIEnv* env, jobject obj, jobjectidArray teachers){
    
    std::vector<Teacher *> jni_to_cxx_teachers;
    auto _jni_to_cxx_teachers = iegen::getLongArray(env, teachers);
    for (auto& value__jni_to_cxx_teachers : _jni_to_cxx_teachers) {
        
        auto jni_to_cxx_value__jni_to_cxx_teachers =  reinterpret_cast<iegen::example::Teacher*>(value__jni_to_cxx_teachers);
        jni_to_cxx_teachers.emplace_back(jni_to_cxx_value__jni_to_cxx_teachers);
    }
    iegen::example::Student* obj_ptr = new iegen::example::Student(jni_to_cxx_teachers);
    auto this_object = std::shared_ptr<iegen::example::Student>(obj_ptr);
    return reinterpret_cast<jlong>(new std::shared_ptr<iegen::example::Student>(this_object));
}


extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jAddteacher(JNIEnv* env, jobject obj, jobjectid id, jobjectid t, jobject err_obj){
    

    auto jni_to_cxx_t =  reinterpret_cast<iegen::example::Teacher*>(t);

    validateID(id);
    auto this_object = *reinterpret_cast<std::shared_ptr<iegen::example::Student>*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      this_object->addTeacher(jni_to_cxx_t);
      return;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));


}


extern "C" JNIEXPORT jobjectidArray Java_com_examples_forward_1decl_student_Student_jTeachers(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    auto this_object = *reinterpret_cast<std::shared_ptr<iegen::example::Student>*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->teachers();
      
    jobjectidArray cxx_to_jni_result = env->NewLongArray(result.size());
    size_t index_result = 0;
    for (auto& value_result : result) {
        

        iegen::example::Teacher* cxx_to_jni_value_result_baseptr = value_result;
        jobjectid cxx_to_jni_value_result = reinterpret_cast<jlong>(cxx_to_jni_value_result_baseptr);
        env->SetLongArrayRegion(cxx_to_jni_result, index_result, 1, &cxx_to_jni_value_result);
        ++index_result ;
    }
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jobjectidArray result;
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_forward_1decl_student_Student_jName(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    auto this_object = *reinterpret_cast<std::shared_ptr<iegen::example::Student>*>(id);
    auto result = this_object->name;
    jstring cxx_to_jni_result = env->NewStringUTF(result.c_str());
    return cxx_to_jni_result;
}

extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jSetname(JNIEnv* env, jobject obj, jobjectid id, jstring value){
    validateID(id);
    auto this_object = *reinterpret_cast<std::shared_ptr<iegen::example::Student>*>(id);
    
    jstring jjni_to_cxx_valueStr = (jstring)value;
    auto jni_to_cxx_value_cstr = env->GetStringUTFChars(jjni_to_cxx_valueStr, 0);
    std::string jni_to_cxx_value = jni_to_cxx_value_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_valueStr, jni_to_cxx_value_cstr);
    this_object->name = jni_to_cxx_value;
}
