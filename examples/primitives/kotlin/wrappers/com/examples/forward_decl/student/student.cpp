/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/03/2022-15:46.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/forward_decl/student.hpp"
#include "cxx/forward_decl/teacher.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    delete static_cast<std::shared_ptr<iegen::example::Student>*>(iegen_obj_id_ptr);
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_forward_1decl_student_Student_jConstructor(JNIEnv* env, jobject obj, jstring st_name){
    jstring jjnitocxxst_nameStr = (jstring)st_name;
    auto jnitocxxst_name_cstr = env->GetStringUTFChars(jjnitocxxst_nameStr, 0);
    std::string jnitocxxst_name = jnitocxxst_name_cstr;
    env->ReleaseStringUTFChars(jjnitocxxst_nameStr, jnitocxxst_name_cstr);
    try {
        iegen::example::Student* obj_ptr = new iegen::example::Student(jnitocxxst_name);
        auto this_object = std::shared_ptr<iegen::example::Student>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Student"), new std::shared_ptr<iegen::example::Student>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_forward_1decl_student_Student_jConstructor_11(JNIEnv* env, jobject obj, jobjectidArray teachers){
    
    std::vector<Teacher *> jnitocxxteachers;
    auto _jnitocxxteachers = iegen::getLongArray(env, teachers);
    for (auto& value__jnitocxxteachers : _jnitocxxteachers) {
        
        auto iegen_obj_value__jnitocxxteachers = reinterpret_cast<IEGenCObject*>(value__jnitocxxteachers);
        auto iegen_obj_value__jnitocxxteachers_ptr = iegen_obj_value__jnitocxxteachers ? iegen_obj_value__jnitocxxteachers->ptr : nullptr;
        auto jnitocxxvalue__jnitocxxteachers = static_cast<iegen::example::Teacher*>(iegen_obj_value__jnitocxxteachers_ptr);
        jnitocxxteachers.emplace_back(jnitocxxvalue__jnitocxxteachers);
    }
    try {
        iegen::example::Student* obj_ptr = new iegen::example::Student(jnitocxxteachers);
        auto this_object = std::shared_ptr<iegen::example::Student>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Student"), new std::shared_ptr<iegen::example::Student>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jAddteacher(JNIEnv* env, jobject obj, jobjectid id, jobjectid t){
    

    auto iegen_obj_t = reinterpret_cast<IEGenCObject*>(t);
    auto iegen_obj_t_ptr = iegen_obj_t ? iegen_obj_t->ptr : nullptr;
    auto jnitocxxt = static_cast<iegen::example::Teacher*>(iegen_obj_t_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::Student> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<iegen::example::Student>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->addTeacher(jnitocxxt);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectidArray Java_com_examples_forward_1decl_student_Student_jTeachers(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::Student> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<iegen::example::Student>*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->teachers();
        
        jobjectidArray cxxtojniresult = env->NewLongArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            iegen::example::Teacher* cxxtojnivalue_result_ptr = const_cast<iegen::example::Teacher*>(value_result);
            char* type_value_result = strdup("iegen::example::Teacher");
            IEGenCObject* iegen_obj_cxxtojnivalue_result = new IEGenCObject {type_value_result, cxxtojnivalue_result_ptr};
            jobjectid cxxtojnivalue_result = reinterpret_cast<jlong>(iegen_obj_cxxtojnivalue_result);
            env->SetLongArrayRegion(cxxtojniresult, index_result, 1, &cxxtojnivalue_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectidArray result;
    return result;
}
extern "C" JNIEXPORT jstring Java_com_examples_forward_1decl_student_Student_jName(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::Student> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<iegen::example::Student>*>(iegen_obj_id_ptr);
    const auto& result = jnitocxxid->name;
    jstring cxxtojniresult = env->NewStringUTF(result.data());
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_forward_1decl_student_Student_jSetname(JNIEnv* env, jobject obj, jobjectid id, jstring value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::Student> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<iegen::example::Student>*>(iegen_obj_id_ptr);
    
    jstring jjnitocxxvalueStr = (jstring)value;
    auto jnitocxxvalue_cstr = env->GetStringUTFChars(jjnitocxxvalueStr, 0);
    std::string jnitocxxvalue = jnitocxxvalue_cstr;
    env->ReleaseStringUTFChars(jjnitocxxvalueStr, jnitocxxvalue_cstr);
    jnitocxxid->name = jnitocxxvalue;
}


extern "C" JNIEXPORT jstring Java_com_examples_forward_1decl_student_StudentKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
