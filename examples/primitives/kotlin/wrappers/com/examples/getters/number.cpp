/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 09/02/2021-07:34.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/getters/number.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_getters_NumberInt_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<int>>*>(id);
    delete jni_to_cxx_id.get();
}
extern "C" JNIEXPORT jobjectid Java_com_examples_getters_NumberInt_jConstructor(JNIEnv* env, jobject obj, jint n){
    
    iegen::example::Number<int>* obj_ptr = new iegen::example::Number<int>(n);
    auto this_object = std::shared_ptr<iegen::example::Number<int>>(obj_ptr);
    return reinterpret_cast<jlong>(new std::shared_ptr<iegen::example::Number<int>>(this_object));
}


extern "C" JNIEXPORT jint Java_com_examples_getters_NumberInt_jToint(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<int>>*>(id);
    
    try {
        auto result = jni_to_cxx_id->toInt();
        
        return result;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result;
    return result;
}

extern "C" JNIEXPORT jint Java_com_examples_getters_NumberInt_jNum(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<int>>*>(id);
    auto result = jni_to_cxx_id->num;
    
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_getters_NumberInt_jSetnum(JNIEnv* env, jobject obj, jobjectid id, jint value){
    validateID(id);
    
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<int>>*>(id);
    
    
    jni_to_cxx_id->num = value;
}


extern "C" JNIEXPORT void Java_com_examples_getters_NumberDouble_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<double>>*>(id);
    delete jni_to_cxx_id.get();
}
extern "C" JNIEXPORT jobjectid Java_com_examples_getters_NumberDouble_jConstructor(JNIEnv* env, jobject obj, jdouble n){
    
    iegen::example::Number<double>* obj_ptr = new iegen::example::Number<double>(n);
    auto this_object = std::shared_ptr<iegen::example::Number<double>>(obj_ptr);
    return reinterpret_cast<jlong>(new std::shared_ptr<iegen::example::Number<double>>(this_object));
}


extern "C" JNIEXPORT jint Java_com_examples_getters_NumberDouble_jToint(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<double>>*>(id);
    
    try {
        auto result = jni_to_cxx_id->toInt();
        
        return result;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result;
    return result;
}

extern "C" JNIEXPORT jdouble Java_com_examples_getters_NumberDouble_jNum(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<double>>*>(id);
    auto result = jni_to_cxx_id->num;
    
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_getters_NumberDouble_jSetnum(JNIEnv* env, jobject obj, jobjectid id, jdouble value){
    validateID(id);
    
    auto jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<iegen::example::Number<double>>*>(id);
    
    
    jni_to_cxx_id->num = value;
}
