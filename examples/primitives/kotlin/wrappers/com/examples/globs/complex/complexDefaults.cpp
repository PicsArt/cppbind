/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/06/2022-18:58.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/globs/utils.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/simple/root.hpp"



extern "C" JNIEXPORT jobjectid Java_com_examples_globs_complex_ComplexDefaultsKt_jSinglecomplexdefaultvalue_11(JNIEnv* env, jclass cls){
    
    
    try {
        const auto& result = ::singleComplexDefaultValue();
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        char* type_result = strdup("iegen::example::Task");
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_globs_complex_ComplexDefaultsKt_jSinglecomplexdefaultvalue(JNIEnv* env, jclass cls, jobjectid task){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);
    
    try {
        const auto& result = ::singleComplexDefaultValue(jnitocxxtask);
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        char* type_result = strdup("iegen::example::Task");
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_globs_complex_ComplexDefaultsKt_jMultiplemixeddefaultvalues_11(JNIEnv* env, jclass cls){
    
    
    try {
        const auto& result = ::multipleMixedDefaultValues();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_globs_complex_ComplexDefaultsKt_jMultiplemixeddefaultvalues_12(JNIEnv* env, jclass cls, jobjectid task, jint i){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);
    
    try {
        const auto& result = ::multipleMixedDefaultValues(jnitocxxtask, i);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_globs_complex_ComplexDefaultsKt_jMultiplemixeddefaultvalues(JNIEnv* env, jclass cls, jobjectid task, jint i, jobjectid r){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);

    auto iegen_obj_r = reinterpret_cast<IEGenCObject*>(r);
    auto iegen_obj_r_ptr = iegen_obj_r ? iegen_obj_r->ptr : nullptr;
    auto& jnitocxxr = *static_cast<iegen::example::Root*>(iegen_obj_r_ptr);
    
    try {
        const auto& result = ::multipleMixedDefaultValues(jnitocxxtask, i, jnitocxxr);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_globs_complex_ComplexdefaultsKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
