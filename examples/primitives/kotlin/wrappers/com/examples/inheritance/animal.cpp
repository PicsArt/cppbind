/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/05/2022-13:33.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/inheritance/animal.hpp"

extern const char* IEGEN_IMAMMALS_DOLPHIN;
extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_IANIMAL = "iegen::example::Animal";
const char* IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL = "iegen::example::TerrestrialAnimal";
const char* IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL = "iegen::example::AquaticAnimal";
const char* IEGEN_IEGEN_EXAMPLE_FROG = "iegen::example::Frog";
const char* IEGEN_IEGEN_EXAMPLE_LITTLEFROG = "iegen::example::LittleFrog";
const char* IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE = "iegen::example::AnimalUsage";

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_inheritance_AnimalImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    static_assert(std::has_virtual_destructor<iegen::example::Animal>::value, "iegen::example::Animal type must have virtual destructor");
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_IANIMAL) == 0)
        delete static_cast<iegen::example::Animal*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
        delete static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
        delete static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IMAMMALS_DOLPHIN) == 0)
        delete static_cast<iegen::example::Mammals::Dolphin*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
        delete static_cast<iegen::example::AquaticAnimal*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL) == 0)
        delete static_cast<iegen::example::TerrestrialAnimal*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

iegen::example::Animal* recover_obj_from_IegenExample_IAnimal(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_IANIMAL) == 0)
            return static_cast<iegen::example::Animal*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IMAMMALS_DOLPHIN) == 0)
            return static_cast<iegen::example::Mammals::Dolphin*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            return static_cast<iegen::example::AquaticAnimal*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL) == 0)
            return static_cast<iegen::example::TerrestrialAnimal*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalImpl_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::Animal* ptr = new iegen::example::Animal();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_IANIMAL), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_IAnimalHelper_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    iegen::example::Animal* jnitocxxid = recover_obj_from_IegenExample_IAnimal(id);
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_inheritance_IAnimalHelper_jEquals(JNIEnv* env, jobject obj, jobjectid id, jobjectid a){
    

    iegen::example::Animal* jnitocxxa = recover_obj_from_IegenExample_IAnimal(a);

    validateID(id);
    iegen::example::Animal* jnitocxxid = recover_obj_from_IegenExample_IAnimal(id);
    
    try {
        const auto& result = jnitocxxid->equals(jnitocxxa);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_inheritance_TerrestrialAnimalImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    static_assert(std::has_virtual_destructor<iegen::example::TerrestrialAnimal>::value, "iegen::example::TerrestrialAnimal type must have virtual destructor");
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL) == 0)
        delete static_cast<iegen::example::TerrestrialAnimal*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
        delete static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
        delete static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

iegen::example::TerrestrialAnimal* recover_obj_from_IegenExample_ITerrestrialAnimal(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL) == 0)
            return static_cast<iegen::example::TerrestrialAnimal*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_TerrestrialAnimalImpl_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::TerrestrialAnimal* ptr = new iegen::example::TerrestrialAnimal();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_ITERRESTRIALANIMAL), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_ITerrestrialAnimalHelper_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    iegen::example::TerrestrialAnimal* jnitocxxid = recover_obj_from_IegenExample_ITerrestrialAnimal(id);
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_inheritance_AquaticAnimal_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    static_assert(std::has_virtual_destructor<iegen::example::AquaticAnimal>::value, "iegen::example::AquaticAnimal type must have virtual destructor");
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
        delete static_cast<iegen::example::AquaticAnimal*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
        delete static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
        delete static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IMAMMALS_DOLPHIN) == 0)
        delete static_cast<iegen::example::Mammals::Dolphin*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

iegen::example::AquaticAnimal* recover_obj_from_IegenExample_AquaticAnimal(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            return static_cast<iegen::example::AquaticAnimal*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IMAMMALS_DOLPHIN) == 0)
            return static_cast<iegen::example::Mammals::Dolphin*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AquaticAnimal_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::AquaticAnimal* ptr = new iegen::example::AquaticAnimal();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_AquaticAnimal_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    iegen::example::AquaticAnimal* jnitocxxid = recover_obj_from_IegenExample_AquaticAnimal(id);
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


iegen::example::Frog* recover_obj_from_IegenExample_Frog(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_Frog_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::Frog* ptr = new iegen::example::Frog();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_FROG), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_Frog_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Frog*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_LittleFrog_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::LittleFrog* ptr = new iegen::example::LittleFrog();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_LITTLEFROG), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_inheritance_AnimalUsage_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    delete static_cast<iegen::example::AnimalUsage*>(iegen_obj_id_ptr);
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::AnimalUsage* ptr = new iegen::example::AnimalUsage();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jConstructor_11(JNIEnv* env, jobject obj, jobjectid little_frog){
    
    auto iegen_obj_little_frog = reinterpret_cast<IEGenCObject*>(little_frog);
    auto iegen_obj_little_frog_ptr = iegen_obj_little_frog ? iegen_obj_little_frog->ptr : nullptr;
    auto& jnitocxxlittle_frog = *static_cast<iegen::example::LittleFrog*>(iegen_obj_little_frog_ptr);
    try {
        iegen::example::AnimalUsage* ptr = new iegen::example::AnimalUsage(jnitocxxlittle_frog);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_AnimalUsage_jGetanimaltypename(JNIEnv* env, jobject obj, jobjectid animal){
    

    iegen::example::Animal* jnitocxxanimal_ptr = recover_obj_from_IegenExample_IAnimal(animal);
    auto& jnitocxxanimal = *jnitocxxanimal_ptr;

    
    try {
        const auto& result = iegen::example::AnimalUsage::getAnimalTypeName(jnitocxxanimal);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_AnimalUsage_jGetaquaticanimaltypename(JNIEnv* env, jobject obj, jobjectid animal){
    

    iegen::example::AquaticAnimal* jnitocxxanimal_ptr = recover_obj_from_IegenExample_AquaticAnimal(animal);
    auto& jnitocxxanimal = *jnitocxxanimal_ptr;

    
    try {
        const auto& result = iegen::example::AnimalUsage::getAquaticAnimalTypeName(jnitocxxanimal);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jGetanimal(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::AnimalUsage*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getAnimal();
        iegen::example::Animal* cxxtojniresult_ptr = const_cast<iegen::example::Animal*>(&result);
        char* type_result = nullptr;
        const char* name_result = typeid(result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(IEGEN_IEGEN_EXAMPLE_IANIMAL);
        }
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jGetaquaticanimal(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::AnimalUsage*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getAquaticAnimal();
        iegen::example::AquaticAnimal* cxxtojniresult_ptr = const_cast<iegen::example::AquaticAnimal*>(&result);
        char* type_result = nullptr;
        const char* name_result = typeid(result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL);
        }
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jGetfrog(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::AnimalUsage*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getFrog();
        iegen::example::Frog* cxxtojniresult_ptr = const_cast<iegen::example::Frog*>(&result);
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_FROG);
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_inheritance_AnimalUsage_jGetlittlefrog(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::AnimalUsage*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getLittleFrog();
        iegen::example::Frog* cxxtojniresult_ptr = const_cast<iegen::example::Frog*>(&result);
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_FROG);
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_inheritance_AnimalKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
