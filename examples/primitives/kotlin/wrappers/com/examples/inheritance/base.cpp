/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-06:11.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/inheritance/base.hpp"
#include "cxx/inheritance/datetime.hpp"
#include "cxx/inheritance/date.hpp"
#include "cxx/inheritance/time.hpp"

extern const char* IEGEN_IEGEN_EXAMPLE_DATETIME;
extern const char* IEGEN_IEGEN_EXAMPLE_DATE;
extern const char* IEGEN_IEGEN_EXAMPLE_ITIME;
extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_IBASE = "iegen::example::Base";

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_inheritance_BaseImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_IBASE) == 0)
        delete static_cast<std::shared_ptr<iegen::example::Base>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_DATETIME) == 0)
        delete static_cast<std::shared_ptr<iegen::example::DateTime>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_DATE) == 0)
        delete static_cast<std::shared_ptr<iegen::example::Date>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITIME) == 0)
        delete static_cast<std::shared_ptr<iegen::example::Time>*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

std::shared_ptr<iegen::example::Base> downcast_IegenExample_IBase(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_IBASE) == 0)
            return *static_cast<std::shared_ptr<iegen::example::Base>*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_DATETIME) == 0)
            return *static_cast<std::shared_ptr<iegen::example::DateTime>*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_DATE) == 0)
            return *static_cast<std::shared_ptr<iegen::example::Date>*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_IEGEN_EXAMPLE_ITIME) == 0)
            return *static_cast<std::shared_ptr<iegen::example::Time>*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}


extern "C" JNIEXPORT jstring Java_com_examples_inheritance_IBaseHelper_jValue(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    std::shared_ptr<iegen::example::Base> jnitocxxid;
    jnitocxxid = downcast_IegenExample_IBase(id);
    
    try {
        const auto& result = jnitocxxid->value();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_inheritance_BaseKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
