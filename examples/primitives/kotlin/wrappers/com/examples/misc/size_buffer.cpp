/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/29/2021-12:23.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/misc/size_buffer.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_misc_SizeUsage_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_misc_SizeUsage_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::SizeUsage* this_object = reinterpret_cast<iegen::example::SizeUsage*>(id);
    delete this_object;
}


extern "C" JNIEXPORT jfloatArray Java_com_examples_misc_SizeUsage_jMultiplyby(JNIEnv* env, jobject obj, jfloatArray size, jint n, jobject err_obj){
    
    jfloat *elems = env->GetFloatArrayElements(size, 0);
    jfloat width_size = elems[0];
    jfloat height_size = elems[1];
    env->ReleaseFloatArrayElements(size, elems, 0);
    SizeF jni_to_cxx_size = SizeF(width_size, height_size);



    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = iegen::example::SizeUsage::multiplyBy(jni_to_cxx_size, n);
      jfloat width_result = result.width;
    jfloat height_result = result.height;
    jfloatArray cxx_to_jni_result = env->NewFloatArray(2);
    jfloat carray[] = {width_result, height_result};
    env->SetFloatArrayRegion(cxx_to_jni_result, 0 , 2, carray);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jfloatArray result;
    return result;
}


extern "C" JNIEXPORT jfloatArray Java_com_examples_misc_SizeUsage_jDoublesizef(JNIEnv* env, jobject obj, jfloatArray resolution, jobject err_obj){
    
    jfloat *elems = env->GetFloatArrayElements(resolution, 0);
    jfloat width_resolution = elems[0];
    jfloat height_resolution = elems[1];
    env->ReleaseFloatArrayElements(resolution, elems, 0);
    const SizeF & jni_to_cxx_resolution = SizeF(width_resolution, height_resolution);

    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = iegen::example::SizeUsage::doubleSizeF(jni_to_cxx_resolution);
      jfloat width_result = result.width;
    jfloat height_result = result.height;
    jfloatArray cxx_to_jni_result = env->NewFloatArray(2);
    jfloat carray[] = {width_result, height_result};
    env->SetFloatArrayRegion(cxx_to_jni_result, 0 , 2, carray);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jfloatArray result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_misc_BufferUsage_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_misc_BufferUsage_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::BufferUsage* this_object = reinterpret_cast<iegen::example::BufferUsage*>(id);
    delete this_object;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_misc_BufferUsage_jConstructor(JNIEnv* env, jobject obj){
    iegen::example::BufferUsage* baseptr = new iegen::example::BufferUsage();
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT jstring Java_com_examples_misc_BufferUsage_jUsage1(JNIEnv* env, jobject obj, jobjectid id, jobjectid b, jobject err_obj){
    
    auto jni_to_cxx_b = *reinterpret_cast<iegen::example::Buffer<int>*>(b);

    validateID(id);
    iegen::example::BufferUsage* this_object = reinterpret_cast<iegen::example::BufferUsage*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->usage1(jni_to_cxx_b);
      jstring cxx_to_jni_result = env->NewStringUTF(result.c_str());
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jstring result;
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_misc_BufferUsage_jUsage2(JNIEnv* env, jobject obj, jobjectid id, jobject err_obj){
    
    validateID(id);
    iegen::example::BufferUsage* this_object = reinterpret_cast<iegen::example::BufferUsage*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->usage2();
      jobjectid cxx_to_jni_result = reinterpret_cast<jlong>(result);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jobjectid result;
    return result;
}