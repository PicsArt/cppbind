/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-06:11.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/optionals/optionals.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/enums/color.hpp"
#include "cxx/simple/root.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/getters/person.hpp"

extern const char* IEGEN_IEGEN_EXAMPLE_TASK;
extern const char* IEGEN_STD_STDEXCEPTION;
extern const char* IEGEN_IEGEN_EXAMPLE_PROJECT;
extern const char* IEGEN_IEGEN_EXAMPLE_PERSON;

const char* IEGEN_IEGEN_EXAMPLE_OPTIONALS = "iegen::example::Optionals";

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_optionals_Optionals_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    delete static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jOptionalptrwithnullptrdefault(JNIEnv* env, jobject obj, jobjectid id, jobjectid task){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto jnitocxxtask = static_cast<iegen::example::Task*>(iegen_obj_task_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalPtrWithNullptrDefault(jnitocxxtask);
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(result);
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        IEGenCObject* iegen_obj_cxxtojniresult = nullptr;
        if (result) {
            iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        }
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jOptionalptrwithnulldefault(JNIEnv* env, jobject obj, jobjectid id, jobjectid task){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto jnitocxxtask = static_cast<iegen::example::Task*>(iegen_obj_task_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalPtrWithNullDefault(jnitocxxtask);
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(result);
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        IEGenCObject* iegen_obj_cxxtojniresult = nullptr;
        if (result) {
            iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        }
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_optionals_Optionals_jOptionalintwithdefault(JNIEnv* env, jobject obj, jobjectid id, jint value){
    


    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalIntWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jlong Java_com_examples_optionals_Optionals_jOptionallongwithdefault(JNIEnv* env, jobject obj, jobjectid id, jlong value){
    


    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalLongWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlong result {};
    return result;
}


extern "C" JNIEXPORT jdouble Java_com_examples_optionals_Optionals_jOptionaldoublewithdefault(JNIEnv* env, jobject obj, jobjectid id, jdouble value){
    


    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalDoubleWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jdouble result {};
    return result;
}


extern "C" JNIEXPORT jfloat Java_com_examples_optionals_Optionals_jOptionalfloatwithdefault(JNIEnv* env, jobject obj, jobjectid id, jfloat value){
    


    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalFloatWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_optionals_Optionals_jOptionalboolwithdefault(JNIEnv* env, jobject obj, jobjectid id, jboolean value){
    


    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalBoolWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jOptionalstringwithdefault(JNIEnv* env, jobject obj, jobjectid id, jstring optionalStr){
    
    jstring jjnitocxxoptionalStrStr = static_cast<jstring>(optionalStr);
    auto jnitocxxoptionalStr_cstr = env->GetStringUTFChars(jjnitocxxoptionalStrStr, 0);
    std::string jnitocxxoptionalStr = jnitocxxoptionalStr_cstr;
    env->ReleaseStringUTFChars(jjnitocxxoptionalStrStr, jnitocxxoptionalStr_cstr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalStringWithDefault(jnitocxxoptionalStr);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jbyte Java_com_examples_optionals_Optionals_jOptionalcharwithdefault(JNIEnv* env, jobject obj, jobjectid id, jbyte symbol){
    
    char jnitocxxsymbol = static_cast<char>(symbol);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalCharWithDefault(jnitocxxsymbol);
        jbyte cxxtojniresult = static_cast<jbyte>(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jbyte result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jOptionalcharpointerwithdefault(JNIEnv* env, jobject obj, jobjectid id, jstring optionalStr){
    
    auto deleter = [&env, &optionalStr](const char * ptr) {
        env->ReleaseStringUTFChars(optionalStr, ptr);
    };
    std::unique_ptr<const char, decltype(deleter)> jnitocxxoptionalStr_unique_ptr(
                                                                  env->GetStringUTFChars(optionalStr, NULL),
                                                                  deleter);
    const char * jnitocxxoptionalStr = jnitocxxoptionalStr_unique_ptr.get()

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalCharPointerWithDefault(jnitocxxoptionalStr);
        jstring cxxtojniresult = env->NewStringUTF(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_optionals_Optionals_jOptionalenumwithdefault(JNIEnv* env, jobject obj, jobjectid id, jint c){
    
    auto jnitocxxc = static_cast<iegen::example::Color>(c);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalEnumWithDefault(jnitocxxc);
        jint cxxtojniresult = static_cast<jint>(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jSinglecomplexdefaultvalue_11(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->singleComplexDefaultValue();
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}



extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jSinglecomplexdefaultvalue(JNIEnv* env, jobject obj, jobjectid id, jobjectid task){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->singleComplexDefaultValue(jnitocxxtask);
        iegen::example::Task* cxxtojniresult_ptr = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jMultiplemixeddefaultvalues_11(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->multipleMixedDefaultValues();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}



extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jMultiplemixeddefaultvalues_12(JNIEnv* env, jobject obj, jobjectid id, jobjectid task, jint i){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);



    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->multipleMixedDefaultValues(jnitocxxtask, i);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}



extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jMultiplemixeddefaultvalues(JNIEnv* env, jobject obj, jobjectid id, jobjectid task, jint i, jobjectid r){
    

    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);




    auto iegen_obj_r = reinterpret_cast<IEGenCObject*>(r);
    auto iegen_obj_r_ptr = iegen_obj_r ? iegen_obj_r->ptr : nullptr;
    auto& jnitocxxr = *static_cast<iegen::example::Root*>(iegen_obj_r_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->multipleMixedDefaultValues(jnitocxxtask, i, jnitocxxr);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jConstructor_11(JNIEnv* env, jobject obj){
    try {
        iegen::example::Optionals* ptr = new iegen::example::Optionals();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jConstructor_12(JNIEnv* env, jobject obj, jobjectid task, jint i){
    
    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);
    
    try {
        iegen::example::Optionals* ptr = new iegen::example::Optionals(jnitocxxtask, i);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jConstructor(JNIEnv* env, jobject obj, jobjectid task, jint i, jobjectid r){
    
    auto iegen_obj_task = reinterpret_cast<IEGenCObject*>(task);
    auto iegen_obj_task_ptr = iegen_obj_task ? iegen_obj_task->ptr : nullptr;
    auto& jnitocxxtask = *static_cast<iegen::example::Task*>(iegen_obj_task_ptr);
    
    
    auto iegen_obj_r = reinterpret_cast<IEGenCObject*>(r);
    auto iegen_obj_r_ptr = iegen_obj_r ? iegen_obj_r->ptr : nullptr;
    auto& jnitocxxr = *static_cast<iegen::example::Root*>(iegen_obj_r_ptr);
    try {
        iegen::example::Optionals* ptr = new iegen::example::Optionals(jnitocxxtask, i, jnitocxxr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_optionals_Optionals_jOptionalenumwithdefaultandfieldprefix(JNIEnv* env, jobject obj, jobjectid id, jint c){
    
    auto jnitocxxc = static_cast<iegen::example::ColorShade>(c);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalEnumWithDefaultAndFieldPrefix(jnitocxxc);
        jint cxxtojniresult = static_cast<jint>(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_optionals_Optionals_jOptionalenumwithinternaldefault(JNIEnv* env, jobject obj, jobjectid id, jint c){
    
    auto jnitocxxc = static_cast<iegen::example::ColorShade>(c);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalEnumWithInternalDefault(jnitocxxc);
        jint cxxtojniresult = static_cast<jint>(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_optionals_Optionals_jOptionalstringviewwithdefault(JNIEnv* env, jobject obj, jobjectid id, jstring optionalStr){
    
    jstring jjnitocxxoptionalStrStr = static_cast<jstring>(optionalStr);
    auto jnitocxxoptionalStr_cstr = env->GetStringUTFChars(jjnitocxxoptionalStrStr, 0);
    std::string jnitocxxoptionalStr = jnitocxxoptionalStr_cstr;
    env->ReleaseStringUTFChars(jjnitocxxoptionalStrStr, jnitocxxoptionalStr_cstr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalStringViewWithDefault(jnitocxxoptionalStr);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jOptionalfdptrwithnullptrdefault(JNIEnv* env, jobject obj, jobjectid id, jobjectid project){
    

    auto iegen_obj_project = reinterpret_cast<IEGenCObject*>(project);
    auto iegen_obj_project_ptr = iegen_obj_project ? iegen_obj_project->ptr : nullptr;
    auto jnitocxxproject = static_cast<iegen::example::Project*>(iegen_obj_project_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalFDPtrWithNullptrDefault(jnitocxxproject);
        iegen::example::Project* cxxtojniresult_ptr = const_cast<iegen::example::Project*>(result);
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PROJECT);
        IEGenCObject* iegen_obj_cxxtojniresult = nullptr;
        if (result) {
            iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        }
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_optionals_Optionals_jOptionalsharedptrwithnullptrdefault(JNIEnv* env, jobject obj, jobjectid id, jobjectid person){
    

    std::shared_ptr<iegen::example::Person> jnitocxxperson = nullptr;
    if (person) {
        auto iegen_obj_person = reinterpret_cast<IEGenCObject*>(person);
        auto iegen_obj_person_ptr = iegen_obj_person ? iegen_obj_person->ptr : nullptr;
        jnitocxxperson = *static_cast<std::shared_ptr<iegen::example::Person>*>(iegen_obj_person_ptr);
    }

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::Optionals*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->optionalSharedPtrWithNullptrDefault(jnitocxxperson);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PERSON);
        void* cxxtojniresult_ptr = nullptr;
        IEGenCObject* iegen_obj_cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult_ptr = new std::shared_ptr<iegen::example::Person>(result);
            iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        }
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_optionals_OptionalsKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
