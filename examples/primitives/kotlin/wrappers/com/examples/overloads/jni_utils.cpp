/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/08/2022-15:51.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/overloads/utils.hpp"
#include <algorithm>

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_UTILS = "cppbind::example::Utils";

using namespace cppbind::example;


extern "C" JNIEXPORT void Java_com_examples_overloads_Utils_jFinalize(JNIEnv*, jobject, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_overloads_Utils_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr)->get());
}

extern "C" JNIEXPORT jobjectid Java_com_examples_overloads_Utils_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    try {
        cppbind::example::Utils* this_object = new cppbind::example::Utils();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_UTILS), new std::shared_ptr<cppbind::example::Utils>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_overloads_Utils_jSum([[maybe_unused]] JNIEnv* env, jobject, jint first, jint second, ...){
    




    
    try {
        const auto& result = cppbind::example::Utils::sum(first, second);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jfloat Java_com_examples_overloads_Utils_jSum1([[maybe_unused]] JNIEnv* env, jobject, jfloat first, jfloat second, ...){
    




    
    try {
        const auto& result = cppbind::example::Utils::sum(first, second);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_overloads_Utils_jConcatenate([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jstring first, jstring second, ...){
    
    jstring jjnitocxxfirstStr = static_cast<jstring>(first);
    auto jnitocxxfirst_cstr = env->GetStringUTFChars(jjnitocxxfirstStr, 0);
    std::string jnitocxxfirst = jnitocxxfirst_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirstStr, jnitocxxfirst_cstr);

    jstring jjnitocxxsecondStr = static_cast<jstring>(second);
    auto jnitocxxsecond_cstr = env->GetStringUTFChars(jjnitocxxsecondStr, 0);
    std::string jnitocxxsecond = jnitocxxsecond_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecondStr, jnitocxxsecond_cstr);

    validateID(id);
    std::shared_ptr<cppbind::example::Utils> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->concatenate(jnitocxxfirst, jnitocxxsecond);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_overloads_Utils_jConcatenate1([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jstring first, jstring second, jstring third, ...){
    
    jstring jjnitocxxfirstStr = static_cast<jstring>(first);
    auto jnitocxxfirst_cstr = env->GetStringUTFChars(jjnitocxxfirstStr, 0);
    std::string jnitocxxfirst = jnitocxxfirst_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirstStr, jnitocxxfirst_cstr);

    jstring jjnitocxxsecondStr = static_cast<jstring>(second);
    auto jnitocxxsecond_cstr = env->GetStringUTFChars(jjnitocxxsecondStr, 0);
    std::string jnitocxxsecond = jnitocxxsecond_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecondStr, jnitocxxsecond_cstr);

    jstring jjnitocxxthirdStr = static_cast<jstring>(third);
    auto jnitocxxthird_cstr = env->GetStringUTFChars(jjnitocxxthirdStr, 0);
    std::string jnitocxxthird = jnitocxxthird_cstr;
    env->ReleaseStringUTFChars(jjnitocxxthirdStr, jnitocxxthird_cstr);

    validateID(id);
    std::shared_ptr<cppbind::example::Utils> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->concatenate(jnitocxxfirst, jnitocxxsecond, jnitocxxthird);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_overloads_Utils_jMinus([[maybe_unused]] JNIEnv* env, jobject, jint first, jint second, ...){
    




    
    try {
        const auto& result = cppbind::example::Utils::sub(first, second);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jfloat Java_com_examples_overloads_Utils_jMinus1([[maybe_unused]] JNIEnv* env, jobject, jfloat first, jfloat second, ...){
    




    
    try {
        const auto& result = cppbind::example::Utils::sub(first, second);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}


extern "C" JNIEXPORT jintArray Java_com_examples_overloads_Utils_jSum2([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jintArray first, jintArray second, ...){
    

    std::vector<int> _jnitocxxfirst;
    auto __jnitocxxfirst = cppbind::getIntArray(env, first);
    for (auto& value___jnitocxxfirst : __jnitocxxfirst) {
        
        _jnitocxxfirst.emplace_back(value___jnitocxxfirst);
    }
    cppbind::example::Utils::ArrayInt jnitocxxfirst {};
    std::copy_n(std::make_move_iterator(_jnitocxxfirst.begin()), 4, jnitocxxfirst.begin());


    std::vector<int> _jnitocxxsecond;
    auto __jnitocxxsecond = cppbind::getIntArray(env, second);
    for (auto& value___jnitocxxsecond : __jnitocxxsecond) {
        
        _jnitocxxsecond.emplace_back(value___jnitocxxsecond);
    }
    cppbind::example::Utils::ArrayInt jnitocxxsecond {};
    std::copy_n(std::make_move_iterator(_jnitocxxsecond.begin()), 4, jnitocxxsecond.begin());

    validateID(id);
    std::shared_ptr<cppbind::example::Utils> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->sum(jnitocxxfirst, jnitocxxsecond);
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}


extern "C" JNIEXPORT jfloatArray Java_com_examples_overloads_Utils_jSum3([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jfloatArray first, jfloatArray second, ...){
    

    std::vector<float> _jnitocxxfirst;
    auto __jnitocxxfirst = cppbind::getFloatArray(env, first);
    for (auto& value___jnitocxxfirst : __jnitocxxfirst) {
        
        _jnitocxxfirst.emplace_back(value___jnitocxxfirst);
    }
    std::array<float, 4> jnitocxxfirst {};
    std::copy_n(std::make_move_iterator(_jnitocxxfirst.begin()), 4, jnitocxxfirst.begin());


    std::vector<float> _jnitocxxsecond;
    auto __jnitocxxsecond = cppbind::getFloatArray(env, second);
    for (auto& value___jnitocxxsecond : __jnitocxxsecond) {
        
        _jnitocxxsecond.emplace_back(value___jnitocxxsecond);
    }
    std::array<float, 4> jnitocxxsecond {};
    std::copy_n(std::make_move_iterator(_jnitocxxsecond.begin()), 4, jnitocxxsecond.begin());

    validateID(id);
    std::shared_ptr<cppbind::example::Utils> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<cppbind::example::Utils>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->sum(jnitocxxfirst, jnitocxxsecond);
        
        jfloatArray cxxtojniresult = env->NewFloatArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetFloatArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloatArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_overloads_UtilsKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
