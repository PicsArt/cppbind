/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/20/2022-08:00.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/shared_ptr/shared_ptr.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_EXAMPLE_CAR = "Example::Car";
const char* CPPBIND_EXAMPLE_CARUSAGE = "Example::CarUsage";

using namespace Example;


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jFinalize(JNIEnv*, jobject, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_shared_1ptr_Car_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr)->get());
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jint cost, ...){
    
    try {
        Example::Car* obj_ptr = new Example::Car(cost);
        auto this_object = std::shared_ptr<Example::Car>(obj_ptr);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_EXAMPLE_CAR), new std::shared_ptr<Example::Car>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jint Java_com_examples_shared_1ptr_Car_jCost([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    validateID(id);
    
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->cost();
        
        return result;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarsharedptr([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<Example::Car> jnitocxxsp;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_sp_ptr);

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarSharedPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcar([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_sp_ptr);
    auto& jnitocxxsp = *jnitocxxsp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCar(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarconstsharedptr([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<const Example::Car> jnitocxxsp;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp = *static_cast<std::shared_ptr<const Example::Car>*>(cppbind_obj_sp_ptr);

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarConstSharedPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jMakeconstsharedptr([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<Example::Car> jnitocxxsp;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_sp_ptr);

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->makeConstSharedPtr(jnitocxxsp);
        
        char* type_result = strdup(CPPBIND_EXAMPLE_CAR);
        void* cxxtojniresult_ptr = nullptr;
        CppBindCObject* cppbind_obj_cxxtojniresult = nullptr;
        cxxtojniresult_ptr = new std::shared_ptr<const Example::Car>(result);
        cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarref([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_sp_ptr);
    auto& jnitocxxsp = *jnitocxxsp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarRef(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarptr([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid sp, ...){
    

    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    auto cppbind_obj_sp = reinterpret_cast<CppBindCObject*>(sp);
    auto cppbind_obj_sp_ptr = cppbind_obj_sp ? cppbind_obj_sp->ptr : nullptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_sp_ptr);
    auto jnitocxxsp = jnitocxxsp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jGetnewcarsharedptr([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    
    validateID(id);
    std::shared_ptr<Example::Car> jnitocxxid;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getNewCarSharedPtr();
        
        char* type_result = strdup(CPPBIND_EXAMPLE_CAR);
        void* cxxtojniresult_ptr = nullptr;
        CppBindCObject* cppbind_obj_cxxtojniresult = nullptr;
        cxxtojniresult_ptr = new std::shared_ptr<Example::Car>(result);
        cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_CarUsage_jFinalize(JNIEnv*, jobject, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<Example::CarUsage*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_shared_1ptr_CarUsage_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<Example::CarUsage*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jobjectid car, ...){
    
    std::shared_ptr<Example::Car> jnitocxxcar_shared_ptr;
    auto cppbind_obj_car = reinterpret_cast<CppBindCObject*>(car);
    auto cppbind_obj_car_ptr = cppbind_obj_car ? cppbind_obj_car->ptr : nullptr;
    jnitocxxcar_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(cppbind_obj_car_ptr);
    auto jnitocxxcar = jnitocxxcar_shared_ptr.get();
    try {
        Example::CarUsage* ptr = new Example::CarUsage(jnitocxxcar);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_EXAMPLE_CARUSAGE), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jGetcar([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<Example::CarUsage*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getCar();
        
        std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        char* type_result_shared_ptr = strdup(CPPBIND_EXAMPLE_CAR);
        void* cxxtojniresult_ptr = nullptr;
        CppBindCObject* cppbind_obj_cxxtojniresult = nullptr;
        cxxtojniresult_ptr = new std::shared_ptr<Example::Car>(result_shared_ptr);
        cppbind_obj_cxxtojniresult = new CppBindCObject {type_result_shared_ptr, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_Shared_1ptrKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
