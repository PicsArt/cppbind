/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-12:27.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/shared_ptr/shared_ptr.hpp"

using namespace Example;


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    delete &jni_to_cxx_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jConstructor(JNIEnv* env, jobject obj, jint cost){
    
    try {
        Example::Car* obj_ptr = new Example::Car(cost);
        auto this_object = std::shared_ptr<Example::Car>(obj_ptr);
        return reinterpret_cast<jlong>(new std::shared_ptr<Example::Car>(this_object));
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jint Java_com_examples_shared_1ptr_Car_jCost(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    try {
        const auto& result = jni_to_cxx_id->cost();
        
        return result;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result;
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<Example::Car>& jni_to_cxx_sp = *reinterpret_cast<std::shared_ptr<Example::Car>*>(sp);

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        jni_to_cxx_id->setCostWithCarSharedPtr(jni_to_cxx_sp);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcar(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<Example::Car>& jni_to_cxx_sp_shared_ptr = *reinterpret_cast<std::shared_ptr<Example::Car>*>(sp);
    auto& jni_to_cxx_sp = *jni_to_cxx_sp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        jni_to_cxx_id->setCostWithCar(jni_to_cxx_sp);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarconstsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<const Example::Car>& jni_to_cxx_sp = *reinterpret_cast<std::shared_ptr<const Example::Car>*>(sp);

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        jni_to_cxx_id->setCostWithCarConstSharedPtr(jni_to_cxx_sp);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jMakeconstsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<Example::Car>& jni_to_cxx_sp = *reinterpret_cast<std::shared_ptr<Example::Car>*>(sp);

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        const auto& result = jni_to_cxx_id->makeConstSharedPtr(jni_to_cxx_sp);
        
        jobjectid cxx_to_jni_result;
        cxx_to_jni_result = reinterpret_cast<jlong>(new std::shared_ptr<const Example::Car>(result));
        return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarref(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<Example::Car>& jni_to_cxx_sp_shared_ptr = *reinterpret_cast<std::shared_ptr<Example::Car>*>(sp);
    auto& jni_to_cxx_sp = *jni_to_cxx_sp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        jni_to_cxx_id->setCostWithCarRef(jni_to_cxx_sp);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    std::shared_ptr<Example::Car>& jni_to_cxx_sp_shared_ptr = *reinterpret_cast<std::shared_ptr<Example::Car>*>(sp);
    auto jni_to_cxx_sp = jni_to_cxx_sp_shared_ptr.get();

    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        jni_to_cxx_id->setCostWithCarPtr(jni_to_cxx_sp);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jGetnewcarsharedptr(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    std::shared_ptr<Example::Car>& jni_to_cxx_id = *reinterpret_cast<std::shared_ptr<Example::Car>*>(id);
    
    try {
        const auto& result = jni_to_cxx_id->getNewCarSharedPtr();
        
        jobjectid cxx_to_jni_result;
        cxx_to_jni_result = reinterpret_cast<jlong>(new std::shared_ptr<Example::Car>(result));
        return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_CarUsage_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = reinterpret_cast<Example::CarUsage*>(id);
    delete jni_to_cxx_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jConstructor(JNIEnv* env, jobject obj, jobjectid car){
    
    std::shared_ptr<Example::Car>& jni_to_cxx_car_shared_ptr = *reinterpret_cast<std::shared_ptr<Example::Car>*>(car);
    auto jni_to_cxx_car = jni_to_cxx_car_shared_ptr.get();
    try {
        Example::CarUsage* baseptr = new Example::CarUsage(jni_to_cxx_car);
        return reinterpret_cast<jlong>(baseptr);
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jGetcar(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto jni_to_cxx_id = reinterpret_cast<Example::CarUsage*>(id);
    
    try {
        const auto& result = jni_to_cxx_id->getCar();
        
        std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        jobjectid cxx_to_jni_result;
        cxx_to_jni_result = reinterpret_cast<jlong>(new std::shared_ptr<Example::Car>(result_shared_ptr));
        return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}