/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/24/2022-13:21.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/shared_ptr/shared_ptr.hpp"

using namespace Example;


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    delete static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jConstructor(JNIEnv* env, jobject obj, jint cost){
    
    try {
        Example::Car* obj_ptr = new Example::Car(cost);
        auto this_object = std::shared_ptr<Example::Car>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("Example::Car"), new std::shared_ptr<Example::Car>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jint Java_com_examples_shared_1ptr_Car_jCost(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->cost();
        
        return result;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxsp;
    jnitocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_sp_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarSharedPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcar(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_sp_ptr);
    auto& jnitocxxsp = *jnitocxxsp_shared_ptr.get();

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCar(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarconstsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<const Example::Car> jnitocxxsp;
    jnitocxxsp = *static_cast<std::shared_ptr<const Example::Car>*>(iegen_obj_sp_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarConstSharedPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jMakeconstsharedptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxsp;
    jnitocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_sp_ptr);

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->makeConstSharedPtr(jnitocxxsp);
        
        char* type_result = strdup("Example::Car");
        void* cxxtojniresult_ptr;
        IEGenCObject* iegen_obj_cxxtojniresult;
        cxxtojniresult_ptr = new std::shared_ptr<const Example::Car>(result);
        iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarref(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_sp_ptr);
    auto& jnitocxxsp = *jnitocxxsp_shared_ptr.get();

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarRef(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_Car_jSetcostwithcarptr(JNIEnv* env, jobject obj, jobjectid id, jobjectid sp){
    

    auto iegen_obj_sp = reinterpret_cast<IEGenCObject*>(sp);
    auto iegen_obj_sp_ptr = iegen_obj_sp ? iegen_obj_sp->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxsp_shared_ptr;
    jnitocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_sp_ptr);
    auto jnitocxxsp = jnitocxxsp_shared_ptr.get();

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        jnitocxxid->setCostWithCarPtr(jnitocxxsp);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_Car_jGetnewcarsharedptr(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getNewCarSharedPtr();
        
        char* type_result = strdup("Example::Car");
        void* cxxtojniresult_ptr;
        IEGenCObject* iegen_obj_cxxtojniresult;
        cxxtojniresult_ptr = new std::shared_ptr<Example::Car>(result);
        iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_CarUsage_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<Example::CarUsage*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jConstructor(JNIEnv* env, jobject obj, jobjectid car){
    
    auto iegen_obj_car = reinterpret_cast<IEGenCObject*>(car);
    auto iegen_obj_car_ptr = iegen_obj_car ? iegen_obj_car->ptr : nullptr;
    std::shared_ptr<Example::Car> jnitocxxcar_shared_ptr;
    jnitocxxcar_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(iegen_obj_car_ptr);
    auto jnitocxxcar = jnitocxxcar_shared_ptr.get();
    try {
        Example::CarUsage* ptr = new Example::CarUsage(jnitocxxcar);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("Example::CarUsage"), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_CarUsage_jGetcar(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<Example::CarUsage*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getCar();
        
        std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        char* type_result_shared_ptr = strdup("Example::Car");
        void* cxxtojniresult_ptr;
        IEGenCObject* iegen_obj_cxxtojniresult;
        cxxtojniresult_ptr = new std::shared_ptr<Example::Car>(result_shared_ptr);
        iegen_obj_cxxtojniresult = new IEGenCObject {type_result_shared_ptr, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_Shared_1ptrKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
