/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/21/2022-12:23.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/shared_ptr/shared_ptr_symbol.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_SignSharedImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, "iegen::example::SignShared") == 0)
        delete static_cast<std::shared_ptr<iegen::example::SignShared>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, "iegen::example::DigitShared") == 0)
        delete static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_SignSharedImpl_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::SignShared* obj_ptr = new iegen::example::SignShared();
        auto this_object = std::shared_ptr<iegen::example::SignShared>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::SignShared"), new std::shared_ptr<iegen::example::SignShared>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_ISignSharedHelper_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::SignShared> jnitocxxid;
    if (strcmp(iegen_obj_id->type, "iegen::example::SignShared") == 0)
        jnitocxxid = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, "iegen::example::DigitShared") == 0)
        jnitocxxid = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_TextShared_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, "iegen::example::TextShared") == 0)
        delete static_cast<std::shared_ptr<iegen::example::TextShared>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, "iegen::example::DigitShared") == 0)
        delete static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_TextShared_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::TextShared* obj_ptr = new iegen::example::TextShared();
        auto this_object = std::shared_ptr<iegen::example::TextShared>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::TextShared"), new std::shared_ptr<iegen::example::TextShared>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_TextShared_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::TextShared> jnitocxxid;
    if (strcmp(iegen_obj_id->type, "iegen::example::TextShared") == 0)
        jnitocxxid = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, "iegen::example::DigitShared") == 0)
        jnitocxxid = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_DigitShared_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::DigitShared* obj_ptr = new iegen::example::DigitShared();
        auto this_object = std::shared_ptr<iegen::example::DigitShared>(obj_ptr);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::DigitShared"), new std::shared_ptr<iegen::example::DigitShared>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_DigitShared_jTypename(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    std::shared_ptr<iegen::example::DigitShared> jnitocxxid;
    jnitocxxid = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->typeName();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_shared_1ptr_SymbolUsageShared_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_SymbolUsageShared_jConstructor(JNIEnv* env, jobject obj){
    try {
        iegen::example::SymbolUsageShared* ptr = new iegen::example::SymbolUsageShared();
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::SymbolUsageShared"), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_SymbolUsageShared_jConstructor_11(JNIEnv* env, jobject obj, jobjectid d){
    
    auto iegen_obj_d = reinterpret_cast<IEGenCObject*>(d);
    auto iegen_obj_d_ptr = iegen_obj_d ? iegen_obj_d->ptr : nullptr;
    std::shared_ptr<iegen::example::DigitShared> jnitocxxd;
    jnitocxxd = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_d_ptr);
    try {
        iegen::example::SymbolUsageShared* ptr = new iegen::example::SymbolUsageShared(jnitocxxd);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::SymbolUsageShared"), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_SymbolUsageShared_jGettexttype(JNIEnv* env, jobject obj, jobjectid id, jobjectid t){
    

    auto iegen_obj_t = reinterpret_cast<IEGenCObject*>(t);
    auto iegen_obj_t_ptr = iegen_obj_t ? iegen_obj_t->ptr : nullptr;
    std::shared_ptr<iegen::example::TextShared> jnitocxxt;
    if (strcmp(iegen_obj_t->type, "iegen::example::TextShared") == 0)
        jnitocxxt = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(iegen_obj_t_ptr);
    else if (strcmp(iegen_obj_t->type, "iegen::example::DigitShared") == 0)
        jnitocxxt = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_t_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_t->type << std::endl;
        exit(1);
    }

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getTextType(jnitocxxt);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_SymbolUsageShared_jGetsigntype(JNIEnv* env, jobject obj, jobjectid id, jobjectid s){
    

    auto iegen_obj_s = reinterpret_cast<IEGenCObject*>(s);
    auto iegen_obj_s_ptr = iegen_obj_s ? iegen_obj_s->ptr : nullptr;
    std::shared_ptr<iegen::example::SignShared> jnitocxxs;
    if (strcmp(iegen_obj_s->type, "iegen::example::SignShared") == 0)
        jnitocxxs = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(iegen_obj_s_ptr);
    else if (strcmp(iegen_obj_s->type, "iegen::example::DigitShared") == 0)
        jnitocxxs = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_s_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_s->type << std::endl;
        exit(1);
    }

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getSignType(jnitocxxs);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_shared_1ptr_SymbolUsageShared_jGettextid(JNIEnv* env, jobject obj, jobjectid id, jobjectid t){
    

    auto iegen_obj_t = reinterpret_cast<IEGenCObject*>(t);
    auto iegen_obj_t_ptr = iegen_obj_t ? iegen_obj_t->ptr : nullptr;
    std::shared_ptr<iegen::example::TextShared> jnitocxxt;
    if (strcmp(iegen_obj_t->type, "iegen::example::TextShared") == 0)
        jnitocxxt = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(iegen_obj_t_ptr);
    else if (strcmp(iegen_obj_t->type, "iegen::example::DigitShared") == 0)
        jnitocxxt = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_t_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_t->type << std::endl;
        exit(1);
    }

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getTextId(jnitocxxt);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result;
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_shared_1ptr_SymbolUsageShared_jGetsignid(JNIEnv* env, jobject obj, jobjectid id, jobjectid s){
    

    auto iegen_obj_s = reinterpret_cast<IEGenCObject*>(s);
    auto iegen_obj_s_ptr = iegen_obj_s ? iegen_obj_s->ptr : nullptr;
    std::shared_ptr<iegen::example::SignShared> jnitocxxs;
    if (strcmp(iegen_obj_s->type, "iegen::example::SignShared") == 0)
        jnitocxxs = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(iegen_obj_s_ptr);
    else if (strcmp(iegen_obj_s->type, "iegen::example::DigitShared") == 0)
        jnitocxxs = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(iegen_obj_s_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_s->type << std::endl;
        exit(1);
    }

    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getSignId(jnitocxxs);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result;
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_SymbolUsageShared_jGettextptr(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getTextPtr();
        
        char* type_result = nullptr;
        void* cxxtojniresult_ptr;
        IEGenCObject* iegen_obj_cxxtojniresult;

        auto& arg_pointee_result = *result.get();
        const char* name_result = typeid(arg_pointee_result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::TextShared");
        }
        cxxtojniresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result));
        iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_shared_1ptr_SymbolUsageShared_jGetsignptr(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::SymbolUsageShared*>(iegen_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getSignPtr();
        
        char* type_result = nullptr;
        void* cxxtojniresult_ptr;
        IEGenCObject* iegen_obj_cxxtojniresult;

        auto& arg_pointee_result = *result.get();
        const char* name_result = typeid(arg_pointee_result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::SignShared");
        }
        cxxtojniresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result));
        iegen_obj_cxxtojniresult = new IEGenCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_shared_1ptr_Shared_1ptr_1symbolKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
