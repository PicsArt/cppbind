/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/06/2021-12:11.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/simple/root.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_simple_Root_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::Root*>(id);
    delete jni_to_cxx_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_simple_Root_jConstructor(JNIEnv* env, jobject obj, jstring _path){
    jstring jjni_to_cxx__pathStr = (jstring)_path;
    auto jni_to_cxx__path_cstr = env->GetStringUTFChars(jjni_to_cxx__pathStr, 0);
    std::string jni_to_cxx__path = jni_to_cxx__path_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx__pathStr, jni_to_cxx__path_cstr);
    try {
        iegen::example::Root* baseptr = new iegen::example::Root(jni_to_cxx__path);
        return reinterpret_cast<jlong>(baseptr);
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_simple_Root_jUpdatepath(JNIEnv* env, jobject obj, jobjectid id, jstring _path){
    
    jstring jjni_to_cxx__pathStr = (jstring)_path;
    auto jni_to_cxx__path_cstr = env->GetStringUTFChars(jjni_to_cxx__pathStr, 0);
    std::string jni_to_cxx__path = jni_to_cxx__path_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx__pathStr, jni_to_cxx__path_cstr);

    validateID(id);
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::Root*>(id);
    
    try {
        jni_to_cxx_id->setPath(jni_to_cxx__path);
        return;
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}
extern "C" JNIEXPORT jstring Java_com_examples_simple_Root_jPath(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::Root*>(id);
    const auto& result = jni_to_cxx_id->path;
    jstring cxx_to_jni_result = env->NewStringUTF(result.data());
    return cxx_to_jni_result;
}

extern "C" JNIEXPORT void Java_com_examples_simple_Root_jSetpath(JNIEnv* env, jobject obj, jobjectid id, jstring value){
    validateID(id);
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::Root*>(id);
    
    jstring jjni_to_cxx_valueStr = (jstring)value;
    auto jni_to_cxx_value_cstr = env->GetStringUTFChars(jjni_to_cxx_valueStr, 0);
    std::string jni_to_cxx_value = jni_to_cxx_value_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_valueStr, jni_to_cxx_value_cstr);
    jni_to_cxx_id->path = jni_to_cxx_value;
}
