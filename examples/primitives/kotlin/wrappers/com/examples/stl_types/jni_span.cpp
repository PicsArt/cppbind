/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/27/2022-17:28.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/stl_types/span.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;


extern "C" JNIEXPORT jint Java_com_examples_stl_1types_SpanKt_jSumspan(JNIEnv* env, jclass, jintArray items, ...){
    using namespace cppbind::example;
    

    std::vector<int> jnitocxxitemsVector;
    auto _jnitocxxitemsVector = cppbind::getIntArray(env, items);
    for (auto& value__jnitocxxitemsVector : _jnitocxxitemsVector) {
        
        jnitocxxitemsVector.emplace_back(value__jnitocxxitemsVector);
    }
    std::span<int> jnitocxxitems(jnitocxxitemsVector);
    
    try {
        decltype(auto) result = cppbind::example::sumSpan(jnitocxxitems);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}

extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_SpanKt_jGetspan(JNIEnv* env, jclass, jintArray items, ...){
    using namespace cppbind::example;
    

    std::vector<int> jnitocxxitemsVector;
    auto _jnitocxxitemsVector = cppbind::getIntArray(env, items);
    for (auto& value__jnitocxxitemsVector : _jnitocxxitemsVector) {
        
        jnitocxxitemsVector.emplace_back(value__jnitocxxitemsVector);
    }
    std::span<int> jnitocxxitems(jnitocxxitemsVector);
    
    try {
        decltype(auto) result = cppbind::example::getSpan(jnitocxxitems);
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_SpanKt_jGetspan2(JNIEnv* env, jclass, jintArray items, ...){
    using namespace cppbind::example;
    

    std::vector<int> jnitocxxitemsVector;
    auto _jnitocxxitemsVector = cppbind::getIntArray(env, items);
    for (auto& value__jnitocxxitemsVector : _jnitocxxitemsVector) {
        
        jnitocxxitemsVector.emplace_back(value__jnitocxxitemsVector);
    }
    std::span<int, 2> jnitocxxitems(jnitocxxitemsVector);
    
    try {
        decltype(auto) result = cppbind::example::getSpan2(jnitocxxitems);
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_stl_1types_SpanKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
