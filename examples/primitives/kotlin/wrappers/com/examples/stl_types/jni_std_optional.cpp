/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/09/2022-12:44.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/stl_types/std_optional.hpp"
#include "cxx/enums/color.hpp"
#include "cxx/enums/frame.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_FRAME;

const char* CPPBIND_CPPBIND_EXAMPLE_FRAMEUSAGE = "cppbind::example::FrameUsage";

using namespace cppbind::example;


extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_Std_1optionalKt_jMulInt(JNIEnv* env, jclass, jintArray a, jint b, ...){
    
    std::optional<int> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getIntArray(env, a)[0];
        
        jnitocxxa = std::optional<int>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mul<int>(jnitocxxa, b);
        
        jintArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewIntArray(1);
            auto result_value = result.value();
            
            env->SetIntArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jfloatArray Java_com_examples_stl_1types_Std_1optionalKt_jMulFloat(JNIEnv* env, jclass, jfloatArray a, jfloat b, ...){
    
    std::optional<float> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getFloatArray(env, a)[0];
        
        jnitocxxa = std::optional<float>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mul<float>(jnitocxxa, b);
        
        jfloatArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewFloatArray(1);
            auto result_value = result.value();
            
            env->SetFloatArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloatArray result {};
    return result;
}

extern "C" JNIEXPORT jdoubleArray Java_com_examples_stl_1types_Std_1optionalKt_jMulDouble(JNIEnv* env, jclass, jdoubleArray a, jdouble b, ...){
    
    std::optional<double> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getDoubleArray(env, a)[0];
        
        jnitocxxa = std::optional<double>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mul<double>(jnitocxxa, b);
        
        jdoubleArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewDoubleArray(1);
            auto result_value = result.value();
            
            env->SetDoubleArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jdoubleArray result {};
    return result;
}

extern "C" JNIEXPORT jshortArray Java_com_examples_stl_1types_Std_1optionalKt_jMulShort(JNIEnv* env, jclass, jshortArray a, jshort b, ...){
    
    std::optional<short> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getShortArray(env, a)[0];
        
        jnitocxxa = std::optional<short>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mul<short>(jnitocxxa, b);
        
        jshortArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewShortArray(1);
            auto result_value = result.value();
            
            env->SetShortArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jshortArray result {};
    return result;
}

extern "C" JNIEXPORT jlongArray Java_com_examples_stl_1types_Std_1optionalKt_jMullong(JNIEnv* env, jclass, jlongArray a, jlong b, ...){
    
    std::optional<long> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getLongArray(env, a)[0];
        
        jnitocxxa = std::optional<long>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mulLong(jnitocxxa, b);
        
        jlongArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlongArray result {};
    return result;
}

extern "C" JNIEXPORT jbooleanArray Java_com_examples_stl_1types_Std_1optionalKt_jReversebool(JNIEnv* env, jclass, jbooleanArray a, ...){
    
    std::optional<bool> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getBooleanArray(env, a)[0];
        
        jnitocxxa = std::optional<bool>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::reverseBool(jnitocxxa);
        
        jbooleanArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewBooleanArray(1);
            auto result_value = result.value();
            jboolean cxxtojniresult_value = result_value;
            env->SetBooleanArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jbooleanArray result {};
    return result;
}

extern "C" JNIEXPORT jlongArray Java_com_examples_stl_1types_Std_1optionalKt_jMulunsignedint(JNIEnv* env, jclass, jlongArray a, jlong b, ...){
    
    std::optional<unsigned int> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getLongArray(env, a)[0];
        
        jnitocxxa = std::optional<unsigned int>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mulUnsignedInt(jnitocxxa, b);
        
        jlongArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            jlong cxxtojniresult_value = result_value;
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlongArray result {};
    return result;
}

extern "C" JNIEXPORT jlongArray Java_com_examples_stl_1types_Std_1optionalKt_jMulunsignedlong(JNIEnv* env, jclass, jlongArray a, jlong b, ...){
    
    std::optional<unsigned long> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getLongArray(env, a)[0];
        
        jnitocxxa = std::optional<unsigned long>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mulUnsignedLong(jnitocxxa, b);
        
        jlongArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            jlong cxxtojniresult_value = result_value;
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlongArray result {};
    return result;
}

extern "C" JNIEXPORT jlongArray Java_com_examples_stl_1types_Std_1optionalKt_jMullonglong(JNIEnv* env, jclass, jlongArray a, jlong b, ...){
    
    std::optional<long long> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getLongArray(env, a)[0];
        
        jnitocxxa = std::optional<long long>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::mulLongLong(jnitocxxa, b);
        
        jlongArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            jlong cxxtojniresult_value = result_value;
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jlongArray result {};
    return result;
}

extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_Std_1optionalKt_jMulunsignedchar(JNIEnv* env, jclass, jintArray a, jint b, ...){
    
    std::optional<unsigned char> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getIntArray(env, a)[0];
        unsigned char jnitocxx_jnitocxxa = static_cast<unsigned char>(_jnitocxxa);
        jnitocxxa = std::optional<unsigned char>(jnitocxx_jnitocxxa);
    }

    unsigned char jnitocxxb = static_cast<unsigned char>(b);
    
    try {
        const auto& result = cppbind::example::mulUnsignedChar(jnitocxxa, jnitocxxb);
        
        jintArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewIntArray(1);
            auto result_value = result.value();
            jint cxxtojniresult_value = result_value;
            env->SetIntArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jcharArray Java_com_examples_stl_1types_Std_1optionalKt_jChartoupper(JNIEnv* env, jclass, jcharArray a, ...){
    
    std::optional<char> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getCharArray(env, a)[0];
        char jnitocxx_jnitocxxa = static_cast<char>(_jnitocxxa);
        jnitocxxa = std::optional<char>(jnitocxx_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::charToUpper(jnitocxxa);
        
        jcharArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewCharArray(1);
            auto result_value = result.value();
            jchar cxxtojniresult_value = static_cast<jbyte>(result_value);
            env->SetCharArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jcharArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_stl_1types_Std_1optionalKt_jConcatstring(JNIEnv* env, jclass, jstring first, jstring second, ...){
    
    std::optional<std::string> jnitocxxfirst {std::nullopt};

    if(first){
        auto _first = cppbind::extractObject(env, first);
        jstring jjnitocxx_firstStr = static_cast<jstring>(_first);
        auto jnitocxx_first_cstr = env->GetStringUTFChars(jjnitocxx_firstStr, 0);
        std::string jnitocxx_first = jnitocxx_first_cstr;
        env->ReleaseStringUTFChars(jjnitocxx_firstStr, jnitocxx_first_cstr);
        jnitocxxfirst = std::optional<std::string>(jnitocxx_first);
    }

    jstring jjnitocxxsecondStr = static_cast<jstring>(second);
    auto jnitocxxsecond_cstr = env->GetStringUTFChars(jjnitocxxsecondStr, 0);
    std::string jnitocxxsecond = jnitocxxsecond_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecondStr, jnitocxxsecond_cstr);
    
    try {
        const auto& result = cppbind::example::concatString(jnitocxxfirst, jnitocxxsecond);
        
        jstring cxxtojniresult = nullptr;
        if (result) {
            auto _result = result.value();
            jstring cxxtojni_result = env->NewStringUTF(_result.data());
            cxxtojniresult = cxxtojni_result;
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jobjectArray Java_com_examples_stl_1types_Std_1optionalKt_jConcat(JNIEnv* env, jclass, jobjectArray v, jstring s, ...){
    
    std::optional<std::vector<std::string>> jnitocxxv {std::nullopt};

    if(v){
        auto _v = cppbind::extractObject(env, v);
        
        std::vector<std::string> jnitocxx_v;
        auto _jnitocxx_v = cppbind::getObjectArray(env, _v);
        for (auto& value__jnitocxx_v : _jnitocxx_v) {
            jstring jjnitocxxvalue__jnitocxx_vStr = static_cast<jstring>(value__jnitocxx_v);
            auto jnitocxxvalue__jnitocxx_v_cstr = env->GetStringUTFChars(jjnitocxxvalue__jnitocxx_vStr, 0);
            std::string jnitocxxvalue__jnitocxx_v = jnitocxxvalue__jnitocxx_v_cstr;
            env->ReleaseStringUTFChars(jjnitocxxvalue__jnitocxx_vStr, jnitocxxvalue__jnitocxx_v_cstr);
            jnitocxx_v.emplace_back(jnitocxxvalue__jnitocxx_v);
        }
        jnitocxxv = std::optional<std::vector<std::string>>(jnitocxx_v);
    }

    jstring jjnitocxxsStr = static_cast<jstring>(s);
    auto jnitocxxs_cstr = env->GetStringUTFChars(jjnitocxxsStr, 0);
    std::string jnitocxxs = jnitocxxs_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsStr, jnitocxxs_cstr);
    
    try {
        const auto& result = cppbind::example::concat(jnitocxxv, jnitocxxs);
        
        jobjectArray cxxtojniresult = nullptr;
        if (result) {
            auto _result = result.value();
            
            jobjectArray cxxtojni_result = env->NewObjectArray(_result.size(), env->FindClass("java/lang/Object"), NULL);
            size_t index__result = 0;
            for (auto& value__result : _result) {
                jstring cxxtojnivalue__result = env->NewStringUTF(value__result.data());
                env->SetObjectArrayElement(cxxtojni_result, index__result, cxxtojnivalue__result);
                ++index__result ;
            }
            cxxtojniresult = cxxtojni_result;
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectArray result {};
    return result;
}

extern "C" JNIEXPORT jobjectArray Java_com_examples_stl_1types_Std_1optionalKt_jConcat2(JNIEnv* env, jclass, jobjectArray v, jstring s, ...){
    

    std::vector<std::optional<std::string>> jnitocxxv;
    auto _jnitocxxv = cppbind::getObjectArray(env, v);
    for (auto& value__jnitocxxv : _jnitocxxv) {
        std::optional<std::string> jnitocxxvalue__jnitocxxv {std::nullopt};

        if(value__jnitocxxv){
            auto _value__jnitocxxv = cppbind::extractObject(env, value__jnitocxxv);
            jstring jjnitocxx_value__jnitocxxvStr = static_cast<jstring>(_value__jnitocxxv);
            auto jnitocxx_value__jnitocxxv_cstr = env->GetStringUTFChars(jjnitocxx_value__jnitocxxvStr, 0);
            std::string jnitocxx_value__jnitocxxv = jnitocxx_value__jnitocxxv_cstr;
            env->ReleaseStringUTFChars(jjnitocxx_value__jnitocxxvStr, jnitocxx_value__jnitocxxv_cstr);
            jnitocxxvalue__jnitocxxv = std::optional<std::string>(jnitocxx_value__jnitocxxv);
        }

        jnitocxxv.emplace_back(jnitocxxvalue__jnitocxxv);
    }
    jstring jjnitocxxsStr = static_cast<jstring>(s);
    auto jnitocxxs_cstr = env->GetStringUTFChars(jjnitocxxsStr, 0);
    std::string jnitocxxs = jnitocxxs_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsStr, jnitocxxs_cstr);
    
    try {
        const auto& result = cppbind::example::concat2(jnitocxxv, jnitocxxs);
        
        jobjectArray cxxtojniresult = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            jstring cxxtojnivalue_result = nullptr;
            if (value_result) {
                auto _value_result = value_result.value();
                jstring cxxtojni_value_result = env->NewStringUTF(_value_result.data());
                cxxtojnivalue_result = cxxtojni_value_result;
            }

            env->SetObjectArrayElement(cxxtojniresult, index_result, cxxtojnivalue_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectArray result {};
    return result;
}

extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_Std_1optionalKt_jSamecolor(JNIEnv* env, jclass, jintArray color, ...){
    
    std::optional<cppbind::example::Color> jnitocxxcolor {std::nullopt};
    if(color){
        auto _jnitocxxcolor = cppbind::getIntArray(env, color)[0];
        auto jnitocxx_jnitocxxcolor = static_cast<cppbind::example::Color>(_jnitocxxcolor);
        jnitocxxcolor = std::optional<cppbind::example::Color>(jnitocxx_jnitocxxcolor);
    }

    
    try {
        const auto& result = cppbind::example::sameColor(jnitocxxcolor);
        
        jintArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewIntArray(1);
            auto result_value = result.value();
            jint cxxtojniresult_value = static_cast<jint>(result_value);
            env->SetIntArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jintArray Java_com_examples_stl_1types_Std_1optionalKt_jSame_1templateOptionalInt(JNIEnv* env, jclass, jintArray a, ...){
    
    std::optional<int> jnitocxxa {std::nullopt};
    if(a){
        auto _jnitocxxa = cppbind::getIntArray(env, a)[0];
        
        jnitocxxa = std::optional<int>(_jnitocxxa);
    }

    
    try {
        const auto& result = cppbind::example::same_template<std::optional<int>>(jnitocxxa);
        
        jintArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewIntArray(1);
            auto result_value = result.value();
            
            env->SetIntArrayRegion(cxxtojniresult, 0, 1, &result_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_stl_1types_Std_1optionalKt_jSame_1templateOptionalString(JNIEnv* env, jclass, jstring a, ...){
    
    std::optional<std::string> jnitocxxa {std::nullopt};

    if(a){
        auto _a = cppbind::extractObject(env, a);
        jstring jjnitocxx_aStr = static_cast<jstring>(_a);
        auto jnitocxx_a_cstr = env->GetStringUTFChars(jjnitocxx_aStr, 0);
        std::string jnitocxx_a = jnitocxx_a_cstr;
        env->ReleaseStringUTFChars(jjnitocxx_aStr, jnitocxx_a_cstr);
        jnitocxxa = std::optional<std::string>(jnitocxx_a);
    }

    
    try {
        const auto& result = cppbind::example::same_template<std::optional<std::string>>(jnitocxxa);
        
        jstring cxxtojniresult = nullptr;
        if (result) {
            auto _result = result.value();
            jstring cxxtojni_result = env->NewStringUTF(_result.data());
            cxxtojniresult = cxxtojni_result;
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}

extern "C" JNIEXPORT jobject Java_com_examples_stl_1types_Std_1optionalKt_jSamepair(JNIEnv* env, jclass, jobject pair, ...){
    
    std::optional<std::pair<int, int>> jnitocxxpair {std::nullopt};

    if(pair){
        auto _pair = cppbind::extractObject(env, pair);
        jclass pairClass__pair = env->FindClass("kotlin/Pair");

        jfieldID firstID__pair = env->GetFieldID(pairClass__pair, "first", "Ljava/lang/Object;");
        jfieldID secondID__pair = env->GetFieldID(pairClass__pair, "second", "Ljava/lang/Object;");

        auto firstObject__pair = env->GetObjectField(_pair, firstID__pair);
        auto secondObject__pair = env->GetObjectField(_pair, secondID__pair);
        auto first__pair = cppbind::extractInt(env, firstObject__pair);
        auto second__pair = cppbind::extractInt(env, secondObject__pair);


        std::pair<int, int> jnitocxx_pair = std::make_pair(first__pair, second__pair);
        jnitocxxpair = std::optional<std::pair<int, int>>(jnitocxx_pair);
    }

    
    try {
        const auto& result = cppbind::example::samePair(jnitocxxpair);
        
        jobject cxxtojniresult = nullptr;
        if (result) {
            auto _result = result.value();
            auto first__result = _result.first;
            auto second__result = _result.second;


            jobject first__result_obj = cppbind::intToObject(env, first__result);
            jobject second__result_obj = cppbind::intToObject(env, second__result);
            jobject cxxtojni_result = cppbind::make_jni_object_pair(env, first__result_obj, second__result_obj);
            cxxtojniresult = cxxtojni_result;
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}

extern "C" JNIEXPORT jmapobject Java_com_examples_stl_1types_Std_1optionalKt_jSamemap(JNIEnv* env, jclass, jmapobject map, ...){
    
    std::optional<std::map<int, int>> jnitocxxmap {std::nullopt};

    if(map){
        auto _map = cppbind::extractObject(env, map);
        
        std::map<int, int> jnitocxx_map;
        auto _jnitocxx_map = cppbind::extract_jni_pair(env, _map);
        auto tmp_key_jnitocxx_map = cppbind::getIntArray(env, _jnitocxx_map.first);
        auto tmp_val_jnitocxx_map = cppbind::getIntArray(env, _jnitocxx_map.second);
        for (size_t i = 0; i < tmp_key_jnitocxx_map.size(); ++i) {
            auto ktmp__map = tmp_key_jnitocxx_map[i];
            auto vtmp__map = tmp_val_jnitocxx_map[i];
            
            
            jnitocxx_map.insert({ ktmp__map, vtmp__map });
        }
        jnitocxxmap = std::optional<std::map<int, int>>(jnitocxx_map);
    }

    
    try {
        const auto& result = cppbind::example::sameMap(jnitocxxmap);
        
        jmapobject cxxtojniresult = nullptr;
        if (result) {
            auto _result = result.value();
            
            auto tmp_key_cxxtojni_result = env->NewIntArray(_result.size());
            auto tmp_val_cxxtojni_result = env->NewIntArray(_result.size());
            size_t index__result  = 0;
            for (auto& value__result : _result) {
                auto key__result = value__result.first;
                auto val__result = value__result.second;
                
                env->SetIntArrayRegion(tmp_key_cxxtojni_result, index__result, 1, &key__result);
                
                env->SetIntArrayRegion(tmp_val_cxxtojni_result, index__result, 1, &val__result);
                ++index__result;
            }
            jmapobject cxxtojni_result = cppbind::make_jni_object_pair(env, tmp_key_cxxtojni_result, tmp_val_cxxtojni_result);
            cxxtojniresult = cxxtojni_result;
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jmapobject result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_stl_1types_FrameUsage_jFinalize(JNIEnv*, jobject, jobjectid id){
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::FrameUsage*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_stl_1types_FrameUsage_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::FrameUsage*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_stl_1types_FrameUsage_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    try {
        cppbind::example::FrameUsage* this_object = new cppbind::example::FrameUsage();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_FRAMEUSAGE), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectidArray Java_com_examples_stl_1types_FrameUsage_jSameframe([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectidArray frame, ...){
    
    std::optional<cppbind::example::Frame> jnitocxxframe {std::nullopt};
    if(frame){
        auto _jnitocxxframe = cppbind::getLongArray(env, frame)[0];
        
        auto cppbind_obj__jnitocxxframe = reinterpret_cast<CppBindCObject*>(_jnitocxxframe);
        auto cppbind_obj__jnitocxxframe_ptr = cppbind_obj__jnitocxxframe ? cppbind_obj__jnitocxxframe->ptr : nullptr;
        auto& jnitocxx_jnitocxxframe = *static_cast<cppbind::example::Frame*>(cppbind_obj__jnitocxxframe_ptr);
        jnitocxxframe = std::optional<cppbind::example::Frame>(jnitocxx_jnitocxxframe);
    }


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::FrameUsage*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->sameFrame(jnitocxxframe);
        
        jobjectidArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            cppbind::example::Frame* cxxtojniresult_value_ptr = const_cast<cppbind::example::Frame*>(new cppbind::example::Frame(result_value));
            char* type_result_value = strdup(CPPBIND_CPPBIND_EXAMPLE_FRAME);
            CppBindCObject* cppbind_obj_cxxtojniresult_value = new CppBindCObject {type_result_value, cxxtojniresult_value_ptr};
            jobjectid cxxtojniresult_value = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult_value);
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectidArray result {};
    return result;
}


extern "C" JNIEXPORT jobjectidArray Java_com_examples_stl_1types_FrameUsage_jGetframe([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::FrameUsage*>(cppbind_obj_id_ptr);
    
    try {
        const auto& result = jnitocxxid->getFrame();
        
        jobjectidArray cxxtojniresult = nullptr;
        if (result) {
            cxxtojniresult = env->NewLongArray(1);
            auto result_value = result.value();
            cppbind::example::Frame* cxxtojniresult_value_ptr = const_cast<cppbind::example::Frame*>(new cppbind::example::Frame(result_value));
            char* type_result_value = strdup(CPPBIND_CPPBIND_EXAMPLE_FRAME);
            CppBindCObject* cppbind_obj_cxxtojniresult_value = new CppBindCObject {type_result_value, cxxtojniresult_value_ptr};
            jobjectid cxxtojniresult_value = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult_value);
            env->SetLongArrayRegion(cxxtojniresult, 0, 1, &cxxtojniresult_value);
        }

        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectidArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_stl_1types_Std_1optionalKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
