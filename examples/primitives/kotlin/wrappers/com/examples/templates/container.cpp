/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/24/2022-13:21.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/templates/container.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_templates_ContainerImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    static_assert(std::has_virtual_destructor<iegen::example::Container>::value, "iegen::example::Container type must have virtual destructor");
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    iegen::example::Container* jnitocxxid = nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, "iegen::example::Container") == 0)
            jnitocxxid = static_cast<iegen::example::Container*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, "iegen::example::Stack<iegen::example::Project>") == 0)
            jnitocxxid = static_cast<iegen::example::Stack<iegen::example::Project>*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, "iegen::example::Stack<iegen::example::Task>") == 0)
            jnitocxxid = static_cast<iegen::example::Stack<iegen::example::Task>*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, "iegen::example::Stack<iegen::example::Number<int>>") == 0)
            jnitocxxid = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT void Java_com_examples_templates_ContainerHolder_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::ContainerHolder*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ContainerHolder_jConstructor(JNIEnv* env, jobject obj, jobjectid container){
    
    auto iegen_obj_container = reinterpret_cast<IEGenCObject*>(container);
    auto iegen_obj_container_ptr = iegen_obj_container ? iegen_obj_container->ptr : nullptr;
    iegen::example::Container* jnitocxxcontainer = nullptr;
    if (iegen_obj_container_ptr) {
        if (strcmp(iegen_obj_container->type, "iegen::example::Container") == 0)
            jnitocxxcontainer = static_cast<iegen::example::Container*>(iegen_obj_container_ptr);
        else if (strcmp(iegen_obj_container->type, "iegen::example::Stack<iegen::example::Project>") == 0)
            jnitocxxcontainer = static_cast<iegen::example::Stack<iegen::example::Project>*>(iegen_obj_container_ptr);
        else if (strcmp(iegen_obj_container->type, "iegen::example::Stack<iegen::example::Task>") == 0)
            jnitocxxcontainer = static_cast<iegen::example::Stack<iegen::example::Task>*>(iegen_obj_container_ptr);
        else if (strcmp(iegen_obj_container->type, "iegen::example::Stack<iegen::example::Number<int>>") == 0)
            jnitocxxcontainer = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(iegen_obj_container_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_container->type << std::endl;
            exit(1);
        }
    }
    try {
        iegen::example::ContainerHolder* ptr = new iegen::example::ContainerHolder(jnitocxxcontainer);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::ContainerHolder"), ptr});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ContainerHolder_jContainer(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<iegen::example::ContainerHolder*>(iegen_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->container();
        iegen::example::Container* cxxtojniresult_ptr = const_cast<iegen::example::Container*>(result);
        char* type_result = nullptr;
        const char* name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Container");
        }
        IEGenCObject* iegen_obj_cxxtojniresult = new IEGenCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(iegen_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_ContainerKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
