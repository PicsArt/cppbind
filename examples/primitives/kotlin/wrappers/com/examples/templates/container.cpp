/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/01/2021-15:01.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/templates/container.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_templates_ContainerImpl_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::Container*>(id);
    delete jni_to_cxx_id;
}

extern "C" JNIEXPORT void Java_com_examples_templates_ContainerHolder_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::ContainerHolder*>(id);
    delete jni_to_cxx_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ContainerHolder_jConstructor(JNIEnv* env, jobject obj, jobjectid container){
    
    auto jni_to_cxx_container = reinterpret_cast<iegen::example::Container*>(container);
    iegen::example::ContainerHolder* baseptr = new iegen::example::ContainerHolder(jni_to_cxx_container);
    return reinterpret_cast<jlong>(baseptr);
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ContainerHolder_jContainer(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto jni_to_cxx_id = reinterpret_cast<iegen::example::ContainerHolder*>(id);
    try {
        const auto& result = jni_to_cxx_id->container();
        
        iegen::example::Container* cxx_to_jni_result_baseptr = const_cast<iegen::example::Container*>(result);
        jobjectid cxx_to_jni_result = reinterpret_cast<jlong>(cxx_to_jni_result_baseptr);
        return cxx_to_jni_result;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result;
    return result;
}