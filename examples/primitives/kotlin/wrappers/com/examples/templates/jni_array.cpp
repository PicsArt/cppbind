/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:33.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/array.hpp"
#include <algorithm>

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2 = "cppbind::example::Array<float, 2>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3 = "cppbind::example::Array<float, 3>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2 = "cppbind::example::Array<int, 2>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3 = "cppbind::example::Array<int, 3>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAY3 = "cppbind::example::Array3";


extern "C" JNIEXPORT void Java_com_examples_templates_ArrayFloat2_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_ArrayFloat2_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat2_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jobjectid array, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_array = reinterpret_cast<CppBindCObject*>(array);
    auto cppbind_obj_array_ptr = cppbind_obj_array ? cppbind_obj_array->ptr : nullptr;
    auto& jnitocxxarray = *static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_array_ptr);
    try {
        cppbind::example::Array<float, 2>* this_object = new cppbind::example::Array<float, 2>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat2_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jfloatArray array, ...){
    using namespace cppbind::example;
    
    std::vector<float> _jnitocxxarray;
    auto __jnitocxxarray = cppbind::getFloatArray(env, array);
    for (auto& value___jnitocxxarray : __jnitocxxarray) {
        
        _jnitocxxarray.emplace_back(value___jnitocxxarray);
    }
    std::array<float, 2> jnitocxxarray {};
    std::copy_n(std::make_move_iterator(_jnitocxxarray.begin()), 2, jnitocxxarray.begin());
    try {
        cppbind::example::Array<float, 2>* this_object = new cppbind::example::Array<float, 2>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jfloat Java_com_examples_templates_ArrayFloat2_jGet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator[](idx);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_ArrayFloat2_jSet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, jfloat value, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->operator[](idx) = value;
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat2_jPlus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator+(jnitocxxrhs);
        cppbind::example::Array<float, 2>* cxxtojniresult_ptr = new cppbind::example::Array<float, 2>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat2_jMinus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator-(jnitocxxrhs);
        cppbind::example::Array<float, 2>* cxxtojniresult_ptr = new cppbind::example::Array<float, 2>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_ArrayFloat2_jEquals([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator==(jnitocxxrhs);
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}


extern "C" JNIEXPORT jfloatArray Java_com_examples_templates_ArrayFloat2_jData([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->data();
        
        jfloatArray cxxtojniresult = env->NewFloatArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetFloatArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloatArray result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_ArrayFloat3_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_ArrayFloat3_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat3_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jobjectid array, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_array = reinterpret_cast<CppBindCObject*>(array);
    auto cppbind_obj_array_ptr = cppbind_obj_array ? cppbind_obj_array->ptr : nullptr;
    auto& jnitocxxarray = *static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_array_ptr);
    try {
        cppbind::example::Array<float, 3>* this_object = new cppbind::example::Array<float, 3>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat3_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jfloatArray array, ...){
    using namespace cppbind::example;
    
    std::vector<float> _jnitocxxarray;
    auto __jnitocxxarray = cppbind::getFloatArray(env, array);
    for (auto& value___jnitocxxarray : __jnitocxxarray) {
        
        _jnitocxxarray.emplace_back(value___jnitocxxarray);
    }
    std::array<float, 3> jnitocxxarray {};
    std::copy_n(std::make_move_iterator(_jnitocxxarray.begin()), 3, jnitocxxarray.begin());
    try {
        cppbind::example::Array<float, 3>* this_object = new cppbind::example::Array<float, 3>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jfloat Java_com_examples_templates_ArrayFloat3_jGet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator[](idx);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_ArrayFloat3_jSet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, jfloat value, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->operator[](idx) = value;
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat3_jPlus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator+(jnitocxxrhs);
        cppbind::example::Array<float, 3>* cxxtojniresult_ptr = new cppbind::example::Array<float, 3>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayFloat3_jMinus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator-(jnitocxxrhs);
        cppbind::example::Array<float, 3>* cxxtojniresult_ptr = new cppbind::example::Array<float, 3>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_ArrayFloat3_jEquals([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator==(jnitocxxrhs);
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}


extern "C" JNIEXPORT jfloatArray Java_com_examples_templates_ArrayFloat3_jData([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<float, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->data();
        
        jfloatArray cxxtojniresult = env->NewFloatArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetFloatArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloatArray result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_ArrayInt2_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_ArrayInt2_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt2_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jobjectid array, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_array = reinterpret_cast<CppBindCObject*>(array);
    auto cppbind_obj_array_ptr = cppbind_obj_array ? cppbind_obj_array->ptr : nullptr;
    auto& jnitocxxarray = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_array_ptr);
    try {
        cppbind::example::Array<int, 2>* this_object = new cppbind::example::Array<int, 2>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt2_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jintArray array, ...){
    using namespace cppbind::example;
    
    std::vector<int> _jnitocxxarray;
    auto __jnitocxxarray = cppbind::getIntArray(env, array);
    for (auto& value___jnitocxxarray : __jnitocxxarray) {
        
        _jnitocxxarray.emplace_back(value___jnitocxxarray);
    }
    std::array<int, 2> jnitocxxarray {};
    std::copy_n(std::make_move_iterator(_jnitocxxarray.begin()), 2, jnitocxxarray.begin());
    try {
        cppbind::example::Array<int, 2>* this_object = new cppbind::example::Array<int, 2>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_templates_ArrayInt2_jGet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator[](idx);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_ArrayInt2_jSet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, jint value, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->operator[](idx) = value;
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt2_jPlus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator+(jnitocxxrhs);
        cppbind::example::Array<int, 2>* cxxtojniresult_ptr = new cppbind::example::Array<int, 2>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt2_jMinus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator-(jnitocxxrhs);
        cppbind::example::Array<int, 2>* cxxtojniresult_ptr = new cppbind::example::Array<int, 2>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_ArrayInt2_jEquals([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator==(jnitocxxrhs);
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}


extern "C" JNIEXPORT jintArray Java_com_examples_templates_ArrayInt2_jData([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->data();
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_ArrayInt3_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_ArrayInt3_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt3_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jobjectid array, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_array = reinterpret_cast<CppBindCObject*>(array);
    auto cppbind_obj_array_ptr = cppbind_obj_array ? cppbind_obj_array->ptr : nullptr;
    auto& jnitocxxarray = *static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_array_ptr);
    try {
        cppbind::example::Array<int, 3>* this_object = new cppbind::example::Array<int, 3>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt3_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jintArray array, ...){
    using namespace cppbind::example;
    
    std::vector<int> _jnitocxxarray;
    auto __jnitocxxarray = cppbind::getIntArray(env, array);
    for (auto& value___jnitocxxarray : __jnitocxxarray) {
        
        _jnitocxxarray.emplace_back(value___jnitocxxarray);
    }
    std::array<int, 3> jnitocxxarray {};
    std::copy_n(std::make_move_iterator(_jnitocxxarray.begin()), 3, jnitocxxarray.begin());
    try {
        cppbind::example::Array<int, 3>* this_object = new cppbind::example::Array<int, 3>(jnitocxxarray);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_templates_ArrayInt3_jGet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator[](idx);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_ArrayInt3_jSet([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint idx, jint value, ...){
    using namespace cppbind::example;
    


    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        jnitocxxid->operator[](idx) = value;
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt3_jPlus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator+(jnitocxxrhs);
        cppbind::example::Array<int, 3>* cxxtojniresult_ptr = new cppbind::example::Array<int, 3>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayInt3_jMinus([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator-(jnitocxxrhs);
        cppbind::example::Array<int, 3>* cxxtojniresult_ptr = new cppbind::example::Array<int, 3>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_ArrayInt3_jEquals([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid rhs, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_rhs = reinterpret_cast<CppBindCObject*>(rhs);
    auto cppbind_obj_rhs_ptr = cppbind_obj_rhs ? cppbind_obj_rhs->ptr : nullptr;
    auto& jnitocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_rhs_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->operator==(jnitocxxrhs);
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}


extern "C" JNIEXPORT jintArray Java_com_examples_templates_ArrayInt3_jData([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::Array<int, 3>*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->data();
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}

extern "C" JNIEXPORT jfloat Java_com_examples_templates_ArrayKt_jGetfirstelementFloat(JNIEnv* env, jclass, jobjectid a, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto& jnitocxxa = *static_cast<cppbind::example::Array<float, 2>*>(cppbind_obj_a_ptr);
    
    try {
        decltype(auto) result = cppbind::example::getFirstElement<float>(jnitocxxa);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jfloat result {};
    return result;
}

extern "C" JNIEXPORT jint Java_com_examples_templates_ArrayKt_jGetfirstelementInt(JNIEnv* env, jclass, jobjectid a, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto& jnitocxxa = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_a_ptr);
    
    try {
        decltype(auto) result = cppbind::example::getFirstElement<int>(jnitocxxa);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayKt_jMultiplyelements(JNIEnv* env, jclass, jobjectid a, jint num, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto& jnitocxxa = *static_cast<cppbind::example::Array<int, 2>*>(cppbind_obj_a_ptr);
    
    try {
        decltype(auto) result = cppbind::example::multiplyElements(jnitocxxa, num);
        cppbind::example::Array<int, 2>* cxxtojniresult_ptr = new cppbind::example::Array<int, 2>(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayKt_jAddtoelements(JNIEnv* env, jclass, jobjectid a, jint num, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto& jnitocxxa = *static_cast<cppbind::example::ArrayFloat*>(cppbind_obj_a_ptr);
    
    try {
        decltype(auto) result = cppbind::example::addToElements(jnitocxxa, num);
        cppbind::example::ArrayFloat* cxxtojniresult_ptr = new cppbind::example::ArrayFloat(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_ArrayKt_jAddtoelements1(JNIEnv* env, jclass, jobjectid a, jint num, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto& jnitocxxa = *static_cast<cppbind::example::ArrayInt*>(cppbind_obj_a_ptr);
    
    try {
        decltype(auto) result = cppbind::example::addToElements(jnitocxxa, num);
        cppbind::example::ArrayInt* cxxtojniresult_ptr = new cppbind::example::ArrayInt(result);
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_Array3_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<std::shared_ptr<cppbind::example::Array3>*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_Array3_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<std::shared_ptr<cppbind::example::Array3>*>(cppbind_obj_id_ptr)->get());
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_Array3_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jfloatArray arr, ...){
    using namespace cppbind::example;
    
    std::vector<float> _jnitocxxarr;
    auto __jnitocxxarr = cppbind::getFloatArray(env, arr);
    for (auto& value___jnitocxxarr : __jnitocxxarr) {
        
        _jnitocxxarr.emplace_back(value___jnitocxxarr);
    }
    std::array<float, LENGTH3> jnitocxxarr {};
    std::copy_n(std::make_move_iterator(_jnitocxxarr.begin()), 9, jnitocxxarr.begin());
    try {
        cppbind::example::Array3* this_object = new cppbind::example::Array3(jnitocxxarr);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAY3), new std::shared_ptr<cppbind::example::Array3>(this_object)});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_ArrayKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
