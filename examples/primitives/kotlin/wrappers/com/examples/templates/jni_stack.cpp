/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/18/2022-06:17.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/templates/container.hpp"
#include "cxx/templates/stack_usage.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

extern const char* CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_PROJECT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK;
extern const char* CPPBIND_CPPBIND_EXAMPLE_TASK;
extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_NUMBERINT;

const char* CPPBIND_CPPBIND_EXAMPLE_STACKPRJ = "cppbind::example::Stack<cppbind::example::Project>";
const char* CPPBIND_CPPBIND_EXAMPLE_STACKTASK = "cppbind::example::Stack<cppbind::example::Task>";
const char* CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT = "cppbind::example::Stack<cppbind::example::Number<int>>";


extern "C" JNIEXPORT void Java_com_examples_templates_StackPrj_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::Stack<cppbind::example::Project>>::value, "cppbind::example::Stack<cppbind::example::Project> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKPRJ) == 0)
        delete static_cast<cppbind::example::Stack<cppbind::example::Project>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::Stack<cppbind::example::Project>* recover_obj_from_CppbindExample_StackPrj(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKPRJ) == 0)
            return static_cast<cppbind::example::Stack<cppbind::example::Project>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Project>, cppbind::example::Stack<cppbind::example::Project>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Task>, cppbind::example::Stack<cppbind::example::Project>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_StackPrj_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKPRJ) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::Stack<cppbind::example::Project>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackPrj_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    using namespace cppbind::example;
    try {
        cppbind::example::Stack<cppbind::example::Project>* this_object = new cppbind::example::Stack<cppbind::example::Project>();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKPRJ), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackPrj_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jobjectid stack, ...){
    using namespace cppbind::example;
    
    cppbind::example::Stack<cppbind::example::Project>* jnitocxxstack_ptr = recover_obj_from_CppbindExample_StackPrj(stack);
    auto& jnitocxxstack = *jnitocxxstack_ptr;
    try {
        cppbind::example::Stack<cppbind::example::Project>* this_object = new cppbind::example::Stack<cppbind::example::Project>(jnitocxxstack);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKPRJ), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackPrj_jConstructor2([[maybe_unused]] JNIEnv* env, jobject, jobjectid st, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_st = reinterpret_cast<CppBindCObject*>(st);
    auto cppbind_obj_st_ptr = cppbind_obj_st ? cppbind_obj_st->ptr : nullptr;
    auto jnitocxxst = static_cast<cppbind::example::Project*>(cppbind_obj_st_ptr);
    try {
        cppbind::example::Stack<cppbind::example::Project>* this_object = new cppbind::example::Stack<cppbind::example::Project>(jnitocxxst);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKPRJ), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_StackPrj_jPush([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid item, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_item = reinterpret_cast<CppBindCObject*>(item);
    auto cppbind_obj_item_ptr = cppbind_obj_item ? cppbind_obj_item->ptr : nullptr;
    auto jnitocxxitem = static_cast<cppbind::example::Project*>(cppbind_obj_item_ptr);

    validateID(id);
    cppbind::example::Stack<cppbind::example::Project>* jnitocxxid = recover_obj_from_CppbindExample_StackPrj(id);
    
    try {
        jnitocxxid->push(jnitocxxitem);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_templates_StackPrj_jPop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Project>* jnitocxxid = recover_obj_from_CppbindExample_StackPrj(id);
    
    try {
        jnitocxxid->pop();
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackPrj_jTop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Project>* jnitocxxid = recover_obj_from_CppbindExample_StackPrj(id);
    
    try {
        decltype(auto) result = jnitocxxid->top();
        cppbind::example::Project* cxxtojniresult_ptr = result;
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_PROJECT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_StackPrj_jEmpty([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Project>* jnitocxxid = recover_obj_from_CppbindExample_StackPrj(id);
    
    try {
        decltype(auto) result = jnitocxxid->empty();
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_StackTask_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::Stack<cppbind::example::Task>>::value, "cppbind::example::Stack<cppbind::example::Task> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKTASK) == 0)
        delete static_cast<cppbind::example::Stack<cppbind::example::Task>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::Stack<cppbind::example::Task>* recover_obj_from_CppbindExample_StackTask(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKTASK) == 0)
            return static_cast<cppbind::example::Stack<cppbind::example::Task>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Project>, cppbind::example::Stack<cppbind::example::Task>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Task>, cppbind::example::Stack<cppbind::example::Task>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_StackTask_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKTASK) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::Stack<cppbind::example::Task>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackTask_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    using namespace cppbind::example;
    try {
        cppbind::example::Stack<cppbind::example::Task>* this_object = new cppbind::example::Stack<cppbind::example::Task>();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKTASK), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackTask_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jobjectid stack, ...){
    using namespace cppbind::example;
    
    cppbind::example::Stack<cppbind::example::Task>* jnitocxxstack_ptr = recover_obj_from_CppbindExample_StackTask(stack);
    auto& jnitocxxstack = *jnitocxxstack_ptr;
    try {
        cppbind::example::Stack<cppbind::example::Task>* this_object = new cppbind::example::Stack<cppbind::example::Task>(jnitocxxstack);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKTASK), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackTask_jConstructor2([[maybe_unused]] JNIEnv* env, jobject, jobjectid st, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_st = reinterpret_cast<CppBindCObject*>(st);
    auto cppbind_obj_st_ptr = cppbind_obj_st ? cppbind_obj_st->ptr : nullptr;
    auto jnitocxxst = static_cast<cppbind::example::Task*>(cppbind_obj_st_ptr);
    try {
        cppbind::example::Stack<cppbind::example::Task>* this_object = new cppbind::example::Stack<cppbind::example::Task>(jnitocxxst);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKTASK), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_StackTask_jPush([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid item, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_item = reinterpret_cast<CppBindCObject*>(item);
    auto cppbind_obj_item_ptr = cppbind_obj_item ? cppbind_obj_item->ptr : nullptr;
    auto jnitocxxitem = static_cast<cppbind::example::Task*>(cppbind_obj_item_ptr);

    validateID(id);
    cppbind::example::Stack<cppbind::example::Task>* jnitocxxid = recover_obj_from_CppbindExample_StackTask(id);
    
    try {
        jnitocxxid->push(jnitocxxitem);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_templates_StackTask_jPop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Task>* jnitocxxid = recover_obj_from_CppbindExample_StackTask(id);
    
    try {
        jnitocxxid->pop();
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackTask_jTop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Task>* jnitocxxid = recover_obj_from_CppbindExample_StackTask(id);
    
    try {
        decltype(auto) result = jnitocxxid->top();
        cppbind::example::Task* cxxtojniresult_ptr = result;
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TASK);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_StackTask_jEmpty([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Task>* jnitocxxid = recover_obj_from_CppbindExample_StackTask(id);
    
    try {
        decltype(auto) result = jnitocxxid->empty();
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_StackNumInt_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::Stack<cppbind::example::Number<int>>>::value, "cppbind::example::Stack<cppbind::example::Number<int>> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT) == 0)
        delete static_cast<cppbind::example::Stack<cppbind::example::Number<int>>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        delete static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::Stack<cppbind::example::Number<int>>* recover_obj_from_CppbindExample_StackNumInt(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT) == 0)
            return static_cast<cppbind::example::Stack<cppbind::example::Number<int>>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Project>, cppbind::example::Stack<cppbind::example::Number<int>>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Task>, cppbind::example::Stack<cppbind::example::Number<int>>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_StackNumInt_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::Stack<cppbind::example::Number<int>>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackNumInt_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    using namespace cppbind::example;
    try {
        cppbind::example::Stack<cppbind::example::Number<int>>* this_object = new cppbind::example::Stack<cppbind::example::Number<int>>();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackNumInt_jConstructor1([[maybe_unused]] JNIEnv* env, jobject, jobjectid stack, ...){
    using namespace cppbind::example;
    
    cppbind::example::Stack<cppbind::example::Number<int>>* jnitocxxstack_ptr = recover_obj_from_CppbindExample_StackNumInt(stack);
    auto& jnitocxxstack = *jnitocxxstack_ptr;
    try {
        cppbind::example::Stack<cppbind::example::Number<int>>* this_object = new cppbind::example::Stack<cppbind::example::Number<int>>(jnitocxxstack);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackNumInt_jConstructor2([[maybe_unused]] JNIEnv* env, jobject, jobjectid st, ...){
    using namespace cppbind::example;
    
    auto cppbind_obj_st = reinterpret_cast<CppBindCObject*>(st);
    auto cppbind_obj_st_ptr = cppbind_obj_st ? cppbind_obj_st->ptr : nullptr;
    auto jnitocxxst = static_cast<cppbind::example::Number<int>*>(cppbind_obj_st_ptr);
    try {
        cppbind::example::Stack<cppbind::example::Number<int>>* this_object = new cppbind::example::Stack<cppbind::example::Number<int>>(jnitocxxst);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT void Java_com_examples_templates_StackNumInt_jPush([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid item, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_item = reinterpret_cast<CppBindCObject*>(item);
    auto cppbind_obj_item_ptr = cppbind_obj_item ? cppbind_obj_item->ptr : nullptr;
    auto jnitocxxitem = static_cast<cppbind::example::Number<int>*>(cppbind_obj_item_ptr);

    validateID(id);
    cppbind::example::Stack<cppbind::example::Number<int>>* jnitocxxid = recover_obj_from_CppbindExample_StackNumInt(id);
    
    try {
        jnitocxxid->push(jnitocxxitem);
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT void Java_com_examples_templates_StackNumInt_jPop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Number<int>>* jnitocxxid = recover_obj_from_CppbindExample_StackNumInt(id);
    
    try {
        jnitocxxid->pop();
        return;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }


}


extern "C" JNIEXPORT jobjectid Java_com_examples_templates_StackNumInt_jTop([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Number<int>>* jnitocxxid = recover_obj_from_CppbindExample_StackNumInt(id);
    
    try {
        decltype(auto) result = jnitocxxid->top();
        cppbind::example::Number<int>* cxxtojniresult_ptr = result;
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NUMBERINT);
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, cxxtojniresult_ptr};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jboolean Java_com_examples_templates_StackNumInt_jEmpty([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    
    validateID(id);
    cppbind::example::Stack<cppbind::example::Number<int>>* jnitocxxid = recover_obj_from_CppbindExample_StackNumInt(id);
    
    try {
        decltype(auto) result = jnitocxxid->empty();
        jboolean cxxtojniresult = result;
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jboolean result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_StackKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
