/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:33.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/template_methods.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_PROJECT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_ROOT;

const char* CPPBIND_CPPBIND_EXAMPLE_TEMPLATEMETHODS = "cppbind::example::TemplateMethods";


extern "C" JNIEXPORT void Java_com_examples_templates_TemplateMethods_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    delete static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr);
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TemplateMethods_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    return reinterpret_cast<jlong>(static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr));
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TemplateMethods_jConstructor([[maybe_unused]] JNIEnv* env, jobject){
    using namespace cppbind::example;
    try {
        cppbind::example::TemplateMethods* this_object = new cppbind::example::TemplateMethods();
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TEMPLATEMETHODS), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}


extern "C" JNIEXPORT jint Java_com_examples_templates_TemplateMethods_jMaxInt([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jint a, jint b, ...){
    using namespace cppbind::example;
    




    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->max<int>(a, b);
        
        return result;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jint result {};
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_templates_TemplateMethods_jMaxString([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jstring a, jstring b, ...){
    using namespace cppbind::example;
    
    jstring jjnitocxxaStr = static_cast<jstring>(a);
    auto jnitocxxa_cstr = env->GetStringUTFChars(jjnitocxxaStr, 0);
    std::string jnitocxxa = jnitocxxa_cstr;
    env->ReleaseStringUTFChars(jjnitocxxaStr, jnitocxxa_cstr);

    jstring jjnitocxxbStr = static_cast<jstring>(b);
    auto jnitocxxb_cstr = env->GetStringUTFChars(jjnitocxxbStr, 0);
    std::string jnitocxxb = jnitocxxb_cstr;
    env->ReleaseStringUTFChars(jjnitocxxbStr, jnitocxxb_cstr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->max<std::string>(jnitocxxa, jnitocxxb);
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_templates_TemplateMethods_jMakepairProjectProject([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid a, jobjectid b, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto jnitocxxa = static_cast<cppbind::example::Project*>(cppbind_obj_a_ptr);


    auto cppbind_obj_b = reinterpret_cast<CppBindCObject*>(b);
    auto cppbind_obj_b_ptr = cppbind_obj_b ? cppbind_obj_b->ptr : nullptr;
    auto jnitocxxb = static_cast<cppbind::example::Project*>(cppbind_obj_b_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->makePair<cppbind::example::Project, cppbind::example::Project>(jnitocxxa, jnitocxxb);
        auto first_result = result.first;
        auto second_result = result.second;
        cppbind::example::Project* cxxtojnifirst_result_ptr = first_result;
        char* type_first_result = strdup(CPPBIND_CPPBIND_EXAMPLE_PROJECT);
        CppBindCObject* cppbind_obj_cxxtojnifirst_result = new CppBindCObject {type_first_result, cxxtojnifirst_result_ptr};
        jobjectid cxxtojnifirst_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnifirst_result);
        cppbind::example::Project* cxxtojnisecond_result_ptr = second_result;
        char* type_second_result = strdup(CPPBIND_CPPBIND_EXAMPLE_PROJECT);
        CppBindCObject* cppbind_obj_cxxtojnisecond_result = new CppBindCObject {type_second_result, cxxtojnisecond_result_ptr};
        jobjectid cxxtojnisecond_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnisecond_result);
        jobject first_result_obj = cppbind::longToObject(env, cxxtojnifirst_result);
        jobject second_result_obj = cppbind::longToObject(env, cxxtojnisecond_result);
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_templates_TemplateMethods_jMakepairRootProject([[maybe_unused]] JNIEnv* env, jobject, jobjectid id, jobjectid a, jobjectid b, ...){
    using namespace cppbind::example;
    

    auto cppbind_obj_a = reinterpret_cast<CppBindCObject*>(a);
    auto cppbind_obj_a_ptr = cppbind_obj_a ? cppbind_obj_a->ptr : nullptr;
    auto jnitocxxa = static_cast<cppbind::example::Root*>(cppbind_obj_a_ptr);


    auto cppbind_obj_b = reinterpret_cast<CppBindCObject*>(b);
    auto cppbind_obj_b_ptr = cppbind_obj_b ? cppbind_obj_b->ptr : nullptr;
    auto jnitocxxb = static_cast<cppbind::example::Project*>(cppbind_obj_b_ptr);

    validateID(id);
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    auto jnitocxxid = static_cast<cppbind::example::TemplateMethods*>(cppbind_obj_id_ptr);
    
    try {
        decltype(auto) result = jnitocxxid->makePair<cppbind::example::Root, cppbind::example::Project>(jnitocxxa, jnitocxxb);
        auto first_result = result.first;
        auto second_result = result.second;
        cppbind::example::Root* cxxtojnifirst_result_ptr = first_result;
        char* type_first_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ROOT);
        CppBindCObject* cppbind_obj_cxxtojnifirst_result = new CppBindCObject {type_first_result, cxxtojnifirst_result_ptr};
        jobjectid cxxtojnifirst_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnifirst_result);
        cppbind::example::Project* cxxtojnisecond_result_ptr = second_result;
        char* type_second_result = strdup(CPPBIND_CPPBIND_EXAMPLE_PROJECT);
        CppBindCObject* cppbind_obj_cxxtojnisecond_result = new CppBindCObject {type_second_result, cxxtojnisecond_result_ptr};
        jobjectid cxxtojnisecond_result = reinterpret_cast<jlong>(cppbind_obj_cxxtojnisecond_result);
        jobject first_result_obj = cppbind::longToObject(env, cxxtojnifirst_result);
        jobject second_result_obj = cppbind::longToObject(env, cxxtojnisecond_result);
        jobject cxxtojniresult = cppbind::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result {};
    return result;
}


extern "C" JNIEXPORT jintArray Java_com_examples_templates_TemplateMethods_jMergeInt([[maybe_unused]] JNIEnv* env, jobject, jintArray first, jintArray second, ...){
    using namespace cppbind::example;
    

    std::vector<int> jnitocxxfirst;
    auto _jnitocxxfirst = cppbind::getIntArray(env, first);
    for (auto& value__jnitocxxfirst : _jnitocxxfirst) {
        
        jnitocxxfirst.emplace_back(value__jnitocxxfirst);
    }


    std::vector<int> jnitocxxsecond;
    auto _jnitocxxsecond = cppbind::getIntArray(env, second);
    for (auto& value__jnitocxxsecond : _jnitocxxsecond) {
        
        jnitocxxsecond.emplace_back(value__jnitocxxsecond);
    }

    
    try {
        decltype(auto) result = cppbind::example::TemplateMethods::merge<int>(jnitocxxfirst, jnitocxxsecond);
        
        jintArray cxxtojniresult = env->NewIntArray(result.size());
        size_t index_result = 0;
        for (auto& value_result : result) {
            
            env->SetIntArrayRegion(cxxtojniresult, index_result, 1, &value_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jintArray result {};
    return result;
}


extern "C" JNIEXPORT jobjectArray Java_com_examples_templates_TemplateMethods_jMergeString([[maybe_unused]] JNIEnv* env, jobject, jobjectArray first, jobjectArray second, ...){
    using namespace cppbind::example;
    

    std::vector<std::string> jnitocxxfirst;
    auto _jnitocxxfirst = cppbind::getObjectArray(env, first);
    for (auto& value__jnitocxxfirst : _jnitocxxfirst) {
        jstring jjnitocxxvalue__jnitocxxfirstStr = static_cast<jstring>(value__jnitocxxfirst);
        auto jnitocxxvalue__jnitocxxfirst_cstr = env->GetStringUTFChars(jjnitocxxvalue__jnitocxxfirstStr, 0);
        std::string jnitocxxvalue__jnitocxxfirst = jnitocxxvalue__jnitocxxfirst_cstr;
        env->ReleaseStringUTFChars(jjnitocxxvalue__jnitocxxfirstStr, jnitocxxvalue__jnitocxxfirst_cstr);
        jnitocxxfirst.emplace_back(jnitocxxvalue__jnitocxxfirst);
    }


    std::vector<std::string> jnitocxxsecond;
    auto _jnitocxxsecond = cppbind::getObjectArray(env, second);
    for (auto& value__jnitocxxsecond : _jnitocxxsecond) {
        jstring jjnitocxxvalue__jnitocxxsecondStr = static_cast<jstring>(value__jnitocxxsecond);
        auto jnitocxxvalue__jnitocxxsecond_cstr = env->GetStringUTFChars(jjnitocxxvalue__jnitocxxsecondStr, 0);
        std::string jnitocxxvalue__jnitocxxsecond = jnitocxxvalue__jnitocxxsecond_cstr;
        env->ReleaseStringUTFChars(jjnitocxxvalue__jnitocxxsecondStr, jnitocxxvalue__jnitocxxsecond_cstr);
        jnitocxxsecond.emplace_back(jnitocxxvalue__jnitocxxsecond);
    }

    
    try {
        decltype(auto) result = cppbind::example::TemplateMethods::merge<std::string>(jnitocxxfirst, jnitocxxsecond);
        
        jobjectArray cxxtojniresult = env->NewObjectArray(result.size(), env->FindClass("java/lang/Object"), NULL);
        size_t index_result = 0;
        for (auto& value_result : result) {
            jstring cxxtojnivalue_result = env->NewStringUTF(value_result.data());
            env->SetObjectArrayElement(cxxtojniresult, index_result, cxxtojnivalue_result);
            ++index_result ;
        }
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectArray result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_Template_1methodsKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
