/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:39.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/tuple.hpp"

extern const char* CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT;
extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY = "cppbind::example::tuple<>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT = "cppbind::example::tuple<int, int, int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT = "cppbind::example::tuple<int, int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEINT = "cppbind::example::tuple<int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE = "cppbind::example::tuple<double>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES = "cppbind::example::tuple<double, double>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT = "cppbind::example::tuple<int, double>";


extern "C" JNIEXPORT void Java_com_examples_templates_TupleEmpty_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<>>::value, "cppbind::example::tuple<> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY) == 0)
        delete static_cast<cppbind::example::tuple<>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<>* recover_obj_from_CppbindExample_TupleEmpty(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY) == 0)
            return static_cast<cppbind::example::tuple<>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleEmpty_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}


extern "C" JNIEXPORT void Java_com_examples_templates_TupleThreeInt_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, int, int>>::value, "cppbind::example::tuple<int, int, int> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT) == 0)
        delete static_cast<cppbind::example::tuple<int, int, int>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<int, int, int>* recover_obj_from_CppbindExample_TupleThreeInt(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT) == 0)
            return static_cast<cppbind::example::tuple<int, int, int>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, int, int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, int, int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, int, int>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleThreeInt_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<int, int, int>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleThreeInt_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jint t, jint ts1, jint ts2, ...){
    using namespace cppbind::example;
    
    
    
    try {
        cppbind::example::tuple<int, int, int>* this_object = new cppbind::example::tuple<int, int, int>(t, ts1, ts2);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jint Java_com_examples_templates_TupleThreeInt_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, int, int>* jnitocxxid = recover_obj_from_CppbindExample_TupleThreeInt(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleThreeInt_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, int, int>* jnitocxxid = recover_obj_from_CppbindExample_TupleThreeInt(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<int, int>* cxxtojniresult_ptr = new cppbind::example::tuple<int, int>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_templates_TupleTwoInt_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, int>>::value, "cppbind::example::tuple<int, int> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT) == 0)
        delete static_cast<cppbind::example::tuple<int, int>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<int, int>* recover_obj_from_CppbindExample_TupleTwoInt(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT) == 0)
            return static_cast<cppbind::example::tuple<int, int>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, int>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleTwoInt_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<int, int>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleTwoInt_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jint t, jint ts1, ...){
    using namespace cppbind::example;
    
    
    try {
        cppbind::example::tuple<int, int>* this_object = new cppbind::example::tuple<int, int>(t, ts1);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jint Java_com_examples_templates_TupleTwoInt_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, int>* jnitocxxid = recover_obj_from_CppbindExample_TupleTwoInt(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleTwoInt_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, int>* jnitocxxid = recover_obj_from_CppbindExample_TupleTwoInt(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<int>* cxxtojniresult_ptr = new cppbind::example::tuple<int>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEINT);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_templates_TupleInt_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int>>::value, "cppbind::example::tuple<int> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEINT) == 0)
        delete static_cast<cppbind::example::tuple<int>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<int>* recover_obj_from_CppbindExample_TupleInt(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEINT) == 0)
            return static_cast<cppbind::example::tuple<int>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleInt_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<int>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleInt_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jint t, ...){
    using namespace cppbind::example;
    
    try {
        cppbind::example::tuple<int>* this_object = new cppbind::example::tuple<int>(t);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jint Java_com_examples_templates_TupleInt_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int>* jnitocxxid = recover_obj_from_CppbindExample_TupleInt(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleInt_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int>* jnitocxxid = recover_obj_from_CppbindExample_TupleInt(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<>* cxxtojniresult_ptr = new cppbind::example::tuple<>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_templates_TupleDouble_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<double>>::value, "cppbind::example::tuple<double> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::tuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<double>* recover_obj_from_CppbindExample_TupleDouble(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE) == 0)
            return static_cast<cppbind::example::tuple<double>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<double>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleDouble_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDouble_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jdouble t, ...){
    using namespace cppbind::example;
    
    try {
        cppbind::example::tuple<double>* this_object = new cppbind::example::tuple<double>(t);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jdouble Java_com_examples_templates_TupleDouble_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDouble(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDouble_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDouble(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<>* cxxtojniresult_ptr = new cppbind::example::tuple<>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_templates_TupleDoubles_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<double, double>>::value, "cppbind::example::tuple<double, double> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES) == 0)
        delete static_cast<cppbind::example::tuple<double, double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<double, double>* recover_obj_from_CppbindExample_TupleDoubles(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES) == 0)
            return static_cast<cppbind::example::tuple<double, double>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<double, double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<double, double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<double, double>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleDoubles_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<double, double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDoubles_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jdouble t, jdouble ts1, ...){
    using namespace cppbind::example;
    
    
    try {
        cppbind::example::tuple<double, double>* this_object = new cppbind::example::tuple<double, double>(t, ts1);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jdouble Java_com_examples_templates_TupleDoubles_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<double, double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDoubles(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDoubles_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<double, double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDoubles(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<double>* cxxtojniresult_ptr = new cppbind::example::tuple<double>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT void Java_com_examples_templates_TupleDoubleInt_jFinalize(JNIEnv*, jobject, jobjectid id){
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, double>>::value, "cppbind::example::tuple<int, double> type must have virtual destructor");
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT) == 0)
        delete static_cast<cppbind::example::tuple<int, double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        delete static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        delete static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr);
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        delete static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
    free(cppbind_obj_id->type);
    delete cppbind_obj_id;
}

cppbind::example::tuple<int, double>* recover_obj_from_CppbindExample_TupleDoubleInt(jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id ? cppbind_obj_id->ptr : nullptr;
    if (cppbind_obj_id_ptr) {
        if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT) == 0)
            return static_cast<cppbind::example::tuple<int, double>*>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, double>>(cppbind_obj_id_ptr);
        else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, double>>(cppbind_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jlong Java_com_examples_templates_TupleDoubleInt_jGetcxxid(JNIEnv*, jobject, jobjectid id) {
    auto cppbind_obj_id = reinterpret_cast<CppBindCObject*>(id);
    auto cppbind_obj_id_ptr = cppbind_obj_id->ptr;
    if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::tuple<int, double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::IntsTuple*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<double>*>(cppbind_obj_id_ptr));
    else if (strcmp(cppbind_obj_id->type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
        return reinterpret_cast<jlong>(static_cast<cppbind::example::MyTuple<int>*>(cppbind_obj_id_ptr));
    else {
        std::cerr << "Unexpected object type: " << cppbind_obj_id->type << std::endl;
        exit(1);
    }
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDoubleInt_jConstructor([[maybe_unused]] JNIEnv* env, jobject, jint t, jdouble ts1, ...){
    using namespace cppbind::example;
    
    
    try {
        cppbind::example::tuple<int, double>* this_object = new cppbind::example::tuple<int, double>(t, ts1);
        return reinterpret_cast<jlong>(new CppBindCObject {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT), this_object});
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result {};
    return result;
}
extern "C" JNIEXPORT jint Java_com_examples_templates_TupleDoubleInt_jTail([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDoubleInt(id);
    decltype(auto) result = jnitocxxid->tail;
    
    return result;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleDoubleInt_jRest([[maybe_unused]] JNIEnv* env, jobject, jobjectid id){
    using namespace cppbind::example;
    validateID(id);
    
    cppbind::example::tuple<int, double>* jnitocxxid = recover_obj_from_CppbindExample_TupleDoubleInt(id);
    decltype(auto) result = jnitocxxid->rest;
    cppbind::example::tuple<double>* cxxtojniresult_ptr = new cppbind::example::tuple<double>(result);
    char* type_result = nullptr;
    const char* name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE);
    }
    CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
    jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
    return cxxtojniresult;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleKt_jCreatetupleIntInt(JNIEnv* env, jclass, jint args1, jint args2, ...){
    using namespace cppbind::example;
    
    
    try {
        decltype(auto) result = cppbind::example::createTuple<int, int>(args1, args2);
        cppbind::example::tuple<int, int>* cxxtojniresult_ptr = result;
        char* type_result = nullptr;
        const char* name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT);
        }
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TupleKt_jCreatetupleIntDouble(JNIEnv* env, jclass, jint args1, jdouble args2, ...){
    using namespace cppbind::example;
    
    
    try {
        decltype(auto) result = cppbind::example::createTuple<int, double>(args1, args2);
        cppbind::example::tuple<int, double>* cxxtojniresult_ptr = result;
        char* type_result = nullptr;
        const char* name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT);
        }
        CppBindCObject* cppbind_obj_cxxtojniresult = new CppBindCObject {type_result, dynamic_cast<void*>(cxxtojniresult_ptr)};
        jobjectid cxxtojniresult = reinterpret_cast<jlong>(cppbind_obj_cxxtojniresult);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/cppbind/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobjectid result {};
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_TupleKt_jGettypebyid(JNIEnv* env, jclass, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<CppBindCObject*>(id)->type);
}
