/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/21/2021-16:40.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/templates/template_methods.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_templates_TemplateMethods_jSet_1this(JNIEnv* env, jobject obj, jobjectid id, jobject self){
}
extern "C" JNIEXPORT void Java_com_examples_templates_TemplateMethods_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    iegen::example::TemplateMethods* this_object = reinterpret_cast<iegen::example::TemplateMethods*>(id);
    delete this_object;
}
extern "C" JNIEXPORT jobjectid Java_com_examples_templates_TemplateMethods_jConstructor(JNIEnv* env, jobject obj){
    iegen::example::TemplateMethods* baseptr = new iegen::example::TemplateMethods();
    return reinterpret_cast<jlong>(baseptr);
}


extern "C" JNIEXPORT jint Java_com_examples_templates_TemplateMethods_jMaxInt(JNIEnv* env, jobject obj, jobjectid id, jint arg0, jint arg1, jobject err_obj){
    




    validateID(id);
    iegen::example::TemplateMethods* this_object = reinterpret_cast<iegen::example::TemplateMethods*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->max<int>(arg0, arg1);
      
      return result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jint result;
    return result;
}


extern "C" JNIEXPORT jstring Java_com_examples_templates_TemplateMethods_jMaxString(JNIEnv* env, jobject obj, jobjectid id, jstring arg0, jstring arg1, jobject err_obj){
    
    jstring jjni_to_cxx_arg0Str = (jstring)arg0;
    auto jni_to_cxx_arg0_cstr = env->GetStringUTFChars(jjni_to_cxx_arg0Str, 0);
    const std::string & jni_to_cxx_arg0 = jni_to_cxx_arg0_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_arg0Str, jni_to_cxx_arg0_cstr);

    jstring jjni_to_cxx_arg1Str = (jstring)arg1;
    auto jni_to_cxx_arg1_cstr = env->GetStringUTFChars(jjni_to_cxx_arg1Str, 0);
    const std::string & jni_to_cxx_arg1 = jni_to_cxx_arg1_cstr;
    env->ReleaseStringUTFChars(jjni_to_cxx_arg1Str, jni_to_cxx_arg1_cstr);

    validateID(id);
    iegen::example::TemplateMethods* this_object = reinterpret_cast<iegen::example::TemplateMethods*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->max<std::string>(jni_to_cxx_arg0, jni_to_cxx_arg1);
      jstring cxx_to_jni_result = env->NewStringUTF(result.c_str());
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jstring result;
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_templates_TemplateMethods_jMakepairProjectProject(JNIEnv* env, jobject obj, jobjectid id, jobjectid arg0, jobjectid arg1, jobject err_obj){
    

    auto jni_to_cxx_arg0 =  reinterpret_cast<iegen::example::Project*>(arg0);


    auto jni_to_cxx_arg1 =  reinterpret_cast<iegen::example::Project*>(arg1);

    validateID(id);
    iegen::example::TemplateMethods* this_object = reinterpret_cast<iegen::example::TemplateMethods*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->makePair<iegen::example::Project, iegen::example::Project>(jni_to_cxx_arg0, jni_to_cxx_arg1);
      auto first_result = result.first;
    auto second_result = result.second;


    iegen::example::Project* cxx_to_jni_first_result_baseptr = first_result;
    jobjectid cxx_to_jni_first_result = reinterpret_cast<jlong>(cxx_to_jni_first_result_baseptr);


    iegen::example::Project* cxx_to_jni_second_result_baseptr = second_result;
    jobjectid cxx_to_jni_second_result = reinterpret_cast<jlong>(cxx_to_jni_second_result_baseptr);
    jobject result_first = iegen::longToObject(env, cxx_to_jni_first_result);
    jobject result_second = iegen::longToObject(env, cxx_to_jni_second_result);
    jobject cxx_to_jni_result = iegen::make_jni_object_pair(env, result_first, result_second);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jobject result;
    return result;
}


extern "C" JNIEXPORT jobject Java_com_examples_templates_TemplateMethods_jMakepairRootProject(JNIEnv* env, jobject obj, jobjectid id, jobjectid arg0, jobjectid arg1, jobject err_obj){
    

    auto jni_to_cxx_arg0 =  reinterpret_cast<iegen::example::Root*>(arg0);


    auto jni_to_cxx_arg1 =  reinterpret_cast<iegen::example::Project*>(arg1);

    validateID(id);
    iegen::example::TemplateMethods* this_object = reinterpret_cast<iegen::example::TemplateMethods*>(id);
    int err_type_id = 0;
    void* err_ptr = nullptr;

    try {
      auto result = this_object->makePair<iegen::example::Root, iegen::example::Project>(jni_to_cxx_arg0, jni_to_cxx_arg1);
      auto first_result = result.first;
    auto second_result = result.second;


    iegen::example::Root* cxx_to_jni_first_result_baseptr = first_result;
    jobjectid cxx_to_jni_first_result = reinterpret_cast<jlong>(cxx_to_jni_first_result_baseptr);


    iegen::example::Project* cxx_to_jni_second_result_baseptr = second_result;
    jobjectid cxx_to_jni_second_result = reinterpret_cast<jlong>(cxx_to_jni_second_result_baseptr);
    jobject result_first = iegen::longToObject(env, cxx_to_jni_first_result);
    jobject result_second = iegen::longToObject(env, cxx_to_jni_second_result);
    jobject cxx_to_jni_result = iegen::make_jni_object_pair(env, result_first, result_second);
      return cxx_to_jni_result;
    }
    catch (const std::exception& e) {
          err_type_id = 1;
          err_ptr = new std::exception(e);
    }
    catch (...) {
        err_type_id = -1;
    }

    jclass err_cls = env->GetObjectClass(err_obj);
    jfieldID typeId_field_id = env->GetFieldID(err_cls, "typeId", "I");
    jfieldID ptrId_field_id = env->GetFieldID(err_cls, "ptrId", "J");
    env->SetIntField(err_obj, typeId_field_id, err_type_id);
    env->SetLongField(err_obj, ptrId_field_id, reinterpret_cast<jobjectid>(err_ptr));

    jobject result;
    return result;
}