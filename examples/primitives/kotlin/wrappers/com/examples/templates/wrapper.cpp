/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/21/2022-14:15.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include "cxx/templates/wrapper.hpp"

using namespace iegen::example;


extern "C" JNIEXPORT void Java_com_examples_templates_WrapperPairStrings_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_WrapperPairStrings_jConstructor(JNIEnv* env, jobject obj, jobject value){
    jclass pairClass_value = env->FindClass("kotlin/Pair");

    jfieldID firstID_value = env->GetFieldID(pairClass_value, "first", "Ljava/lang/Object;");
    jfieldID secondID_value = env->GetFieldID(pairClass_value, "second", "Ljava/lang/Object;");

    auto firstObject_value = env->GetObjectField(value, firstID_value);
    auto secondObject_value = env->GetObjectField(value, secondID_value);
    auto first_value = iegen::extractObject(env, firstObject_value);
    auto second_value = iegen::extractObject(env, secondObject_value);
    jstring jjnitocxxfirst_valueStr = (jstring)first_value;
    auto jnitocxxfirst_value_cstr = env->GetStringUTFChars(jjnitocxxfirst_valueStr, 0);
    std::string jnitocxxfirst_value = jnitocxxfirst_value_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirst_valueStr, jnitocxxfirst_value_cstr);
    jstring jjnitocxxsecond_valueStr = (jstring)second_value;
    auto jnitocxxsecond_value_cstr = env->GetStringUTFChars(jjnitocxxsecond_valueStr, 0);
    std::string jnitocxxsecond_value = jnitocxxsecond_value_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecond_valueStr, jnitocxxsecond_value_cstr);
    std::pair<std::string, std::string> jnitocxxvalue = std::make_pair(jnitocxxfirst_value, jnitocxxsecond_value);
    try {
        iegen::example::Wrapper<std::pair<std::string, std::string>>* baseptr = new iegen::example::Wrapper<std::pair<std::string, std::string>>(jnitocxxvalue);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Wrapper<std::pair<std::string, std::string>>"), baseptr});
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jobject Java_com_examples_templates_WrapperPairStrings_jValue(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(iegen_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->value();
        auto first_result = result.first;
        auto second_result = result.second;
        jstring cxxtojnifirst_result = env->NewStringUTF(first_result.data());
        jstring cxxtojnisecond_result = env->NewStringUTF(second_result.data());
        jobject first_result_obj = cxxtojnifirst_result;
        jobject second_result_obj = cxxtojnisecond_result;
        jobject cxxtojniresult = iegen::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_WrapperPairStrings_jSetvalue(JNIEnv* env, jobject obj, jobjectid id, jobject value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(iegen_obj_id_ptr);
    jclass pairClass_value = env->FindClass("kotlin/Pair");

    jfieldID firstID_value = env->GetFieldID(pairClass_value, "first", "Ljava/lang/Object;");
    jfieldID secondID_value = env->GetFieldID(pairClass_value, "second", "Ljava/lang/Object;");

    auto firstObject_value = env->GetObjectField(value, firstID_value);
    auto secondObject_value = env->GetObjectField(value, secondID_value);
    auto first_value = iegen::extractObject(env, firstObject_value);
    auto second_value = iegen::extractObject(env, secondObject_value);
    jstring jjnitocxxfirst_valueStr = (jstring)first_value;
    auto jnitocxxfirst_value_cstr = env->GetStringUTFChars(jjnitocxxfirst_valueStr, 0);
    std::string jnitocxxfirst_value = jnitocxxfirst_value_cstr;
    env->ReleaseStringUTFChars(jjnitocxxfirst_valueStr, jnitocxxfirst_value_cstr);
    jstring jjnitocxxsecond_valueStr = (jstring)second_value;
    auto jnitocxxsecond_value_cstr = env->GetStringUTFChars(jjnitocxxsecond_valueStr, 0);
    std::string jnitocxxsecond_value = jnitocxxsecond_value_cstr;
    env->ReleaseStringUTFChars(jjnitocxxsecond_valueStr, jnitocxxsecond_value_cstr);
    std::pair<std::string, std::string> jnitocxxvalue = std::make_pair(jnitocxxfirst_value, jnitocxxsecond_value);
    try {
       jnitocxxid->setValue(jnitocxxvalue);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}


extern "C" JNIEXPORT void Java_com_examples_templates_WrapperPairIntInt_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<int, int>>*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_WrapperPairIntInt_jConstructor(JNIEnv* env, jobject obj, jobject value){
    jclass pairClass_value = env->FindClass("kotlin/Pair");

    jfieldID firstID_value = env->GetFieldID(pairClass_value, "first", "Ljava/lang/Object;");
    jfieldID secondID_value = env->GetFieldID(pairClass_value, "second", "Ljava/lang/Object;");

    auto firstObject_value = env->GetObjectField(value, firstID_value);
    auto secondObject_value = env->GetObjectField(value, secondID_value);
    auto first_value = iegen::extractInt(env, firstObject_value);
    auto second_value = iegen::extractInt(env, secondObject_value);


    std::pair<int, int> jnitocxxvalue = std::make_pair(first_value, second_value);
    try {
        iegen::example::Wrapper<std::pair<int, int>>* baseptr = new iegen::example::Wrapper<std::pair<int, int>>(jnitocxxvalue);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Wrapper<std::pair<int, int>>"), baseptr});
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jobject Java_com_examples_templates_WrapperPairIntInt_jValue(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<int, int>>*>(iegen_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->value();
        auto first_result = result.first;
        auto second_result = result.second;


        jobject first_result_obj = iegen::intToObject(env, first_result);
        jobject second_result_obj = iegen::intToObject(env, second_result);
        jobject cxxtojniresult = iegen::make_jni_object_pair(env, first_result_obj, second_result_obj);
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jobject result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_WrapperPairIntInt_jSetvalue(JNIEnv* env, jobject obj, jobjectid id, jobject value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::pair<int, int>>*>(iegen_obj_id_ptr);
    jclass pairClass_value = env->FindClass("kotlin/Pair");

    jfieldID firstID_value = env->GetFieldID(pairClass_value, "first", "Ljava/lang/Object;");
    jfieldID secondID_value = env->GetFieldID(pairClass_value, "second", "Ljava/lang/Object;");

    auto firstObject_value = env->GetObjectField(value, firstID_value);
    auto secondObject_value = env->GetObjectField(value, secondID_value);
    auto first_value = iegen::extractInt(env, firstObject_value);
    auto second_value = iegen::extractInt(env, secondObject_value);


    std::pair<int, int> jnitocxxvalue = std::make_pair(first_value, second_value);
    try {
       jnitocxxid->setValue(jnitocxxvalue);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}


extern "C" JNIEXPORT void Java_com_examples_templates_WrapperString_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::string>*>(iegen_obj_id_ptr);
    delete jnitocxxid;
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

extern "C" JNIEXPORT jobjectid Java_com_examples_templates_WrapperString_jConstructor(JNIEnv* env, jobject obj, jstring value){
    jstring jjnitocxxvalueStr = (jstring)value;
    auto jnitocxxvalue_cstr = env->GetStringUTFChars(jjnitocxxvalueStr, 0);
    std::string jnitocxxvalue = jnitocxxvalue_cstr;
    env->ReleaseStringUTFChars(jjnitocxxvalueStr, jnitocxxvalue_cstr);
    try {
        iegen::example::Wrapper<std::string>* baseptr = new iegen::example::Wrapper<std::string>(jnitocxxvalue);
        return reinterpret_cast<jlong>(new IEGenCObject {strdup("iegen::example::Wrapper<std::string>"), baseptr});
    }
    catch (const std::exception& e) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
          jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
          jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
          env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
    jobjectid result;
    return result;
}

extern "C" JNIEXPORT jstring Java_com_examples_templates_WrapperString_jValue(JNIEnv* env, jobject obj, jobjectid id){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::string>*>(iegen_obj_id_ptr);
    try {
        const auto& result = jnitocxxid->value();
        jstring cxxtojniresult = env->NewStringUTF(result.data());
        return cxxtojniresult;
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result;
    return result;
}

extern "C" JNIEXPORT void Java_com_examples_templates_WrapperString_jSetvalue(JNIEnv* env, jobject obj, jobjectid id, jstring value){
    validateID(id);
    
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    auto jnitocxxid = reinterpret_cast<iegen::example::Wrapper<std::string>*>(iegen_obj_id_ptr);
    jstring jjnitocxxvalueStr = (jstring)value;
    auto jnitocxxvalue_cstr = env->GetStringUTFChars(jjnitocxxvalueStr, 0);
    std::string jnitocxxvalue = jnitocxxvalue_cstr;
    env->ReleaseStringUTFChars(jjnitocxxvalueStr, jnitocxxvalue_cstr);
    try {
       jnitocxxid->setValue(jnitocxxvalue);
    }
    
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/examples/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }
}


extern "C" JNIEXPORT jstring Java_com_examples_templates_WrapperKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
