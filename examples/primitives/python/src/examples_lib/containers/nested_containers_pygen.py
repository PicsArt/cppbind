"""
  ______ .______   .______   .______    __  .__   __.  _______  
 /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
|  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
|  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
|  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 

This file is generated by cppbind on 08/11/2022-07:34.
Please do not change it manually.
"""
from __future__ import annotations

from typing import *

import examples.containers.nested_containers as pybind_nested_containers_pygen
from examples_lib.cppbind.cppbind_metaclass_pygen import *
from examples_lib.cppbind.cppbind_utils_pygen import *


class NestedExamples(metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        """
        comments

        """
        pass
    
    @bind
    def set_nested_int_vector(self, v: List[List[int]]) -> None:
        
        pass

    @bind
    def get_nested_int_vector(self) -> List[List[int]]:
        
        pass

    @bind
    def set_nested_int_map(self, m: Dict[int, Dict[int, int]]) -> None:
        
        pass

    @bind
    def get_nested_int_map(self) -> Dict[int, Dict[int, int]]:
        
        pass

    @bind
    def mixed_example_with_many_args(self, v1: List[List[int]], v2: List[List[int]], m1: Dict[int, Dict[int, int]], m2: Dict[int, Dict[int, int]]) -> None:
        
        pass

    @bind
    def set_vector_of_int_maps(self, v: List[Dict[int, int]]) -> None:
        
        pass

    @bind
    def get_vector_of_int_maps(self) -> List[Dict[int, int]]:
        
        pass

    @bind
    def set_map_of_int_vectors(self, m: Dict[int, List[int]]) -> None:
        
        pass

    @bind
    def get_map_of_int_vectors(self) -> Dict[int, List[int]]:
        
        pass

    @bind
    def set_complex_string_vector(self, v: List[List[List[str]]]) -> None:
        
        pass

    @bind
    def get_complex_string_vector(self) -> List[List[List[str]]]:
        
        pass

    @bind
    def set_complex_string_map(self, m: Dict[str, Dict[str, Dict[str, str]]]) -> None:
        
        pass

    @bind
    def get_complex_string_map(self) -> Dict[str, Dict[str, Dict[str, str]]]:
        
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass
