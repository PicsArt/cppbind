"""
  ______ .______   .______   .______    __  .__   __.  _______  
 /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
|  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
|  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
|  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 

This file is generated by cppbind on 08/11/2022-07:34.
Please do not change it manually.
"""
from __future__ import annotations

from abc import abstractmethod
from typing import *

import examples.getters.fruits as pybind_fruits_pygen
from examples_lib.cppbind.cppbind_metaclass_pygen import *
from examples_lib.cppbind.cppbind_utils_pygen import *


class FruitType(metaclass=CppBindEnumMetaclass):
    
    Apple = pybind_fruits_pygen.FruitType.Apple
    Pineapple = pybind_fruits_pygen.FruitType.Pineapple

    def __int__(self):
        return self.value


class Fruit(metaclass=CppBindMetaclass):
    @abstractmethod
    def __init__(self, *args, **kwargs):
        pass
    
    @property
    @bind
    def type(self) -> FruitType:
        
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass


class Apple(Fruit, metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @property
    @bind
    def type(self) -> FruitType:
        
        pass


class Pineapple(Fruit, metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @property
    @bind
    def type(self) -> FruitType:
        
        pass


class Fruits(metaclass=CppBindMetaclass):
    """
    An example class containing template getters.
    """
    
    @bind
    def __init__(self, fruits: List[Fruit]):
        
        pass
    
    @property
    @bind
    def apples(self) -> List[Apple]:
        
        pass

    @property
    @bind
    def pineapple(self) -> List[Pineapple]:
        
        pass

    @property
    @bind
    def apples_with_pineapples(self) -> List[Fruit]:
        
        pass

    @apples_with_pineapples.setter
    @bind
    def apples_with_pineapples(self, value: List[Fruit]):
        
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass
