"""
  ______ .______   .______   .______    __  .__   __.  _______  
 /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
|  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
|  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
|  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 

This file is generated by cppbind on 08/11/2022-07:34.
Please do not change it manually.
"""
from __future__ import annotations

from typing import *

import examples.inheritance.animal as pybind_animal_pygen
from examples_lib.cppbind.cppbind_metaclass_pygen import *
from examples_lib.cppbind.cppbind_utils_pygen import *


class Animal(metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @bind
    def type_name(self) -> str:
        
        pass

    @bind
    def is_equal_to(self, a: Animal) -> bool:
        
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass


class TerrestrialAnimal(Animal, metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @bind
    def type_name(self) -> str:
        
        pass


class AquaticAnimal(Animal, metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @bind
    def type_name(self) -> str:
        
        pass


class Frog(TerrestrialAnimal, AquaticAnimal, metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass
    
    @bind
    def type_name(self) -> str:
        
        pass


class LittleFrog(Frog, metaclass=CppBindMetaclass):
    """
    Class to help checking the empty case of descendants list
    """
    
    @bind
    def __init__(self):
        
        pass


class AnimalUsage(metaclass=CppBindMetaclass):
    
    @bind
    def __init__(self):
        
        pass

    @bind
    def __init__(self, little_frog: LittleFrog):
        
        pass
    
    @classmethod
    @bind
    def get_animal_type_name(cls, animal: Animal) -> str:
        
        pass

    @classmethod
    @bind
    def get_aquatic_animal_type_name(cls, animal: AquaticAnimal) -> str:
        
        pass

    @bind
    def get_animal(self) -> Animal:
        
        pass

    @bind
    def get_aquatic_animal(self) -> AquaticAnimal:
        
        pass

    @bind
    def get_frog(self) -> Frog:
        
        pass

    @bind
    def get_little_frog(self) -> Frog:
        """
        Method to check that any downcast is not done when descendants=[]
        """
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass
