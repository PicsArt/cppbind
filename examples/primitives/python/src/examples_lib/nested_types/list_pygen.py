"""
  ______ .______   .______   .______    __  .__   __.  _______  
 /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
|  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
|  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
|  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 

This file is generated by cppbind on 08/11/2022-07:34.
Please do not change it manually.
"""
from __future__ import annotations

from typing import *

import examples.nested_types.list as pybind_list_pygen
from examples_lib.cppbind.cppbind_metaclass_pygen import *
from examples_lib.cppbind.cppbind_utils_pygen import *


class List(metaclass=CppBindMetaclass):
    """
    An example with multi level nested type using header_code_fragment to create an alias in target languages.
    """
    
    @bind
    def __init__(self):
        
        pass
    
    @property
    @bind
    def back(self) -> List.Item:
        
        pass
    

    class Item(metaclass=CppBindMetaclass):
        
        @bind
        def __init__(self, v: List.Item.Value):
            
            pass
        
        @property
        @bind
        def value(self) -> List.Item.Value:
            
            pass

        @value.setter
        @bind
        def value(self, value: List.Item.Value):
            
            pass
        

        class Value(metaclass=CppBindMetaclass):
            
            @bind
            def __init__(self, _value: int):
                
                pass
            
            @property
            @bind
            def value(self) -> int:
                
                pass

            @value.setter
            @bind
            def value(self, value: int):
                
                pass

            @bind
            def __repr__(self) -> str:
                """
                CppBind generated __repr__ method returning underlying C++ object type and id.
                """
                pass

    @bind
    def push_back(self, item: List.Item) -> None:
        
        pass

    @bind
    def pop_back(self) -> None:
        
        pass
