"""
  ______ .______   .______   .______    __  .__   __.  _______  
 /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
|  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
|  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
|  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 

This file is generated by cppbind on 08/11/2022-07:34.
Please do not change it manually.
"""
from __future__ import annotations

from typing import *

import examples.templates.addressable as pybind_addressable_pygen
import examples_lib.simple.root_pygen as simple_root_pygen
from examples_lib.cppbind.cppbind_metaclass_pygen import *
from examples_lib.cppbind.cppbind_utils_pygen import *


class AddressableRoot(metaclass=CppBindMetaclass):
    """
    Addressable is a base class for all the objects, that have abs path.
    FIXME: swift.descendants is given manually since we have an issue with descendants list formation for templates (#410)
    """
    
    @bind
    def __init__(self, parent: simple_root_pygen.Root, name: str):
        """
        comments
        """
        pass
    
    @bind
    def abs_path(self) -> str:
        """
        comments
        @brief Get object's abs path based on parent's abs path and object's name
        @return the abs path of the object
        """
        pass

    @bind
    def __repr__(self) -> str:
        """
        CppBind generated __repr__ method returning underlying C++ object type and id.
        """
        pass
