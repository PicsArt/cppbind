"""
,--.,------. ,----.   ,------.,--.  ,--. 
|  ||  .---''  .-.|   |  .---'|  ,'.|  | 
|  ||  `--, |  | .---.|  `--, |  |' '  | 
|  ||  `---.'  '--'  ||  `---.|  | `   | 
`--'`------' `------' `------'`--'  `--' 

This file is generated by iegen on 07/09/2021-13:52.
Please do not change it manually.
"""

from __future__ import annotations

from typing import *

import examples.getters.many_type_template_getter as pybind_many_type_template_getter_pygen
from bind_utils import *
from metaclass import *


class Foo(metaclass=OriginalMethodsMetaclass):
    """
    Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L12
    <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L12>`_
    """
    
    @property
    @bind
    def value(self) -> int:
        """
        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L17
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L17>`_
        """
        pass

    @value.setter
    @bind
    def value(self, value: int):
        """
        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L17
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L17>`_
        """
        pass


class Bar(metaclass=OriginalMethodsMetaclass):
    """
    Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L29
    <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L29>`_
    """
    
    @property
    @bind
    def value(self) -> int:
        """
        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L34
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L34>`_
        """
        pass

    @value.setter
    @bind
    def value(self, value: int):
        """
        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L34
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L34>`_
        """
        pass


class ManyTypeTemplateGetter(metaclass=OriginalMethodsMetaclass):
    """
    An example class containing template getters that depend on more than one type.

    Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L47
    <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L47>`_
    """
    
    @bind
    def __init__(self):
        """
        Default constructor.

        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L55
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L55>`_
        """
        pass
    
    @property
    @bind
    def foo_bar(self) -> tuple:
        """
        Template getter example with return type from more than one template argument.
        As we don´t specify a name here then type names(Foo and Bar) will be used with appropriate naming convention.
        E.g. for python will be foo_bar.

        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L71
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L71>`_
        """
        pass

    @property
    @bind
    def foo_bar_pair(self) -> tuple:
        """
        Template getter example with return type from more than one template argument.
        Giving a name here is important as we have another template getter that can have the same types.
        If we won´t specify the name here then both will have the same name retrieved from types names
        thus this one will override the previous one or the code won´t compile.
        In this case we can specify name only for the first arguments, as for the second we have one option and this way all cases will be covered.

        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L97
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L97>`_
        """
        pass

    @property
    @bind
    def bar_bar_pair(self) -> tuple:
        """
        Template getter example with return type from more than one template argument.
        Giving a name here is important as we have another template getter that can have the same types.
        If we won´t specify the name here then both will have the same name retrieved from types names
        thus this one will override the previous one or the code won´t compile.
        In this case we can specify name only for the first arguments, as for the second we have one option and this way all cases will be covered.

        Documentation generated from: `cxx/getters/many_type_template_getter.hpp#L97
        <https://github.com/PicsArt/iegen/tree/master/examples/primitives/cxx/getters/many_type_template_getter.hpp#L97>`_
        """
        pass
