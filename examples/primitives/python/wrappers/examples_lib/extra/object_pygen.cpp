/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:33.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/extra/object.hpp"

namespace py = pybind11;

void bindExamplesLibExtraObjectPygen(py::module& m) {
    {
        using namespace cppbind;
        py::class_<cppbind::Object, std::shared_ptr<cppbind::Object>> object(m, "Object");
        object.def("__repr__", &cppbind::Object::toDebugString, py::return_value_policy::automatic);
        object.def("__str__", &cppbind::Object::toString, py::return_value_policy::automatic);
        object.def("class_name", &cppbind::Object::className, py::return_value_policy::automatic);
        object.def("__eq__", py::overload_cast<std::shared_ptr<Object>>(&cppbind::Object::equals, py::const_), py::arg("other"), py::return_value_policy::automatic);
        object.def("__hash__", &cppbind::Object::hash, py::return_value_policy::automatic);
        object.def("debug_info", &cppbind::Object::debugInfo, py::return_value_policy::automatic);
        object.def("bytes_count", &cppbind::Object::bytesCount, py::return_value_policy::automatic);
    }
} /* bindExamplesLibExtraObjectPygen */
