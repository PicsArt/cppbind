/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 07/06/2022-15:50.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/globs/utils.h"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"

namespace py = pybind11;

void bindExamplesLibGlobsUtilsPygen(py::module& m) {
    {
        m.def("mul", py::overload_cast<int, int>(&::mul), py::arg("first"), py::arg("second"), py::return_value_policy::automatic);
    }
    {
        m.def("mul_three", py::overload_cast<int, int, int>(&::mul), py::arg("first"), py::arg("second"), py::arg("third"), py::return_value_policy::automatic);
    }
    {
        m.def("concat", py::overload_cast<const std::string &, const std::string &>(&::concat), py::arg("str1"), py::arg("str2"), py::return_value_policy::automatic);
    }
    {
        m.def("concat1", py::overload_cast<const std::string &, const std::string &, const std::string &>(&::concat), py::arg("str1"), py::arg("str2"), py::arg("str3"), py::return_value_policy::automatic);
    }
    {
        m.def("max_int", &::max<int>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        m.def("max_string", &::max<std::string>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("make_pair_project_project", &cppbind::example::makePair<cppbind::example::Project, cppbind::example::Project>, py::arg("a"), py::arg("b"), py::return_value_policy::reference);
    }
    {
        using namespace cppbind::example;
        m.def("make_pair_root_project", &cppbind::example::makePair<cppbind::example::Root, cppbind::example::Project>, py::arg("a"), py::arg("b"), py::return_value_policy::reference);
    }
    {
        m.def("optional_f_d_ptr", &::optionalFDPtr, py::arg("project") = nullptr, py::return_value_policy::reference);
    }
    {
        m.def("do_nothing", &::doNothing);
    }
} /* bindExamplesLibGlobsUtilsPygen */
