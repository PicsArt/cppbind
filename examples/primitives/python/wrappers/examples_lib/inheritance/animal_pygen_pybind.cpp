/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:25.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/inheritance/animal.hpp"

namespace py = pybind11;

void bindExamplesLibInheritanceAnimalPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Animal> animal(m, "Animal");
        
        animal.def(py::init<>());
        animal.def("type_name", &cppbind::example::Animal::typeName, py::return_value_policy::automatic);
        animal.def("is_equal_to", &cppbind::example::Animal::isEqualTo, py::arg("a"), py::return_value_policy::automatic);
        animal.def("__repr__", [](const cppbind::example::Animal& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Animal";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::TerrestrialAnimal, cppbind::example::Animal> terrestrialAnimal(m, "TerrestrialAnimal");
        
        terrestrialAnimal.def(py::init<>());
        terrestrialAnimal.def("type_name", &cppbind::example::TerrestrialAnimal::typeName, py::return_value_policy::automatic);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::AquaticAnimal, cppbind::example::Animal> aquaticAnimal(m, "AquaticAnimal");
        
        aquaticAnimal.def(py::init<>());
        aquaticAnimal.def("type_name", &cppbind::example::AquaticAnimal::typeName, py::return_value_policy::automatic);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Frog, cppbind::example::TerrestrialAnimal, cppbind::example::AquaticAnimal> frog(m, "Frog");
        
        frog.def(py::init<>());
        frog.def("type_name", &cppbind::example::Frog::typeName, py::return_value_policy::automatic);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::LittleFrog, cppbind::example::Frog> littleFrog(m, "LittleFrog");
        
        littleFrog.def(py::init<>());  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::AnimalUsage> animalUsage(m, "AnimalUsage");
        
        animalUsage.def(py::init<>());

        animalUsage.def(py::init<cppbind::example::LittleFrog>(), py::arg("little_frog"));
        animalUsage.def_static("get_animal_type_name", &cppbind::example::AnimalUsage::getAnimalTypeName, py::arg("animal"), py::return_value_policy::automatic);
        animalUsage.def_static("get_aquatic_animal_type_name", &cppbind::example::AnimalUsage::getAquaticAnimalTypeName, py::arg("animal"), py::return_value_policy::automatic);
        animalUsage.def("get_animal", &cppbind::example::AnimalUsage::getAnimal, py::return_value_policy::reference_internal);
        animalUsage.def("get_aquatic_animal", &cppbind::example::AnimalUsage::getAquaticAnimal, py::return_value_policy::reference_internal);
        animalUsage.def("get_frog", &cppbind::example::AnimalUsage::getFrog, py::return_value_policy::reference_internal);
        animalUsage.def("get_little_frog", &cppbind::example::AnimalUsage::getLittleFrog, py::return_value_policy::reference);
        animalUsage.def("__repr__", [](const cppbind::example::AnimalUsage& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::AnimalUsage";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibInheritanceAnimalPygen */
