/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 11/10/2022-07:26.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/inheritance/time.hpp"
#include "cxx/inheritance/base.hpp"
#include "cxx/inheritance/datetime.hpp"
#include "cxx/inheritance/date.hpp"

namespace py = pybind11;

void bindExamplesLibInheritanceDatetimePygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Time, std::shared_ptr<cppbind::example::Time>, cppbind::example::Base> time(m, "Time");
        
        time.def(py::init<int, int, int>(), py::arg("h"), py::arg("m"), py::arg("s"));
        time.def("value", &cppbind::example::Time::value, py::return_value_policy::automatic);

        time.def_property_readonly("time", &cppbind::example::Time::time, py::return_value_policy::reference_internal);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::DateTime, std::shared_ptr<cppbind::example::DateTime>, cppbind::example::Time, cppbind::example::Date> dateTime(m, "DateTime");
        
        dateTime.def(py::init<int, int, int, int, int, int>(), py::arg("d"), py::arg("mo"), py::arg("y"), py::arg("h"), py::arg("mi"), py::arg("s"));
        dateTime.def("value", &cppbind::example::DateTime::value, py::return_value_policy::automatic);

        dateTime.def_property_readonly("datetime", &cppbind::example::DateTime::datetime, py::return_value_policy::reference_internal);  
    }
} /* bindExamplesLibInheritanceDatetimePygen */
