/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:25.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/inheritance/symbol.hpp"

namespace py = pybind11;

void bindExamplesLibInheritanceSymbolPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Sign> sign(m, "Sign");
        
        sign.def(py::init<>());
        sign.def("type_name", &cppbind::example::Sign::typeName, py::return_value_policy::automatic);
        sign.def("__repr__", [](const cppbind::example::Sign& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Sign";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Text> text(m, "Text");
        
        text.def(py::init<>());
        text.def("type_name", &cppbind::example::Text::typeName, py::return_value_policy::automatic);
        text.def("__repr__", [](const cppbind::example::Text& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Text";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Digit, cppbind::example::Sign, cppbind::example::Text> digit(m, "Digit");
        
        digit.def(py::init<>());
        digit.def("type_name", &cppbind::example::Digit::typeName, py::return_value_policy::automatic);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::SymbolUsage> symbolUsage(m, "SymbolUsage");
        
        symbolUsage.def(py::init<>());

        symbolUsage.def(py::init<cppbind::example::Digit *>(), py::arg("d"));
        symbolUsage.def("get_text_type", &cppbind::example::SymbolUsage::getTextType, py::arg("t"), py::return_value_policy::automatic);
        symbolUsage.def("get_sign_type", &cppbind::example::SymbolUsage::getSignType, py::arg("s"), py::return_value_policy::automatic);
        symbolUsage.def("get_text_id", &cppbind::example::SymbolUsage::getTextId, py::arg("t"), py::return_value_policy::automatic);
        symbolUsage.def("get_sign_id", &cppbind::example::SymbolUsage::getSignId, py::arg("s"), py::return_value_policy::automatic);
        symbolUsage.def("get_text_ptr", &cppbind::example::SymbolUsage::getTextPtr, py::return_value_policy::reference);
        symbolUsage.def("get_sign_ptr", &cppbind::example::SymbolUsage::getSignPtr, py::return_value_policy::reference);
        symbolUsage.def("__repr__", [](const cppbind::example::SymbolUsage& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::SymbolUsage";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibInheritanceSymbolPygen */
