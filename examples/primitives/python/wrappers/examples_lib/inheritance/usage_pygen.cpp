/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-05:22.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/inheritance/usage.hpp"
#include "cxx/inheritance/parallelogram.hpp"
#include "cxx/inheritance/vehicle.hpp"
#include "cxx/inheritance/bicycle.hpp"
#include "cxx/inheritance/date.hpp"

namespace py = pybind11;

void bindExamplesLibInheritanceUsagePygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::GeometricFigure> geometricFigure(m, "GeometricFigure");
        
        geometricFigure.def(py::init<cppbind::example::Parallelogram *>(), py::arg("p"));

        geometricFigure.def_property("parallelogram", py::cpp_function(&cppbind::example::GeometricFigure::parallelogram, py::return_value_policy::reference_internal), &cppbind::example::GeometricFigure::setParallelogram);

        geometricFigure.def_property("nullable_parallelogram", py::cpp_function(&cppbind::example::GeometricFigure::nullableParallelogram, py::return_value_policy::reference_internal), &cppbind::example::GeometricFigure::setNullableParallelogram);
        geometricFigure.def("__repr__", [](const cppbind::example::GeometricFigure& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::GeometricFigure";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyVehicle, std::shared_ptr<cppbind::example::MyVehicle>> myVehicle(m, "MyVehicle");
        
        myVehicle.def(py::init<std::shared_ptr<Vehicle>, std::shared_ptr<const Vehicle>>(), py::arg("v"), py::arg("cv"));

        myVehicle.def_property("vehicle", py::cpp_function(&cppbind::example::MyVehicle::vehicle, py::return_value_policy::reference_internal), &cppbind::example::MyVehicle::setVehicle);

        myVehicle.def_property("const_vehicle", py::cpp_function(&cppbind::example::MyVehicle::constVehicle, py::return_value_policy::reference_internal), &cppbind::example::MyVehicle::setConstVehicle);
        myVehicle.def("__repr__", [](const cppbind::example::MyVehicle& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::MyVehicle";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyBicycle, std::shared_ptr<cppbind::example::MyBicycle>> myBicycle(m, "MyBicycle");
        
        myBicycle.def(py::init<std::shared_ptr<Bicycle>>(), py::arg("b"));

        myBicycle.def_property("bicycle", py::cpp_function(&cppbind::example::MyBicycle::bicycle, py::return_value_policy::reference_internal), &cppbind::example::MyBicycle::setBicycle);
        myBicycle.def("__repr__", [](const cppbind::example::MyBicycle& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::MyBicycle";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyCalendar, std::shared_ptr<cppbind::example::MyCalendar>> myCalendar(m, "MyCalendar");
        
        myCalendar.def(py::init<const std::vector<std::shared_ptr<Date>> &>(), py::arg("events"));
        myCalendar.def("add_event", &cppbind::example::MyCalendar::addEvent, py::arg("e"));

        myCalendar.def_property_readonly("events", &cppbind::example::MyCalendar::events, py::return_value_policy::reference_internal);
        myCalendar.def("__repr__", [](const cppbind::example::MyCalendar& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::MyCalendar";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibInheritanceUsagePygen */
