/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:33.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/misc/size_buffer.hpp"

namespace py = pybind11;

void bindExamplesLibMiscSizeBufferPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::SizeUsage> sizeUsage(m, "SizeUsage");
        sizeUsage.def_static("multiply_by", &cppbind::example::SizeUsage::multiplyBy, py::arg("size"), py::arg("n"), py::return_value_policy::automatic);
        sizeUsage.def_static("double_size_f", &cppbind::example::SizeUsage::doubleSizeF, py::arg("resolution") = SizeF(NAN,NAN), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::BufferUsage> bufferUsage(m, "BufferUsage");
        
        bufferUsage.def(py::init<>());
        bufferUsage.def("usage1", &cppbind::example::BufferUsage::usage1, py::arg("b"), py::return_value_policy::automatic);
        bufferUsage.def("usage2", &cppbind::example::BufferUsage::usage2, py::return_value_policy::automatic);
    }
} /* bindExamplesLibMiscSizeBufferPygen */
