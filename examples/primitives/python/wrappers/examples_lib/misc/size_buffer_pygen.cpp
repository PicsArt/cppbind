/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/07/2022-18:26.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/misc/size_buffer.hpp"

namespace py = pybind11;

void bindExamplesLibMiscSizeBuffer(py::module& m) {
    {
        using namespace iegen::example;
        py::class_<iegen::example::SizeUsage> sizeUsage(m, "SizeUsage");
        sizeUsage.def_static("multiply_by", &iegen::example::SizeUsage::multiplyBy, py::arg("size"), py::arg("n"), py::return_value_policy::automatic);
        sizeUsage.def_static("double_size_f", &iegen::example::SizeUsage::doubleSizeF, py::arg("resolution") = SizeF(NAN,NAN), py::return_value_policy::automatic);
    }
    {
        using namespace iegen::example;
        py::class_<iegen::example::BufferUsage> bufferUsage(m, "BufferUsage");
        
        bufferUsage.def(py::init<>());
        bufferUsage.def("usage1", &iegen::example::BufferUsage::usage1, py::arg("b"), py::return_value_policy::automatic);
        bufferUsage.def("usage2", &iegen::example::BufferUsage::usage2, py::return_value_policy::automatic);
    }
} /* bindExamplesLibMiscSizeBuffer */
