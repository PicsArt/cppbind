/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/14/2022-14:05.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/misc/yaml_example.hpp"

namespace py = pybind11;

void bindExamplesLibMiscYamlExample(py::module& m) {
    {
        using namespace iegen::example;
        py::class_<iegen::example::WithExternalAPIComments> withExternalAPIComments(m, "WithExternalAPIComments");
        
        withExternalAPIComments.def(py::init<std::string>(), py::arg("s"));
        withExternalAPIComments.def_static("ret_int", &iegen::example::WithExternalAPIComments::retInt, py::arg("n"), py::return_value_policy::automatic);

        withExternalAPIComments.def_property("str", py::cpp_function(&iegen::example::WithExternalAPIComments::str, py::return_value_policy::reference_internal), &iegen::example::WithExternalAPIComments::setStr);
        withExternalAPIComments.def_static("max", &iegen::example::WithExternalAPIComments::max<int>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
        withExternalAPIComments.def_static("max", &iegen::example::WithExternalAPIComments::max<std::string>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace iegen::example;
        py::class_<iegen::example::Adder<int>> adderInt(m, "AdderInt");
        adderInt.def_static("add", &iegen::example::Adder<int>::add, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace iegen::example;
        py::class_<iegen::example::Adder<double>> adderFloat(m, "AdderFloat");
        adderFloat.def_static("add", &iegen::example::Adder<double>::add, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace iegen::example;
        py::enum_<iegen::example::color>(m, "color")
            .value("RED", iegen::example::color::RED)
            .value("GREEN", iegen::example::color::GREEN)
            .value("BLUE", iegen::example::color::BLUE);
    }
} /* bindExamplesLibMiscYamlExample */
