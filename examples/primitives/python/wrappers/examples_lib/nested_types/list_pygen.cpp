/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/08/2022-06:11.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/nested_types/list.hpp"

namespace py = pybind11;

void bindExamplesLibNestedTypesList(py::module& m) {
    {
        using namespace iegen::example;
        py::class_<iegen::example::List> list(m, "List");
        {
            py::class_<iegen::example::List::Item> item(m, "Item");
            {
                py::class_<iegen::example::List::Item::Value> value(m, "Value");
                value.def_readwrite("value", &iegen::example::List::Item::Value::value, py::return_value_policy::reference_internal);

                value.def(py::init<int>(), py::arg("_value"));
            }
            item.def_readwrite("value", &iegen::example::List::Item::value, py::return_value_policy::reference_internal);

            item.def(py::init<iegen::example::List::Item::Value *>(), py::arg("v"));
        }

        list.def(py::init<>());
        list.def("push_back", &iegen::example::List::push_back, py::arg("item"), py::return_value_policy::automatic);
        list.def("pop_back", &iegen::example::List::pop_back, py::return_value_policy::automatic);

        list.def_property_readonly("back", &iegen::example::List::back, py::return_value_policy::reference);
    }
} /* bindExamplesLibNestedTypesList */
