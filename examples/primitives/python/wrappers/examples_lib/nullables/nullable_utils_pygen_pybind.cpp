/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:25.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/nullables/nullable_utils.hpp"

namespace py = pybind11;

void bindExamplesLibNullablesNullableUtilsPygen(py::module& m) {
    {
        using namespace cppbind::example::nullable;
        py::class_<cppbind::example::nullable::NumberInt, std::shared_ptr<cppbind::example::nullable::NumberInt>> numberInt(m, "NumberInt");
        
        numberInt.def(py::init<int>(), py::arg("val_"));
        numberInt.def_readonly("value", &cppbind::example::nullable::NumberInt::value, py::return_value_policy::reference_internal);
        numberInt.def("__repr__", [](const cppbind::example::nullable::NumberInt& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::nullable::NumberInt";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example::nullable;
        py::class_<cppbind::example::nullable::NumberDouble> numberDouble(m, "NumberDouble");
        
        numberDouble.def(py::init<double>(), py::arg("val_"));
        numberDouble.def_readonly("value", &cppbind::example::nullable::NumberDouble::value, py::return_value_policy::reference_internal);
        numberDouble.def("__repr__", [](const cppbind::example::nullable::NumberDouble& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::nullable::NumberDouble";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example::nullable;
        py::class_<cppbind::example::nullable::Utils, std::shared_ptr<cppbind::example::nullable::Utils>> utils(m, "Utils");
        
        utils.def(py::init<cppbind::example::nullable::NumberDouble *>(), py::arg("num"));
        utils.def_static("max", py::overload_cast<cppbind::example::nullable::NumberDouble *, cppbind::example::nullable::NumberDouble *>(&cppbind::example::nullable::Utils::max), py::arg("first"), py::arg("second"), py::return_value_policy::reference);
        utils.def_static("max", py::overload_cast<std::shared_ptr<NumberInt>, std::shared_ptr<NumberInt>>(&cppbind::example::nullable::Utils::max), py::arg("first"), py::arg("second"), py::return_value_policy::automatic);
        utils.def_static("check_nonnull_arg", &cppbind::example::nullable::Utils::checkNonnullArg, py::arg("number"));
        utils.def_static("check_nonnull_return", &cppbind::example::nullable::Utils::checkNonnullReturn, py::return_value_policy::reference);

        utils.def_property("nullable", py::cpp_function(&cppbind::example::nullable::Utils::nullable, py::return_value_policy::reference), &cppbind::example::nullable::Utils::setNullable);

        utils.def_property("non_null", py::cpp_function(&cppbind::example::nullable::Utils::nonNull, py::return_value_policy::reference), &cppbind::example::nullable::Utils::setNonNull);
        utils.def_readwrite("num_double", &cppbind::example::nullable::Utils::numDouble, py::return_value_policy::reference);
        utils.def_readwrite("num_int", &cppbind::example::nullable::Utils::numInt, py::return_value_policy::reference_internal);
        utils.def("__repr__", [](const cppbind::example::nullable::Utils& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::nullable::Utils";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example::nullable;
        m.def("reverse_string", &cppbind::example::nullable::reverseString, py::arg("s"), py::return_value_policy::automatic);
    }
} /* bindExamplesLibNullablesNullableUtilsPygen */
