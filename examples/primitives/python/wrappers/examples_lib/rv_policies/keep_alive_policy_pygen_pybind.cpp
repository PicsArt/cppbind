/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:25.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/rv_policies/keep_alive_policy.hpp"

namespace py = pybind11;

void bindExamplesLibRvPoliciesKeepAlivePolicyPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Child1> child1(m, "Child1");
        
        child1.def(py::init<std::string>(), py::arg("name"));

        child1.def_property_readonly("name", &cppbind::example::Child1::name, py::return_value_policy::reference_internal);
        child1.def("__repr__", [](const cppbind::example::Child1& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Child1";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Child3> child3(m, "Child3");
        
        child3.def(py::init<std::string>(), py::arg("name"));

        child3.def_property_readonly("name", &cppbind::example::Child3::name, py::return_value_policy::reference_internal);
        child3.def("__repr__", [](const cppbind::example::Child3& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Child3";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Child2, std::shared_ptr<cppbind::example::Child2>> child2(m, "Child2");
        
        child2.def(py::init<std::string>(), py::arg("name"));

        child2.def_property_readonly("name", &cppbind::example::Child2::name, py::return_value_policy::reference_internal);
        child2.def("__repr__", [](const cppbind::example::Child2& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Child2";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Parent1> parent1(m, "Parent1");
        
        parent1.def(py::init<std::string, cppbind::example::Child1 *, std::shared_ptr<Child2>, cppbind::example::Child3 *>(), py::arg("name"), py::arg("child1"), py::arg("child2"), py::arg("_child3"), py::keep_alive<1, 3>(), py::keep_alive<1, 5>());

        parent1.def_property_readonly("name", &cppbind::example::Parent1::name, py::return_value_policy::reference_internal);

        parent1.def_property("child1", py::cpp_function(&cppbind::example::Parent1::child1, py::return_value_policy::reference_internal), &cppbind::example::Parent1::setChild1);

        parent1.def_property_readonly("child2", &cppbind::example::Parent1::child2, py::return_value_policy::reference_internal);
        parent1.def_readwrite("child3", &cppbind::example::Parent1::child3, py::return_value_policy::reference_internal, py::keep_alive<1, 2>());
        parent1.def("__repr__", [](const cppbind::example::Parent1& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Parent1";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Parent2> parent2(m, "Parent2");
        
        parent2.def(py::init<std::string>(), py::arg("name"));

        parent2.def_property_readonly("name", &cppbind::example::Parent2::name, py::return_value_policy::reference_internal);

        parent2.def_property_readonly("children1", &cppbind::example::Parent2::children1, py::return_value_policy::reference_internal);
        parent2.def("add_child1", &cppbind::example::Parent2::addChild1, py::arg("c"));
        parent2.def("add_children1", &cppbind::example::Parent2::addChildren1, py::arg("c"), py::keep_alive<1, 2>());
        parent2.def("add_child2", &cppbind::example::Parent2::addChild2, py::arg("c"));
        parent2.def("add_children2", &cppbind::example::Parent2::addChildren2, py::arg("c"));

        parent2.def_property_readonly("children2", &cppbind::example::Parent2::children2, py::return_value_policy::reference_internal);
        parent2.def("__repr__", [](const cppbind::example::Parent2& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Parent2";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibRvPoliciesKeepAlivePolicyPygen */
