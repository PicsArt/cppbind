/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:33.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/rv_policies/return_value_policies.hpp"

namespace py = pybind11;

void bindExamplesLibRvPoliciesReturnValuePoliciesPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Value> value(m, "Value");
        
        value.def(py::init<std::string>(), py::arg("name"));

        value.def_property("name", py::cpp_function(&cppbind::example::Value::name, py::return_value_policy::reference_internal), &cppbind::example::Value::setName);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::ValueSharedRef, std::shared_ptr<cppbind::example::ValueSharedRef>> valueSharedRef(m, "ValueSharedRef");
        
        valueSharedRef.def(py::init<std::string>(), py::arg("name"));

        valueSharedRef.def_property("name", py::cpp_function(&cppbind::example::ValueSharedRef::name, py::return_value_policy::reference_internal), &cppbind::example::ValueSharedRef::setName);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::ValuesHolder> valuesHolder(m, "ValuesHolder");
        
        valuesHolder.def(py::init<>());

        valuesHolder.def(py::init<cppbind::example::Value *, std::shared_ptr<ValueSharedRef>>(), py::arg("value_ptr"), py::arg("value_ref"));
        valuesHolder.def("get_ptr_default", &cppbind::example::ValuesHolder::getPtrDefault, py::return_value_policy::automatic);
        valuesHolder.def("get_ptr_copy", &cppbind::example::ValuesHolder::getPtrCopy, py::return_value_policy::copy);
        valuesHolder.def("get_ptr_move", &cppbind::example::ValuesHolder::getPtrMove, py::return_value_policy::move);
        valuesHolder.def("get_ptr_reference", &cppbind::example::ValuesHolder::getPtrReference, py::return_value_policy::reference);
        valuesHolder.def("get_ptr_automatic", &cppbind::example::ValuesHolder::getPtrAutomatic, py::return_value_policy::automatic);
        valuesHolder.def("get_ptr_automatic_reference", &cppbind::example::ValuesHolder::getPtrAutomaticReference, py::return_value_policy::automatic_reference);
        valuesHolder.def("get_ptr_take_ownership", &cppbind::example::ValuesHolder::getPtrTakeOwnership, py::return_value_policy::take_ownership);
        valuesHolder.def("get_value_default", &cppbind::example::ValuesHolder::getValueDefault, py::return_value_policy::automatic);
        valuesHolder.def("get_value_copy", &cppbind::example::ValuesHolder::getValueCopy, py::return_value_policy::copy);
        valuesHolder.def("get_value_move", &cppbind::example::ValuesHolder::getValueMove, py::return_value_policy::move);
        valuesHolder.def("get_value_reference", &cppbind::example::ValuesHolder::getValueReference, py::return_value_policy::reference);
        valuesHolder.def("get_value_automatic", &cppbind::example::ValuesHolder::getValueAutomatic, py::return_value_policy::automatic);
        valuesHolder.def("get_value_automatic_reference", &cppbind::example::ValuesHolder::getValueAutomaticReference, py::return_value_policy::automatic_reference);
        valuesHolder.def("get_value_take_ownership", &cppbind::example::ValuesHolder::getValueTakeOwnership, py::return_value_policy::take_ownership);
        valuesHolder.def("get_ref_copy", &cppbind::example::ValuesHolder::getRefCopy, py::return_value_policy::copy);
        valuesHolder.def("get_ref_default", &cppbind::example::ValuesHolder::getRefDefault, py::return_value_policy::automatic);
        valuesHolder.def("get_ref_move", &cppbind::example::ValuesHolder::getRefMove, py::return_value_policy::move);
        valuesHolder.def("get_ref_reference", &cppbind::example::ValuesHolder::getRefReference, py::return_value_policy::reference);
        valuesHolder.def("get_ref_automatic", &cppbind::example::ValuesHolder::getRefAutomatic, py::return_value_policy::automatic);
        valuesHolder.def("get_ref_automatic_reference", &cppbind::example::ValuesHolder::getRefAutomaticReference, py::return_value_policy::automatic_reference);
        valuesHolder.def("get_ref_take_ownership", &cppbind::example::ValuesHolder::getRefTakeOwnership, py::return_value_policy::take_ownership);
        valuesHolder.def("get_shared_ref_default", &cppbind::example::ValuesHolder::getSharedRefDefault, py::return_value_policy::automatic);
        valuesHolder.def("get_shared_ref_copy", &cppbind::example::ValuesHolder::getSharedRefCopy, py::return_value_policy::copy);
        valuesHolder.def("get_shared_ref_move", &cppbind::example::ValuesHolder::getSharedRefMove, py::return_value_policy::move);
        valuesHolder.def("get_shared_ref_reference", &cppbind::example::ValuesHolder::getSharedRefReference, py::return_value_policy::reference);
        valuesHolder.def("get_shared_ref_automatic", &cppbind::example::ValuesHolder::getSharedRefAutomatic, py::return_value_policy::automatic);
        valuesHolder.def("get_shared_ref_automatic_reference", &cppbind::example::ValuesHolder::getSharedRefAutomaticReference, py::return_value_policy::automatic_reference);
        valuesHolder.def("get_shared_ref_take_ownership", &cppbind::example::ValuesHolder::getSharedRefTakeOwnership, py::return_value_policy::take_ownership);
        valuesHolder.def("clean", &cppbind::example::ValuesHolder::clean);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::AnotherValueHolder> anotherValueHolder(m, "AnotherValueHolder");
        
        anotherValueHolder.def(py::init<>());

        anotherValueHolder.def_property_readonly("value", &cppbind::example::AnotherValueHolder::value, py::return_value_policy::reference_internal);

        anotherValueHolder.def_property_readonly("value_reference", &cppbind::example::AnotherValueHolder::valueReference, py::return_value_policy::reference);

        anotherValueHolder.def_property_readonly("shared_value", &cppbind::example::AnotherValueHolder::sharedValue, py::return_value_policy::reference_internal);

        anotherValueHolder.def_property_readonly("shared_value_reference", &cppbind::example::AnotherValueHolder::sharedValueReference, py::return_value_policy::reference);
    }
} /* bindExamplesLibRvPoliciesReturnValuePoliciesPygen */
