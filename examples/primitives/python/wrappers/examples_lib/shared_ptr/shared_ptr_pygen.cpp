/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-05:22.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/shared_ptr/shared_ptr.hpp"

namespace py = pybind11;

void bindExamplesLibSharedPtrSharedPtrPygen(py::module& m) {
    {
        using namespace Example;
        py::class_<Example::Car, std::shared_ptr<Example::Car>> car(m, "Car");
        
        car.def(py::init<int>(), py::arg("cost"));

        car.def_property_readonly("cost", &Example::Car::cost, py::return_value_policy::reference_internal);
        car.def("set_cost_with_car_shared_ptr", &Example::Car::setCostWithCarSharedPtr, py::arg("sp"));
        car.def("set_cost_with_car", &Example::Car::setCostWithCar, py::arg("sp"));
        car.def("set_cost_with_car_const_shared_ptr", &Example::Car::setCostWithCarConstSharedPtr, py::arg("sp"));
        car.def("make_const_shared_ptr", &Example::Car::makeConstSharedPtr, py::arg("sp"), py::return_value_policy::automatic);
        car.def("set_cost_with_car_ref", &Example::Car::setCostWithCarRef, py::arg("sp"));
        car.def("set_cost_with_car_ptr", &Example::Car::setCostWithCarPtr, py::arg("sp"));
        car.def("get_new_car_shared_ptr", &Example::Car::getNewCarSharedPtr, py::return_value_policy::automatic);
        car.def("__repr__", [](const Example::Car& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "Example::Car";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace Example;
        py::class_<Example::CarUsage> carUsage(m, "CarUsage");
        
        carUsage.def(py::init<Example::Car *>(), py::arg("car"));
        carUsage.def("get_car", &Example::CarUsage::getCar, py::return_value_policy::automatic);
        carUsage.def("__repr__", [](const Example::CarUsage& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "Example::CarUsage";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibSharedPtrSharedPtrPygen */
