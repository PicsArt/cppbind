/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:33.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"

namespace py = pybind11;

void bindExamplesLibSimpleProjectPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Project> project(m, "Project");
        
        project.def(py::init<const std::string &>(), py::arg("title"));

        project.def_property_readonly("title", &cppbind::example::Project::title, py::return_value_policy::reference_internal);
        project.def("add_task", &cppbind::example::Project::addTask, py::arg("task"));
        project.def("tasks", &cppbind::example::Project::tasks, py::return_value_policy::reference);
        project.def("equals", &cppbind::example::Project::equals, py::arg("p"), py::return_value_policy::automatic);
    }
} /* bindExamplesLibSimpleProjectPygen */
