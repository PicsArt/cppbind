/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/09/2022-15:09.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/stl_types/std_optional.hpp"
#include "cxx/enums/color.hpp"
#include "cxx/enums/frame.hpp"

namespace py = pybind11;

void bindExamplesLibStlTypesStdOptionalPygen(py::module& m) {
    {
        using namespace cppbind::example;
        m.def("mul_int", &cppbind::example::mul<int>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_float", &cppbind::example::mul<float>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_double", &cppbind::example::mul<double>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_short", &cppbind::example::mul<short>, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_long", &cppbind::example::mulLong, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("reverse_bool", &cppbind::example::reverseBool, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_unsigned_int", &cppbind::example::mulUnsignedInt, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_unsigned_long", &cppbind::example::mulUnsignedLong, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_long_long", &cppbind::example::mulLongLong, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("mul_unsigned_char", &cppbind::example::mulUnsignedChar, py::arg("a"), py::arg("b"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("char_to_upper", &cppbind::example::charToUpper, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("concat_string", &cppbind::example::concatString, py::arg("first"), py::arg("second"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("concat", &cppbind::example::concat, py::arg("v"), py::arg("s"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("concat2", &cppbind::example::concat2, py::arg("v"), py::arg("s"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("same_color", &cppbind::example::sameColor, py::arg("color"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("same_template_optional_int", &cppbind::example::same_template<std::optional<int>>, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("same_template_optional_string", &cppbind::example::same_template<std::optional<std::string>>, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("same_pair", &cppbind::example::samePair, py::arg("pair"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("same_map", &cppbind::example::sameMap, py::arg("map"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::FrameUsage> frameUsage(m, "FrameUsage");
        
        frameUsage.def(py::init<>());
        frameUsage.def("same_frame", &cppbind::example::FrameUsage::sameFrame, py::arg("frame"), py::keep_alive<1, 2>(), py::return_value_policy::automatic);
        frameUsage.def("get_frame", &cppbind::example::FrameUsage::getFrame, py::return_value_policy::reference_internal);
        frameUsage.def("__repr__", [](const cppbind::example::FrameUsage& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::FrameUsage";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibStlTypesStdOptionalPygen */
