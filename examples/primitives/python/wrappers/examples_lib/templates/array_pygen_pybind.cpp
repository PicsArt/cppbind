/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/29/2022-15:15.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/array.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesArrayPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Array<float, 2>> arrayFloat2(m, "ArrayFloat2");
        
        arrayFloat2.def(py::init<const cppbind::example::Array<float, 2> &>(), py::arg("array"));

        arrayFloat2.def(py::init<const std::array<float, 2>>(), py::arg("array"));
        arrayFloat2.def("__getitem__", py::overload_cast<int>(&cppbind::example::Array<float, 2>::operator[]), py::arg("idx"), py::return_value_policy::automatic);
        arrayFloat2.def("__setitem__", [](cppbind::example::Array<float, 2>& self, int idx, float value){ self[idx] = value; });
        arrayFloat2.def("__add__", &cppbind::example::Array<float, 2>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat2.def("__sub__", &cppbind::example::Array<float, 2>::operator-, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat2.def("__eq__", &cppbind::example::Array<float, 2>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat2.def("__ne__", &cppbind::example::Array<float, 2>::operator!=, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat2.def("data", &cppbind::example::Array<float, 2>::data, py::return_value_policy::automatic);
        arrayFloat2.def("__repr__", [](const cppbind::example::Array<float, 2>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Array<float, 2>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Array<float, 3>> arrayFloat3(m, "ArrayFloat3");
        
        arrayFloat3.def(py::init<const cppbind::example::Array<float, 3> &>(), py::arg("array"));

        arrayFloat3.def(py::init<const std::array<float, 3>>(), py::arg("array"));
        arrayFloat3.def("__getitem__", py::overload_cast<int>(&cppbind::example::Array<float, 3>::operator[]), py::arg("idx"), py::return_value_policy::automatic);
        arrayFloat3.def("__setitem__", [](cppbind::example::Array<float, 3>& self, int idx, float value){ self[idx] = value; });
        arrayFloat3.def("__add__", &cppbind::example::Array<float, 3>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat3.def("__sub__", &cppbind::example::Array<float, 3>::operator-, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat3.def("__eq__", &cppbind::example::Array<float, 3>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat3.def("__ne__", &cppbind::example::Array<float, 3>::operator!=, py::arg("rhs"), py::return_value_policy::automatic);
        arrayFloat3.def("data", &cppbind::example::Array<float, 3>::data, py::return_value_policy::automatic);
        arrayFloat3.def("__repr__", [](const cppbind::example::Array<float, 3>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Array<float, 3>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Array<int, 2>> arrayInt2(m, "ArrayInt2");
        
        arrayInt2.def(py::init<const cppbind::example::Array<int, 2> &>(), py::arg("array"));

        arrayInt2.def(py::init<const std::array<int, 2>>(), py::arg("array"));
        arrayInt2.def("__getitem__", py::overload_cast<int>(&cppbind::example::Array<int, 2>::operator[]), py::arg("idx"), py::return_value_policy::automatic);
        arrayInt2.def("__setitem__", [](cppbind::example::Array<int, 2>& self, int idx, int value){ self[idx] = value; });
        arrayInt2.def("__add__", &cppbind::example::Array<int, 2>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt2.def("__sub__", &cppbind::example::Array<int, 2>::operator-, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt2.def("__eq__", &cppbind::example::Array<int, 2>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt2.def("__ne__", &cppbind::example::Array<int, 2>::operator!=, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt2.def("data", &cppbind::example::Array<int, 2>::data, py::return_value_policy::automatic);
        arrayInt2.def("__repr__", [](const cppbind::example::Array<int, 2>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Array<int, 2>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Array<int, 3>> arrayInt3(m, "ArrayInt3");
        
        arrayInt3.def(py::init<const cppbind::example::Array<int, 3> &>(), py::arg("array"));

        arrayInt3.def(py::init<const std::array<int, 3>>(), py::arg("array"));
        arrayInt3.def("__getitem__", py::overload_cast<int>(&cppbind::example::Array<int, 3>::operator[]), py::arg("idx"), py::return_value_policy::automatic);
        arrayInt3.def("__setitem__", [](cppbind::example::Array<int, 3>& self, int idx, int value){ self[idx] = value; });
        arrayInt3.def("__add__", &cppbind::example::Array<int, 3>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt3.def("__sub__", &cppbind::example::Array<int, 3>::operator-, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt3.def("__eq__", &cppbind::example::Array<int, 3>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt3.def("__ne__", &cppbind::example::Array<int, 3>::operator!=, py::arg("rhs"), py::return_value_policy::automatic);
        arrayInt3.def("data", &cppbind::example::Array<int, 3>::data, py::return_value_policy::automatic);
        arrayInt3.def("__repr__", [](const cppbind::example::Array<int, 3>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Array<int, 3>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        m.def("get_first_element_float", &cppbind::example::getFirstElement<float>, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("get_first_element_int", &cppbind::example::getFirstElement<int>, py::arg("a"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("multiply_elements", &cppbind::example::multiplyElements, py::arg("a"), py::arg("num"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("add_to_elements", py::overload_cast<const cppbind::example::ArrayFloat &, int>(&cppbind::example::addToElements), py::arg("a"), py::arg("num"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("add_to_elements1", py::overload_cast<const cppbind::example::ArrayInt &, int>(&cppbind::example::addToElements), py::arg("a"), py::arg("num"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Array3, std::shared_ptr<cppbind::example::Array3>> array3(m, "Array3");
        
        array3.def(py::init<const std::array<float, LENGTH3> &>(), py::arg("arr"));
        array3.def("__repr__", [](const cppbind::example::Array3& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Array3";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibTemplatesArrayPygen */
