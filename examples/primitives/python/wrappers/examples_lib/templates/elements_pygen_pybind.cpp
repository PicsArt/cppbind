/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/12/2022-10:32.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/elements.hpp"
#include <vector>


namespace py = pybind11;

void bindExamplesLibTemplatesElementsPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::elements<std::vector<int>, int, int>> elementsInt(m, "ElementsInt");
        elementsInt.def_static("create", &cppbind::example::elements<std::vector<int>, int, int>::create, py::arg("ts1"), py::arg("ts2"), py::return_value_policy::automatic);

        elementsInt.def_property_readonly("holder", &cppbind::example::elements<std::vector<int>, int, int>::holder, py::return_value_policy::reference_internal);
        elementsInt.def("__repr__", [](const cppbind::example::elements<std::vector<int>, int, int>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::elements<std::vector<int>, int, int>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>> elementsString(m, "ElementsString");
        elementsString.def_static("create", &cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>::create, py::arg("ts1"), py::arg("ts2"), py::arg("ts3"), py::return_value_policy::automatic);

        elementsString.def_property_readonly("holder", &cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>::holder, py::return_value_policy::reference_internal);
        elementsString.def("__repr__", [](const cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::elements<std::vector<double>>> elementsEmpty(m, "ElementsEmpty");
        elementsEmpty.def_static("create", &cppbind::example::elements<std::vector<double>>::create, py::return_value_policy::automatic);

        elementsEmpty.def_property_readonly("holder", &cppbind::example::elements<std::vector<double>>::holder, py::return_value_policy::reference_internal);
        elementsEmpty.def("__repr__", [](const cppbind::example::elements<std::vector<double>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::elements<std::vector<double>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibTemplatesElementsPygen */
