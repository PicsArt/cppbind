/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/25/2022-06:11.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/stack_usage.hpp"
#include "cxx/simple/root.hpp"
#include "cxx/templates/container.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesStackStackRootPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Stack<cppbind::example::Root>, cppbind::example::Container> rootsStack(m, "RootsStack");
        
        rootsStack.def(py::init<>());
        rootsStack.def("push", &cppbind::example::Stack<cppbind::example::Root>::push, py::arg("item"));
        rootsStack.def("pop", &cppbind::example::Stack<cppbind::example::Root>::pop);
        rootsStack.def("top", &cppbind::example::Stack<cppbind::example::Root>::top, py::return_value_policy::reference);  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyStackRoot, Stack<cppbind::example::Root>> myStackRoot(m, "MyStackRoot");
        
        myStackRoot.def(py::init<>());
        myStackRoot.def("first_item_of_typedef", &cppbind::example::MyStackRoot::firstItemOfTypedef, py::arg("p"), py::return_value_policy::automatic);  
    }
} /* bindExamplesLibTemplatesStackStackRootPygen */
