/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/24/2022-18:43.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/stack.hpp"
#include "cxx/templates/container.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

namespace py = pybind11;

void bindIegenExampleStackPrj(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Stack<iegen::example::Project>, iegen::example::Container> stackPrj(m, "StackPrj");

    stackPrj.def(py::init<>());

    stackPrj.def(py::init<iegen::example::Project &>(), py::arg("st"));
    stackPrj.def("push", &iegen::example::Stack<iegen::example::Project>::push, py::arg("item"), py::return_value_policy::automatic);
    stackPrj.def("pop", &iegen::example::Stack<iegen::example::Project>::pop, py::return_value_policy::automatic);
    stackPrj.def("top", &iegen::example::Stack<iegen::example::Project>::top, py::return_value_policy::reference);
    stackPrj.def("empty", &iegen::example::Stack<iegen::example::Project>::empty, py::return_value_policy::automatic);
}
void bindIegenExampleStackPyTask(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Stack<iegen::example::Task>, iegen::example::Container> stackPyTask(m, "StackPyTask");

    stackPyTask.def(py::init<>());

    stackPyTask.def(py::init<iegen::example::Task &>(), py::arg("st"));
    stackPyTask.def("push", &iegen::example::Stack<iegen::example::Task>::push, py::arg("item"), py::return_value_policy::automatic);
    stackPyTask.def("pop", &iegen::example::Stack<iegen::example::Task>::pop, py::return_value_policy::automatic);
    stackPyTask.def("top", &iegen::example::Stack<iegen::example::Task>::top, py::return_value_policy::reference);
    stackPyTask.def("empty", &iegen::example::Stack<iegen::example::Task>::empty, py::return_value_policy::automatic);
}
void bindIegenExampleStackNumInt(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Stack<iegen::example::Number<int>>, iegen::example::Container> stackNumInt(m, "StackNumInt");

    stackNumInt.def(py::init<>());

    stackNumInt.def(py::init<iegen::example::Number<int> &>(), py::arg("st"));
    stackNumInt.def("push", &iegen::example::Stack<iegen::example::Number<int>>::push, py::arg("item"), py::return_value_policy::automatic);
    stackNumInt.def("pop", &iegen::example::Stack<iegen::example::Number<int>>::pop, py::return_value_policy::automatic);
    stackNumInt.def("top", &iegen::example::Stack<iegen::example::Number<int>>::top, py::return_value_policy::reference);
    stackNumInt.def("empty", &iegen::example::Stack<iegen::example::Number<int>>::empty, py::return_value_policy::automatic);
}
