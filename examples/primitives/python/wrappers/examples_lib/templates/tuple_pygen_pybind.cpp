/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/tuple.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesTuplePygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<>> tupleEmpty(m, "TupleEmpty");
        
        tupleEmpty.def("__repr__", [](const cppbind::example::tuple<>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<int, int, int>> tupleThreeInt(m, "TupleThreeInt");
        
        tupleThreeInt.def(py::init<int, int, int>(), py::arg("t"), py::arg("ts1"), py::arg("ts2"));
        tupleThreeInt.def_readonly("tail", &cppbind::example::tuple<int, int, int>::tail, py::return_value_policy::reference_internal);
        tupleThreeInt.def_readonly("rest", &cppbind::example::tuple<int, int, int>::rest, py::return_value_policy::reference_internal);
        tupleThreeInt.def("__repr__", [](const cppbind::example::tuple<int, int, int>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<int, int, int>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<int, int>> tupleTwoInt(m, "TupleTwoInt");
        
        tupleTwoInt.def(py::init<int, int>(), py::arg("t"), py::arg("ts1"));
        tupleTwoInt.def_readonly("tail", &cppbind::example::tuple<int, int>::tail, py::return_value_policy::reference_internal);
        tupleTwoInt.def_readonly("rest", &cppbind::example::tuple<int, int>::rest, py::return_value_policy::reference_internal);
        tupleTwoInt.def("__repr__", [](const cppbind::example::tuple<int, int>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<int, int>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<int>> tupleInt(m, "TupleInt");
        
        tupleInt.def(py::init<int>(), py::arg("t"));
        tupleInt.def_readonly("tail", &cppbind::example::tuple<int>::tail, py::return_value_policy::reference_internal);
        tupleInt.def_readonly("rest", &cppbind::example::tuple<int>::rest, py::return_value_policy::reference_internal);
        tupleInt.def("__repr__", [](const cppbind::example::tuple<int>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<int>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<double>> tupleDouble(m, "TupleDouble");
        
        tupleDouble.def(py::init<double>(), py::arg("t"));
        tupleDouble.def_readonly("tail", &cppbind::example::tuple<double>::tail, py::return_value_policy::reference_internal);
        tupleDouble.def_readonly("rest", &cppbind::example::tuple<double>::rest, py::return_value_policy::reference_internal);
        tupleDouble.def("__repr__", [](const cppbind::example::tuple<double>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<double>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<double, double>> tupleDoubles(m, "TupleDoubles");
        
        tupleDoubles.def(py::init<double, double>(), py::arg("t"), py::arg("ts1"));
        tupleDoubles.def_readonly("tail", &cppbind::example::tuple<double, double>::tail, py::return_value_policy::reference_internal);
        tupleDoubles.def_readonly("rest", &cppbind::example::tuple<double, double>::rest, py::return_value_policy::reference_internal);
        tupleDoubles.def("__repr__", [](const cppbind::example::tuple<double, double>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<double, double>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::tuple<int, double>> tupleDoubleInt(m, "TupleDoubleInt");
        
        tupleDoubleInt.def(py::init<int, double>(), py::arg("t"), py::arg("ts1"));
        tupleDoubleInt.def_readonly("tail", &cppbind::example::tuple<int, double>::tail, py::return_value_policy::reference_internal);
        tupleDoubleInt.def_readonly("rest", &cppbind::example::tuple<int, double>::rest, py::return_value_policy::reference_internal);
        tupleDoubleInt.def("__repr__", [](const cppbind::example::tuple<int, double>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::tuple<int, double>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        m.def("create_tuple_int_int", &cppbind::example::createTuple<int, int>, py::arg("args1"), py::arg("args2"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("create_tuple_int_double", &cppbind::example::createTuple<int, double>, py::arg("args1"), py::arg("args2"), py::return_value_policy::automatic);
    }
} /* bindExamplesLibTemplatesTuplePygen */
