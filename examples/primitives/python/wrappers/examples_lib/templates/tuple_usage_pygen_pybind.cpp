/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/tuple.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesTupleUsagePygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::IntsTuple, tuple<int, int, int>> intsTuple(m, "IntsTuple");
        
        intsTuple.def(py::init<int, int, int>(), py::arg("a"), py::arg("b"), py::arg("c"));  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyTuple<double>, cppbind::example::tuple<double, double>> myTupleDouble(m, "MyTupleDouble");
        
        myTupleDouble.def(py::init<double, double>(), py::arg("a"), py::arg("b"));  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, int>> myTupleInt(m, "MyTupleInt");
        
        myTupleInt.def(py::init<int, int>(), py::arg("a"), py::arg("b"));  
    }
    {
        using namespace cppbind::example;
        m.def("get_tuple_first_element_int_double", &cppbind::example::getTupleFirstElement<int, double>, py::arg("t1"), py::return_value_policy::automatic);
    }
    {
        using namespace cppbind::example;
        m.def("get_tuple_first_element_int_int", &cppbind::example::getTupleFirstElement<int, int>, py::arg("t1"), py::return_value_policy::automatic);
    }
} /* bindExamplesLibTemplatesTupleUsagePygen */
