/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/29/2022-15:15.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/vector.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesVectorPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Vector<int, std::allocator<int>>> vectorInt(m, "VectorInt");
        
        vectorInt.def(py::init<>());

        vectorInt.def(py::init<const cppbind::example::Vector<int, std::allocator<int>> &>(), py::arg("vec"));
        vectorInt.def("push_back", &cppbind::example::Vector<int, std::allocator<int>>::push_back, py::arg("value"));
        vectorInt.def("pop_back", &cppbind::example::Vector<int, std::allocator<int>>::pop_back);
        vectorInt.def("__getitem__", py::overload_cast<int>(&cppbind::example::Vector<int, std::allocator<int>>::operator[], py::const_), py::arg("idx"), py::return_value_policy::automatic);
        vectorInt.def("__add__", &cppbind::example::Vector<int, std::allocator<int>>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        vectorInt.def("__eq__", &cppbind::example::Vector<int, std::allocator<int>>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        vectorInt.def("__repr__", [](const cppbind::example::Vector<int, std::allocator<int>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Vector<int, std::allocator<int>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Vector<std::string, std::allocator<std::string>>> stringsVector(m, "StringsVector");
        
        stringsVector.def(py::init<>());

        stringsVector.def(py::init<const cppbind::example::Vector<std::string, std::allocator<std::string>> &>(), py::arg("vec"));
        stringsVector.def("push_back", &cppbind::example::Vector<std::string, std::allocator<std::string>>::push_back, py::arg("value"));
        stringsVector.def("pop_back", &cppbind::example::Vector<std::string, std::allocator<std::string>>::pop_back);
        stringsVector.def("__getitem__", py::overload_cast<int>(&cppbind::example::Vector<std::string, std::allocator<std::string>>::operator[], py::const_), py::arg("idx"), py::return_value_policy::automatic);
        stringsVector.def("__add__", &cppbind::example::Vector<std::string, std::allocator<std::string>>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        stringsVector.def("__eq__", &cppbind::example::Vector<std::string, std::allocator<std::string>>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        stringsVector.def("__repr__", [](const cppbind::example::Vector<std::string, std::allocator<std::string>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Vector<std::string, std::allocator<std::string>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Vector<double, std::allocator<double>>> vector(m, "Vector");
        
        vector.def(py::init<>());

        vector.def(py::init<const cppbind::example::Vector<double, std::allocator<double>> &>(), py::arg("vec"));
        vector.def("push_back", &cppbind::example::Vector<double, std::allocator<double>>::push_back, py::arg("value"));
        vector.def("pop_back", &cppbind::example::Vector<double, std::allocator<double>>::pop_back);
        vector.def("__getitem__", py::overload_cast<int>(&cppbind::example::Vector<double, std::allocator<double>>::operator[], py::const_), py::arg("idx"), py::return_value_policy::automatic);
        vector.def("__add__", &cppbind::example::Vector<double, std::allocator<double>>::operator+, py::arg("rhs"), py::return_value_policy::automatic);
        vector.def("__eq__", &cppbind::example::Vector<double, std::allocator<double>>::operator==, py::arg("rhs"), py::return_value_policy::automatic);
        vector.def("__repr__", [](const cppbind::example::Vector<double, std::allocator<double>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Vector<double, std::allocator<double>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibTemplatesVectorPygen */
