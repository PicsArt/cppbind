/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 09/14/2021-11:34.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/wrapper.hpp"

namespace py = pybind11;

void bindIegenExampleWrapperPairStrings(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::pair<std::string, std::string>>> wrapperPairstrings(m, "WrapperPairStrings");

    wrapperPairstrings.def(py::init<const std::pair<std::string, std::string> &>(), py::arg("value"));


    wrapperPairstrings.def_property("value", &iegen::example::Wrapper<std::pair<std::string, std::string>>::value, &iegen::example::Wrapper<std::pair<std::string, std::string>>::setValue);
}
void bindIegenExampleWrapperPairintint(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::pair<int, int>>> wrapperPairintint(m, "WrapperPairintint");

    wrapperPairintint.def(py::init<const std::pair<int, int> &>(), py::arg("value"));


    wrapperPairintint.def_property("value", &iegen::example::Wrapper<std::pair<int, int>>::value, &iegen::example::Wrapper<std::pair<int, int>>::setValue);
}
void bindIegenExampleWrapperstr(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::string>> wrapperStr(m, "Wrapperstr");

    wrapperStr.def(py::init<const std::string &>(), py::arg("value"));


    wrapperStr.def_property("value", &iegen::example::Wrapper<std::string>::value, &iegen::example::Wrapper<std::string>::setValue);
}