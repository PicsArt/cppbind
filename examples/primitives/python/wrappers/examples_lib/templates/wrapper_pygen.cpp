/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-12:30.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/wrapper.hpp"

namespace py = pybind11;

void bindIegenExampleWrapperPairStrings(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::pair<std::string, std::string>>> wrapperPairStrings(m, "WrapperPairStrings");

    wrapperPairStrings.def(py::init<const std::pair<std::string, std::string> &>(), py::arg("value"));


    wrapperPairStrings.def_property("value", &iegen::example::Wrapper<std::pair<std::string, std::string>>::value, &iegen::example::Wrapper<std::pair<std::string, std::string>>::setValue);
}
void bindIegenExampleWrapperPairIntInt(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::pair<int, int>>> wrapperPairIntInt(m, "WrapperPairIntInt");

    wrapperPairIntInt.def(py::init<const std::pair<int, int> &>(), py::arg("value"));


    wrapperPairIntInt.def_property("value", &iegen::example::Wrapper<std::pair<int, int>>::value, &iegen::example::Wrapper<std::pair<int, int>>::setValue);
}
void bindIegenExampleWrapperString(py::module& m) {
    using namespace iegen::example;
    py::class_<iegen::example::Wrapper<std::string>> wrapperString(m, "WrapperString");

    wrapperString.def(py::init<const std::string &>(), py::arg("value"));


    wrapperString.def_property("value", &iegen::example::Wrapper<std::string>::value, &iegen::example::Wrapper<std::string>::setValue);
}