/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-05:22.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/templates/wrapper.hpp"

namespace py = pybind11;

void bindExamplesLibTemplatesWrapperPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Wrapper<std::pair<std::string, std::string>>> wrapperPairStrings(m, "WrapperPairStrings");
        
        wrapperPairStrings.def(py::init<const std::pair<std::string, std::string> &>(), py::arg("value"));

        wrapperPairStrings.def_property("value", py::cpp_function(&cppbind::example::Wrapper<std::pair<std::string, std::string>>::value, py::return_value_policy::reference_internal), &cppbind::example::Wrapper<std::pair<std::string, std::string>>::setValue);
        wrapperPairStrings.def("__repr__", [](const cppbind::example::Wrapper<std::pair<std::string, std::string>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Wrapper<std::pair<std::string, std::string>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Wrapper<std::pair<int, int>>> wrapperPairIntInt(m, "WrapperPairIntInt");
        
        wrapperPairIntInt.def(py::init<const std::pair<int, int> &>(), py::arg("value"));

        wrapperPairIntInt.def_property("value", py::cpp_function(&cppbind::example::Wrapper<std::pair<int, int>>::value, py::return_value_policy::reference_internal), &cppbind::example::Wrapper<std::pair<int, int>>::setValue);
        wrapperPairIntInt.def("__repr__", [](const cppbind::example::Wrapper<std::pair<int, int>>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Wrapper<std::pair<int, int>>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::Wrapper<std::string>> wrapperString(m, "WrapperString");
        
        wrapperString.def(py::init<const std::string &>(), py::arg("value"));

        wrapperString.def_property("value", py::cpp_function(&cppbind::example::Wrapper<std::string>::value, py::return_value_policy::reference_internal), &cppbind::example::Wrapper<std::string>::setValue);
        wrapperString.def("__repr__", [](const cppbind::example::Wrapper<std::string>& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::Wrapper<std::string>";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibTemplatesWrapperPygen */
