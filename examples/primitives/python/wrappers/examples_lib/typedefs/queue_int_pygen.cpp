/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-05:22.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/typedefs/queue_int.hpp"

namespace py = pybind11;

void bindExamplesLibTypedefsQueueIntPygen(py::module& m) {
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::QueueInt> queueInt(m, "QueueInt");
        
        queueInt.def(py::init<>());
        queueInt.def("push_back", &cppbind::example::QueueInt::push_back, py::arg("element"));
        queueInt.def("push_back_from_str", &cppbind::example::QueueInt::push_back_from_str, py::arg("element"));
        queueInt.def("get_size", &cppbind::example::QueueInt::get_size, py::return_value_policy::automatic);
        queueInt.def("__repr__", [](const cppbind::example::QueueInt& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::QueueInt";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        using namespace cppbind::example;
        py::class_<cppbind::example::QueueIntUsage> queueIntUsage(m, "QueueIntUsage");
        
        queueIntUsage.def(py::init<cppbind::example::QueueIntPtrType>(), py::arg("q"));
        queueIntUsage.def_static("get_size", &cppbind::example::QueueIntUsage::getSize, py::arg("q"), py::return_value_policy::automatic);
        queueIntUsage.def_static("get_last_element", &cppbind::example::QueueIntUsage::getLastElement, py::arg("q"), py::return_value_policy::automatic);
        queueIntUsage.def_static("get_first_element", &cppbind::example::QueueIntUsage::getFirstElement, py::arg("q"), py::return_value_policy::automatic);
        queueIntUsage.def_static("get_inv_queue", &cppbind::example::QueueIntUsage::getInvQueue, py::arg("v"), py::return_value_policy::automatic);
        queueIntUsage.def("get_saved_queue", &cppbind::example::QueueIntUsage::getSavedQueue, py::return_value_policy::reference);
        queueIntUsage.def_readonly("empty_queue", &cppbind::example::QueueIntUsage::empty_queue, py::return_value_policy::reference_internal);
        queueIntUsage.def_readonly("saved_queue", &cppbind::example::QueueIntUsage::saved_queue, py::return_value_policy::reference_internal);
        queueIntUsage.def("__repr__", [](const cppbind::example::QueueIntUsage& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "cppbind::example::QueueIntUsage";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExamplesLibTypedefsQueueIntPygen */
