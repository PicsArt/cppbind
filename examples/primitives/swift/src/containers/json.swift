/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/04/2022-08:36.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class JsonExamples {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_IegenExample_JsonExamples(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var iegenErr = IEGenCObject()
    self.init(create_IegenExample_JsonExamples(&iegenErr), true)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func setJson(j: String) -> Void {

    let swifttoscj = strdup(j)!
    var iegenErr = IEGenCObject()
    _func_IegenExample_JsonExamples_setJson(cself, swifttoscj, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func getJson() -> String {

    var iegenErr = IEGenCObject()
    let result = _func_IegenExample_JsonExamples_getJson(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public func getSimpleJsonExample() -> String {

    var iegenErr = IEGenCObject()
    let result = _func_IegenExample_JsonExamples_getSimpleJsonExample(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func setJsonMatrix(jm: Array<Array<String>>) -> Void {

    let _swifttoscjmData = UnsafeMutablePointer<IEGenCDataArray>.allocate(capacity: jm.count)
    var swifttoscjm = IEGenCDataArray()
    swifttoscjm.data = UnsafeMutableRawPointer(_swifttoscjmData)
    swifttoscjm.size = Int64(jm.count)
    for i in 0..<jm.count {
      let jmVal = jm[i]
      let _swifttoscjmValData = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: jmVal.count)
      var swifttoscjmVal = IEGenCDataArray()
      swifttoscjmVal.data = UnsafeMutableRawPointer(_swifttoscjmValData)
      swifttoscjmVal.size = Int64(jmVal.count)
      for i in 0..<jmVal.count {
        let jmValVal = jmVal[i]
        let swifttoscjmValVal = strdup(jmValVal)!
        _swifttoscjmValData[i] = swifttoscjmValVal
      }
      _swifttoscjmData[i] = swifttoscjmVal
    }
    var iegenErr = IEGenCObject()
    _func_IegenExample_JsonExamples_setJsonMatrix(cself, swifttoscjm, &iegenErr)
    
    let swifttoscjmData = swifttoscjm.data.assumingMemoryBound(to: IEGenCDataArray.self)
    for i in 0..<Int(swifttoscjm.size) {
      let swifttoscjmItem = swifttoscjmData[i]
      
      swifttoscjmItem.data.deallocate()
    }
    swifttoscjm.data.deallocate()
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func getJsonMatrix() -> Array<Array<String>> {

    var iegenErr = IEGenCObject()
    let result = _func_IegenExample_JsonExamples_getJsonMatrix(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultBuffer = UnsafeBufferPointer<IEGenCDataArray>(
      start: result.data.assumingMemoryBound(to: IEGenCDataArray.self),
      count: Int(result.size))
    var sctoswiftresult: [Array<String>] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      let _resultValueBuffer = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
        start: resultValue.data.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
        count: Int(resultValue.size))
      var sctoswiftresultValue: [String] = []
      defer {
        _resultValueBuffer.deallocate()
      }
      for i in 0..<Int(resultValue.size) {
        let resultValueValue = _resultValueBuffer[i]
        let sctoswiftresultValueValue = String(cString: resultValueValue)
        defer {
          resultValueValue.deallocate()
        }
        sctoswiftresultValue.append(sctoswiftresultValueValue)
      }
      sctoswiftresult.append(sctoswiftresultValue)
    }
    return sctoswiftresult
  }

  class var iegenCxxTypeName : String { return "iegen::example::JsonExamples" }
}
