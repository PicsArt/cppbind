/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/17/2022-14:44.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class PairExamples {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_PairExamples(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  /**
   * comments
   * 
   */
  public convenience init() {
    var err = IEGenCObject()
    self.init(create_PairExamples(&err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * comments
   * 
   */
  public func sumIntPairs(p1: (Int, Int), p2: (Int, Int)) -> (Int, Int) {

    let _swifttoscp1First = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swifttoscp1Second = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swifttoscp1First.deallocate()
      _swifttoscp1Second.deallocate()
    }
    var swifttoscp1 = IEGenCDataPair()
    swifttoscp1.first = UnsafeMutableRawPointer(_swifttoscp1First)
    swifttoscp1.second = UnsafeMutableRawPointer(_swifttoscp1Second)
    let p1First = p1.0
    let p1Second = p1.1
    let swifttoscp1First = CInt(p1First)
    let swifttoscp1Second = CInt(p1Second)
    _swifttoscp1First[0] = swifttoscp1First
    _swifttoscp1Second[0] = swifttoscp1Second
    let _swifttoscp2First = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swifttoscp2Second = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swifttoscp2First.deallocate()
      _swifttoscp2Second.deallocate()
    }
    var swifttoscp2 = IEGenCDataPair()
    swifttoscp2.first = UnsafeMutableRawPointer(_swifttoscp2First)
    swifttoscp2.second = UnsafeMutableRawPointer(_swifttoscp2Second)
    let p2First = p2.0
    let p2Second = p2.1
    let swifttoscp2First = CInt(p2First)
    let swifttoscp2Second = CInt(p2Second)
    _swifttoscp2First[0] = swifttoscp2First
    _swifttoscp2Second[0] = swifttoscp2Second
    var err = IEGenCObject()
    let result = _func_PairExamples_sumIntPairs(cself, swifttoscp1, swifttoscp2, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<CInt>(
      start: result.first.assumingMemoryBound(to: CInt.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<CInt>(
      start: result.second.assumingMemoryBound(to: CInt.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let sctoswiftresultFirst = Int(resultFirst)
    let sctoswiftresultSecond = Int(resultSecond)
    let sctoswiftresult: (Int, Int) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public func setNestedPair(p: ((String, String), (String, String))) -> Void {

    let _swifttoscpFirst = UnsafeMutablePointer<IEGenCDataPair>.allocate(capacity: 1)
    let _swifttoscpSecond = UnsafeMutablePointer<IEGenCDataPair>.allocate(capacity: 1)
    defer {
      _swifttoscpFirst.deallocate()
      _swifttoscpSecond.deallocate()
    }
    var swifttoscp = IEGenCDataPair()
    swifttoscp.first = UnsafeMutableRawPointer(_swifttoscpFirst)
    swifttoscp.second = UnsafeMutableRawPointer(_swifttoscpSecond)
    let pFirst = p.0
    let pSecond = p.1
    let _swifttoscpFirstFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swifttoscpFirstSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swifttoscpFirstFirst.deallocate()
      _swifttoscpFirstSecond.deallocate()
    }
    var swifttoscpFirst = IEGenCDataPair()
    swifttoscpFirst.first = UnsafeMutableRawPointer(_swifttoscpFirstFirst)
    swifttoscpFirst.second = UnsafeMutableRawPointer(_swifttoscpFirstSecond)
    let pFirstFirst = pFirst.0
    let pFirstSecond = pFirst.1
    let swifttoscpFirstFirst = strdup(pFirstFirst)!
    let swifttoscpFirstSecond = strdup(pFirstSecond)!
    _swifttoscpFirstFirst[0] = swifttoscpFirstFirst
    _swifttoscpFirstSecond[0] = swifttoscpFirstSecond
    let _swifttoscpSecondFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swifttoscpSecondSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swifttoscpSecondFirst.deallocate()
      _swifttoscpSecondSecond.deallocate()
    }
    var swifttoscpSecond = IEGenCDataPair()
    swifttoscpSecond.first = UnsafeMutableRawPointer(_swifttoscpSecondFirst)
    swifttoscpSecond.second = UnsafeMutableRawPointer(_swifttoscpSecondSecond)
    let pSecondFirst = pSecond.0
    let pSecondSecond = pSecond.1
    let swifttoscpSecondFirst = strdup(pSecondFirst)!
    let swifttoscpSecondSecond = strdup(pSecondSecond)!
    _swifttoscpSecondFirst[0] = swifttoscpSecondFirst
    _swifttoscpSecondSecond[0] = swifttoscpSecondSecond
    _swifttoscpFirst[0] = swifttoscpFirst
    _swifttoscpSecond[0] = swifttoscpSecond
    var err = IEGenCObject()
    _func_PairExamples_setNestedPair(cself, swifttoscp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * comments
   * 
   */
  public func getNestedPair() -> ((String, String), (String, String)) {

    var err = IEGenCObject()
    let result = _func_PairExamples_getNestedPair(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<IEGenCDataPair>(
      start: result.first.assumingMemoryBound(to: IEGenCDataPair.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<IEGenCDataPair>(
      start: result.second.assumingMemoryBound(to: IEGenCDataPair.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let _resultFirstFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultFirst.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultFirstSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultFirst.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultFirstFirstData.deallocate()
      _resultFirstSecondData.deallocate()
    }
    let resultFirstFirst = _resultFirstFirstData[0]
    let resultFirstSecond = _resultFirstSecondData[0]
    let sctoswiftresultFirstFirst = String(cString: resultFirstFirst)
    defer {
      resultFirstFirst.deallocate()
    }
    let sctoswiftresultFirstSecond = String(cString: resultFirstSecond)
    defer {
      resultFirstSecond.deallocate()
    }
    let sctoswiftresultFirst: (String, String) = (sctoswiftresultFirstFirst, sctoswiftresultFirstSecond)
    let _resultSecondFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultSecond.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultSecondSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultSecond.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultSecondFirstData.deallocate()
      _resultSecondSecondData.deallocate()
    }
    let resultSecondFirst = _resultSecondFirstData[0]
    let resultSecondSecond = _resultSecondSecondData[0]
    let sctoswiftresultSecondFirst = String(cString: resultSecondFirst)
    defer {
      resultSecondFirst.deallocate()
    }
    let sctoswiftresultSecondSecond = String(cString: resultSecondSecond)
    defer {
      resultSecondSecond.deallocate()
    }
    let sctoswiftresultSecond: (String, String) = (sctoswiftresultSecondFirst, sctoswiftresultSecondSecond)
    let sctoswiftresult: ((String, String), (String, String)) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public func getStringPair() -> (String, String) {

    var err = IEGenCObject()
    let result = _func_PairExamples_getStringPair(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: result.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: result.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let sctoswiftresultFirst = String(cString: resultFirst)
    defer {
      resultFirst.deallocate()
    }
    let sctoswiftresultSecond = String(cString: resultSecond)
    defer {
      resultSecond.deallocate()
    }
    let sctoswiftresult: (String, String) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

}
