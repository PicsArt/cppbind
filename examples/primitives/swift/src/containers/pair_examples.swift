/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-19:53.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class PairExamples {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_PairExamples(cself)
    }
  }

  /**
   * comments
   * 
   */
  public convenience init() {
    self.init(create_PairExamples(), true)
  }

  /**
   * comments
   * 
   */
  public func sumIntPairs(p1: (Int, Int), p2: (Int, Int)) -> (Int, Int) {

    let _swiftToScP1First = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swiftToScP1Second = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swiftToScP1First.deallocate()
      _swiftToScP1Second.deallocate()
    }
    var swiftToScP1 = CDataPair()
    swiftToScP1.first = UnsafeMutableRawPointer(_swiftToScP1First)
    swiftToScP1.second = UnsafeMutableRawPointer(_swiftToScP1Second)
    let p1First = p1.0
    let p1Second = p1.1
    let swiftToScP1First = CInt(p1First)
    let swiftToScP1Second = CInt(p1Second)
    _swiftToScP1First[0] = swiftToScP1First
    _swiftToScP1Second[0] = swiftToScP1Second
    let _swiftToScP2First = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swiftToScP2Second = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swiftToScP2First.deallocate()
      _swiftToScP2Second.deallocate()
    }
    var swiftToScP2 = CDataPair()
    swiftToScP2.first = UnsafeMutableRawPointer(_swiftToScP2First)
    swiftToScP2.second = UnsafeMutableRawPointer(_swiftToScP2Second)
    let p2First = p2.0
    let p2Second = p2.1
    let swiftToScP2First = CInt(p2First)
    let swiftToScP2Second = CInt(p2Second)
    _swiftToScP2First[0] = swiftToScP2First
    _swiftToScP2Second[0] = swiftToScP2Second
    var err = ErrorObj()
    let result = _func_PairExamples_sumIntPairs(cself, swiftToScP1, swiftToScP2, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<CInt>(
      start: result.first.assumingMemoryBound(to: CInt.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<CInt>(
      start: result.second.assumingMemoryBound(to: CInt.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let scToSwiftResultfirst = Int(resultFirst)
    let scToSwiftResultsecond = Int(resultSecond)
    let scToSwiftResult: (Int, Int) = (scToSwiftResultfirst, scToSwiftResultsecond)
    return scToSwiftResult
  }

  /**
   * comments
   * 
   */
  public func setNestedPair(p: ((String, String), (String, String))) -> Void {

    let _swiftToScPFirst = UnsafeMutablePointer<CDataPair>.allocate(capacity: 1)
    let _swiftToScPSecond = UnsafeMutablePointer<CDataPair>.allocate(capacity: 1)
    defer {
      _swiftToScPFirst.deallocate()
      _swiftToScPSecond.deallocate()
    }
    var swiftToScP = CDataPair()
    swiftToScP.first = UnsafeMutableRawPointer(_swiftToScPFirst)
    swiftToScP.second = UnsafeMutableRawPointer(_swiftToScPSecond)
    let pFirst = p.0
    let pSecond = p.1
    let _swiftToScPfirstFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swiftToScPfirstSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swiftToScPfirstFirst.deallocate()
      _swiftToScPfirstSecond.deallocate()
    }
    var swiftToScPfirst = CDataPair()
    swiftToScPfirst.first = UnsafeMutableRawPointer(_swiftToScPfirstFirst)
    swiftToScPfirst.second = UnsafeMutableRawPointer(_swiftToScPfirstSecond)
    let pFirstFirst = pFirst.0
    let pFirstSecond = pFirst.1
    let swiftToScPfirstfirst = strdup(pFirstFirst)!
    let swiftToScPfirstsecond = strdup(pFirstSecond)!
    _swiftToScPfirstFirst[0] = swiftToScPfirstfirst
    _swiftToScPfirstSecond[0] = swiftToScPfirstsecond
    let _swiftToScPsecondFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swiftToScPsecondSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swiftToScPsecondFirst.deallocate()
      _swiftToScPsecondSecond.deallocate()
    }
    var swiftToScPsecond = CDataPair()
    swiftToScPsecond.first = UnsafeMutableRawPointer(_swiftToScPsecondFirst)
    swiftToScPsecond.second = UnsafeMutableRawPointer(_swiftToScPsecondSecond)
    let pSecondFirst = pSecond.0
    let pSecondSecond = pSecond.1
    let swiftToScPsecondfirst = strdup(pSecondFirst)!
    let swiftToScPsecondsecond = strdup(pSecondSecond)!
    _swiftToScPsecondFirst[0] = swiftToScPsecondfirst
    _swiftToScPsecondSecond[0] = swiftToScPsecondsecond
    _swiftToScPFirst[0] = swiftToScPfirst
    _swiftToScPSecond[0] = swiftToScPsecond
    var err = ErrorObj()
    _func_PairExamples_setNestedPair(cself, swiftToScP, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * comments
   * 
   */
  public func getNestedPair() -> ((String, String), (String, String)) {

    var err = ErrorObj()
    let result = _func_PairExamples_getNestedPair(cself, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<CDataPair>(
      start: result.first.assumingMemoryBound(to: CDataPair.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<CDataPair>(
      start: result.second.assumingMemoryBound(to: CDataPair.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let _resultFirstFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultFirst.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultFirstSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultFirst.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultFirstFirstData.deallocate()
      _resultFirstSecondData.deallocate()
    }
    let resultFirstFirst = _resultFirstFirstData[0]
    let resultFirstSecond = _resultFirstSecondData[0]
    let scToSwiftResultfirstfirst = String(cString: resultFirstFirst)
    defer {
      resultFirstFirst.deallocate()
    }
    let scToSwiftResultfirstsecond = String(cString: resultFirstSecond)
    defer {
      resultFirstSecond.deallocate()
    }
    let scToSwiftResultfirst: (String, String) = (scToSwiftResultfirstfirst, scToSwiftResultfirstsecond)
    let _resultSecondFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultSecond.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultSecondSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: resultSecond.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultSecondFirstData.deallocate()
      _resultSecondSecondData.deallocate()
    }
    let resultSecondFirst = _resultSecondFirstData[0]
    let resultSecondSecond = _resultSecondSecondData[0]
    let scToSwiftResultsecondfirst = String(cString: resultSecondFirst)
    defer {
      resultSecondFirst.deallocate()
    }
    let scToSwiftResultsecondsecond = String(cString: resultSecondSecond)
    defer {
      resultSecondSecond.deallocate()
    }
    let scToSwiftResultsecond: (String, String) = (scToSwiftResultsecondfirst, scToSwiftResultsecondsecond)
    let scToSwiftResult: ((String, String), (String, String)) = (scToSwiftResultfirst, scToSwiftResultsecond)
    return scToSwiftResult
  }

  /**
   * comments
   * 
   */
  public func getStringPair() -> (String, String) {

    var err = ErrorObj()
    let result = _func_PairExamples_getStringPair(cself, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: result.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
      start: result.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let scToSwiftResultfirst = String(cString: resultFirst)
    defer {
      resultFirst.deallocate()
    }
    let scToSwiftResultsecond = String(cString: resultSecond)
    defer {
      resultSecond.deallocate()
    }
    let scToSwiftResult: (String, String) = (scToSwiftResultfirst, scToSwiftResultsecond)
    return scToSwiftResult
  }

}
