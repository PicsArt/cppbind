/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/06/2021-14:37.
 * Please do not change it manually.
 */

import CWrapper
import Foundation
/**
 * comments
 * 
 */
public class VectorItem  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_VectorItem(cself)
            cself.type?.deallocate()
        }
    }
    
    /**
     * comments
     * 
     */
    public convenience init(_value: Int) {

        let swift_to_sc__value = CInt(_value)
        var err = ErrorObj()
        self.init(create_VectorItem(swift_to_sc__value, &err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    
    /**
     * comments
     * 
     */
    public var value: Int {
        get {
            let result = _prop_get_VectorItem_value(cself)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_value = CInt(value)
            _prop_set_VectorItem_value(cself, swift_to_sc_value)
        }
        
    }
    
}
/**
 * comments
 * 
 */
public class VectorExamples  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_VectorExamples(cself)
            cself.type?.deallocate()
        }
    }
    
    /**
     * comments
     * 
     */
    public convenience init() {

        var err = ErrorObj()
        self.init(create_VectorExamples(&err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    
    /**
     * comments
     * 
     */
    public func addIntVector(v: Array<Int>) -> Void {

        let _data_swift_to_sc_v = UnsafeMutablePointer<CInt>.allocate(capacity: v.count)
        var swift_to_sc_v = CDataArray()
        swift_to_sc_v.data = UnsafeMutableRawPointer(_data_swift_to_sc_v)
        swift_to_sc_v.size = Int64(v.count)
        for _i in 0..<v.count {
            let value_v = v[_i]
            let swift_to_sc_value_v = CInt(value_v)
            _data_swift_to_sc_v[_i] = swift_to_sc_value_v
        }
        var err = ErrorObj()
        _func_VectorExamples_addIntVector(cself, swift_to_sc_v, &err)
          
        swift_to_sc_v.data.deallocate()
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    /**
     * comments
     * 
     */
    public func addObjVector(v: Array<VectorItem>) -> Void {

        let _data_swift_to_sc_v = UnsafeMutablePointer<CObject>.allocate(capacity: v.count)
        var swift_to_sc_v = CDataArray()
        swift_to_sc_v.data = UnsafeMutableRawPointer(_data_swift_to_sc_v)
        swift_to_sc_v.size = Int64(v.count)
        for _i in 0..<v.count {
            let value_v = v[_i]
            let swift_to_sc_value_v = value_v.cself
            _data_swift_to_sc_v[_i] = swift_to_sc_value_v
        }
        var err = ErrorObj()
        _func_VectorExamples_addObjVector(cself, swift_to_sc_v, &err)
          
        swift_to_sc_v.data.deallocate()
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    /**
     * comments
     * 
     */
    public func addStringVector(v: Array<String>) -> Void {

        let _data_swift_to_sc_v = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: v.count)
        var swift_to_sc_v = CDataArray()
        swift_to_sc_v.data = UnsafeMutableRawPointer(_data_swift_to_sc_v)
        swift_to_sc_v.size = Int64(v.count)
        for _i in 0..<v.count {
            let value_v = v[_i]
            let swift_to_sc_value_v = strdup(value_v)!
            _data_swift_to_sc_v[_i] = swift_to_sc_value_v
        }
        var err = ErrorObj()
        _func_VectorExamples_addStringVector(cself, swift_to_sc_v, &err)
          
        swift_to_sc_v.data.deallocate()
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    /**
     * comments
     * 
     */
    public func getStringVector() -> Array<String> {

        var err = ErrorObj()
        let result = _func_VectorExamples_getStringVector(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_result_data = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(start: result.data.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self), count: Int(result.size))
        var sc_to_swift_result: [String] = []
        defer {
          _tmp_result_data.deallocate()
        }
        for _i in 0..<Int(result.size) {
            let value_result = _tmp_result_data[_i]
            let sc_to_swift_value_result = String(cString: value_result)
            defer {
              value_result.deallocate()
            }
            sc_to_swift_result.append(sc_to_swift_value_result)
        }
      return sc_to_swift_result
    }
    /**
     * comments
     * 
     */
    public func getObjVector() -> Array<VectorItem> {

        var err = ErrorObj()
        let result = _func_VectorExamples_getObjVector(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_result_data = UnsafeBufferPointer<CObject>(start: result.data.assumingMemoryBound(to: CObject.self), count: Int(result.size))
        var sc_to_swift_result: [VectorItem] = []
        defer {
          _tmp_result_data.deallocate()
        }
        for _i in 0..<Int(result.size) {
            let value_result = _tmp_result_data[_i]
            var sc_to_swift_value_result: VectorItem
            sc_to_swift_value_result = VectorItem(value_result)
            sc_to_swift_result.append(sc_to_swift_value_result)
        }
      return sc_to_swift_result
    }
    /**
     * comments
     * 
     */
    public func getIntVector() -> Array<Int> {

        var err = ErrorObj()
        let result = _func_VectorExamples_getIntVector(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_result_data = UnsafeBufferPointer<CInt>(start: result.data.assumingMemoryBound(to: CInt.self), count: Int(result.size))
        var sc_to_swift_result: [Int] = []
        defer {
          _tmp_result_data.deallocate()
        }
        for _i in 0..<Int(result.size) {
            let value_result = _tmp_result_data[_i]
            let sc_to_swift_value_result = Int(value_result)
            sc_to_swift_result.append(sc_to_swift_value_result)
        }
      return sc_to_swift_result
    }
}