/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/31/2022-08:51.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * Class Frame.
 */
public class Frame {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_Frame(cself, owner)
  }

  public convenience init() {
    var err = IEGenCErrorObj()
    self.init(create_Frame(&err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var backgroundColor: Color {
    get {
      let result = _prop_get_Frame_backgroundColor(cself)
      let sctoswiftresultOptional = Color(rawValue: result)
      if (sctoswiftresultOptional == nil) {
        ExceptionHandler.handleUncaughtException(
        "Internal error: unresolved reference to non existing field of Color enum.")
      }
      let sctoswiftresult = sctoswiftresultOptional!
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.rawValue
      _prop_set_Frame_backgroundColor(cself, swifttoscvalue)
    }
  }

  public var backgroundColorShade: ColorShade {
    get {
      let result = _prop_get_Frame_backgroundColorShade(cself)
      let sctoswiftresultOptional = ColorShade(rawValue: result)
      if (sctoswiftresultOptional == nil) {
        ExceptionHandler.handleUncaughtException(
        "Internal error: unresolved reference to non existing field of ColorShade enum.")
      }
      let sctoswiftresult = sctoswiftresultOptional!
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.rawValue
      _prop_set_Frame_backgroundColorShade(cself, swifttoscvalue)
    }
  }

}
