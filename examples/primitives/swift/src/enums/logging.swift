/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/14/2022-14:15.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public enum LogLevel: CInt {
  case DEBUG = 0
  case log_info_level = 1
  case WARNING = 2
  case ERROR = 3
  case LOG_CRITICAL = 4
}

public func getNextLogLevel(logLevel: LogLevel) -> LogLevel {
  let swifttosclogLevel = logLevel.rawValue
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_getNextLogLevel(swifttosclogLevel, &cppbindErr)
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  guard let sctoswiftresult = LogLevel(rawValue: result) else {
     ExceptionHandler.handleUncaughtException(
        "Internal error: unresolved reference to non existing field of LogLevel enum.")
  }
  return sctoswiftresult
}
