/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/16/2021-13:56.
 * Please do not change it manually.
 */

import Foundation
import CWrapper



/**
 * comments
 * 
 */
public class SystemError : StdException {
    
    /**
     * comments
     * 
     */
    public convenience init(message: String) {

        let swift_to_sc_message = strdup(message)!
        self.init(create_SystemError(swift_to_sc_message), true)
    }
    
    /**
     * comments
     * 
     */
    public override func what() -> String {

        var err = ErrorObj()
        let result = _func_SystemError_what(cself, &err);
        let sc_to_swift_result = String(cString: result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
}
/**
 * comments
 * 
 */
public class FileError : SystemError {
    
    /**
     * comments
     * 
     */
    public convenience init(message: String) {

        let swift_to_sc_message = strdup(message)!
        self.init(create_FileError(swift_to_sc_message), true)
    }
    
    /**
     * comments
     * 
     */
    public override func what() -> String {

        var err = ErrorObj()
        let result = _func_FileError_what(cself, &err);
        let sc_to_swift_result = String(cString: result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
}
/**
 * comments
 * 
 */
public class SimpleBaseException  : Error {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }
    deinit {
      if owner {
        release_SimpleBaseException(cself)
      }
    }
    
    /**
     * comments
     * 
     */
    public convenience init(err_num: Int) {

        let swift_to_sc_err_num = CInt(err_num)
        self.init(create_SimpleBaseException(swift_to_sc_err_num), true)
    }
    
    /**
     * comments
     * 
     */
    public func errNum() -> Int {

        var err = ErrorObj()
        let result = _func_SimpleBaseException_errNum(cself, &err);
        let sc_to_swift_result = Int(result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
}
/**
 * comments
 * 
 */
public class SimpleChildException : SimpleBaseException {
    
    /**
     * comments
     * 
     */
    public convenience init(err_num: Int) {

        let swift_to_sc_err_num = CInt(err_num)
        self.init(create_SimpleChildException(swift_to_sc_err_num), true)
    }
    
    /**
     * comments
     * 
     */
    public override func errNum() -> Int {

        var err = ErrorObj()
        let result = _func_SimpleChildException_errNum(cself, &err);
        let sc_to_swift_result = Int(result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
}
/**
 * comments
 * 
 */
public class Integer  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }
    deinit {
      if owner {
        release_Integer(cself)
      }
    }
    
    /**
     * comments
     * 
     */
    public convenience init(n: Int) {

        let swift_to_sc_n = CInt(n)
        self.init(create_Integer(swift_to_sc_n), true)
    }
    
    /**
     * value getter
     */
    public var value: Int {
          get {
            let result = _prop_get_Integer_value(cself);
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
          }
          
    }
    
}
/**
 * comments
 * 
 */
public class Exc  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }
    deinit {
      if owner {
        release_Exc(cself)
      }
    }
    
    
    
    /**
     * comments
     * 
     */
    public static func getByKey(m: Dictionary<Int, Int>, key: Int) throws -> Int {

        let _key_swift_to_sc_m = UnsafeMutablePointer<CInt>.allocate(capacity: m.count)
        let _val_swift_to_sc_m = UnsafeMutablePointer<CInt>.allocate(capacity: m.count)
        defer {
          _key_swift_to_sc_m.deallocate()
          _val_swift_to_sc_m.deallocate()
        } 
        var swift_to_sc_m = CDataMap()
        swift_to_sc_m.keys = UnsafeMutableRawPointer(_key_swift_to_sc_m)
        swift_to_sc_m.values = UnsafeMutableRawPointer(_val_swift_to_sc_m)
        swift_to_sc_m.size = Int64(m.count)
        var _i_m = 0
        for (key, val) in m {
            let swift_to_sc_key = CInt(key)
            let swift_to_sc_val = CInt(val)
            _key_swift_to_sc_m[_i_m] = swift_to_sc_key
            _val_swift_to_sc_m[_i_m] = swift_to_sc_val
            _i_m += 1
        }
        let swift_to_sc_key = CInt(key)
        var err = ErrorObj()
        let result = _func_Exc_getByKey(swift_to_sc_m, swift_to_sc_key, &err);
        let sc_to_swift_result = Int(result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    throw StdOutOfRange(err.err_ptr, true)
                case(2):
                    throw StdInvalidArgument(err.err_ptr, true)
                case(3):
                    throw StdLengthError(err.err_ptr, true)
                case(4):
                    throw SystemError(err.err_ptr, true)
                case(5):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
    /**
     * comments
     * 
     */
    public static func noop() -> Void {

        var err = ErrorObj()
        _func_Exc_noop(&err);
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    /**
     * comments
     * 
     */
    public static func returnInteger(do_throw: Bool) throws -> Integer {

        
        var err = ErrorObj()
        let result = _func_Exc_returnInteger(do_throw, &err);
        let sc_to_swift_result = Integer(result)
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    throw StdOutOfRange(err.err_ptr, true)
                case(2):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result;
    }
    /**
     * comments
     * 
     */
    public static func raiseErrorByType(err_type: String) throws -> Void {

        let swift_to_sc_err_type = strdup(err_type)!
        var err = ErrorObj()
        _func_Exc_raiseErrorByType(swift_to_sc_err_type, &err);
        if (err.is_err) {
            let err_type = Int(err.err_type)
            switch(err_type) {
                case(1):
                    throw StdRuntimeError(err.err_ptr, true)
                case(2):
                    throw FileError(err.err_ptr, true)
                case(3):
                    throw SystemError(err.err_ptr, true)
                case(4):
                    throw SimpleChildException(err.err_ptr, true)
                case(5):
                    throw SimpleBaseException(err.err_ptr, true)
                case(6):
                    throw StdException(err.err_ptr, true)
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
}