/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Integer {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExceptions_Integer(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(n: Int) {
    let swifttoscn = CInt(n)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExceptions_Integer(swifttoscn, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * value getter
   */
  public var value: Int {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExceptions_Integer_value(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::exceptions::Integer" }
}

public class MiscExc {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExceptions_MiscExc(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public static func returnInteger(doThrow: Bool) throws -> Integer {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExceptions_MiscExc_returnInteger(doThrow, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::out_of_range"):
        throw StdOutOfRange(cppbindErr, true)
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Integer
    sctoswiftresult = Integer(result, true)
    return sctoswiftresult
  }

  public static func raiseErrorByType(errType: String) throws -> Void {

    let swifttoscerrType = strdup(errType)!
    var cppbindErr = CppBindCObject()
    _func_CppbindExceptions_MiscExc_raiseErrorByType(swifttoscerrType, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::runtime_error"):
        throw StdRuntimeError(cppbindErr, true)
      case ("cppbind::example::FileError"):
        throw FileError(cppbindErr, true)
      case ("cppbind::example::SystemError"):
        throw SystemError(cppbindErr, true)
      case ("cppbind::example::SimpleChildException"):
        throw SimpleChildException(cppbindErr, true)
      case ("cppbind::example::SimpleBaseException"):
        throw SimpleBaseException(cppbindErr, true)
      case ("std::exception"):
        throw StdException(cppbindErr, true)
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::exceptions::MiscExc" }
}
