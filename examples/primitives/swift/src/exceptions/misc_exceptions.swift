/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/31/2022-08:51.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Integer {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_Integer(cself, owner)
  }

  public convenience init(n: Int) {
    let swifttoscn = CInt(n)
    var err = IEGenCErrorObj()
    self.init(create_Integer(swifttoscn, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * value getter
   */
  public var value: Int {
    get {
      let result = _prop_get_Integer_value(cself)
      let sctoswiftresult = Int(result)
      return sctoswiftresult
    }
  }

}

public class MiscExc {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_MiscExc(cself, owner)
  }

  public static func returnInteger(doThrow: Bool) throws -> Integer {

    var err = IEGenCErrorObj()
    let result = _func_MiscExc_returnInteger(doThrow, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        throw StdOutOfRange(IEGenCObject(type: strdup("std::out_of_range"), ptr: err.err_ptr), true)
      case (2):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Integer
    sctoswiftresult = Integer(result)
    return sctoswiftresult
  }

  public static func raiseErrorByType(errType: String) throws -> Void {

    let swifttoscerrType = strdup(errType)!
    var err = IEGenCErrorObj()
    _func_MiscExc_raiseErrorByType(swifttoscerrType, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        throw StdRuntimeError(IEGenCObject(type: strdup("std::runtime_error"), ptr: err.err_ptr), true)
      case (2):
        throw FileError(IEGenCObject(type: strdup("iegen::example::FileError"), ptr: err.err_ptr), true)
      case (3):
        throw SystemError(IEGenCObject(type: strdup("iegen::example::SystemError"), ptr: err.err_ptr), true)
      case (4):
        throw SimpleChildException(IEGenCObject(type: strdup("iegen::example::SimpleChildException"), ptr: err.err_ptr), true)
      case (5):
        throw SimpleBaseException(IEGenCObject(type: strdup("iegen::example::SimpleBaseException"), ptr: err.err_ptr), true)
      case (6):
        throw StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

}
