/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-11:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class ThrowExc {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_ThrowExc(cself)
    }
  }

  public static func getByKey(m: Dictionary<Int, Int>, key: Int) throws -> Int {

    let _swiftToScMKey = UnsafeMutablePointer<CInt>.allocate(capacity: m.count)
    let _swiftToScMVal = UnsafeMutablePointer<CInt>.allocate(capacity: m.count)
    var swiftToScM = CDataMap()
    swiftToScM.keys = UnsafeMutableRawPointer(_swiftToScMKey)
    swiftToScM.values = UnsafeMutableRawPointer(_swiftToScMVal)
    swiftToScM.size = Int64(m.count)
    var mIdx = 0
    for (mKey, mVal) in m {
      let swiftToScMKey = CInt(mKey)
      let swiftToScMVal = CInt(mVal)
      _swiftToScMKey[mIdx] = swiftToScMKey
      _swiftToScMVal[mIdx] = swiftToScMVal
      mIdx += 1
    }
    let swiftToScKey = CInt(key)
    var err = ErrorObj()
    
    swiftToScM.keys.deallocate()
    swiftToScM.values.deallocate()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        throw StdOutOfRange(err.err_ptr, true)
      case (2):
        throw SystemError(err.err_ptr, true)
      case (3):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_ThrowExc_getByKey(swiftToScM, swiftToScKey, &err)
    let scToSwiftResult = Int(result)
    return scToSwiftResult
  }

  /**
   * Throws exception with return value of type string.
   */
  public static func throwsWithReturnValueString() throws -> String {

    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        throw StdInvalidArgument(err.err_ptr, true)
      case (2):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_ThrowExc_throwsWithReturnValueString(&err)
    let scToSwiftResult = String(cString: result)
    defer {
      result.deallocate()
    }
    return scToSwiftResult
  }

  /**
   * Throws exception with return value of iegen type.
   */
  public static func throwsWithReturnValuePtr() throws -> Task {

    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        throw StdInvalidArgument(err.err_ptr, true)
      case (2):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_ThrowExc_throwsWithReturnValuePtr(&err)
    let scToSwiftResult = Task(result)
    return scToSwiftResult
  }

}
