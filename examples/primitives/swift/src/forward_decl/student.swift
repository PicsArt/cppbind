/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-11:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Student {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_Student(cself)
    }
  }

  public convenience init(stName: String) {
    let swiftToScStName = strdup(stName)!
    self.init(create_Student(swiftToScStName), true)
  }

  public convenience init(teachers: Array<Teacher>) {
    let _swiftToScTeachersData = UnsafeMutablePointer<UnsafeMutableRawPointer>.allocate(capacity: teachers.count)
    var swiftToScTeachers = CDataArray()
    swiftToScTeachers.data = UnsafeMutableRawPointer(_swiftToScTeachersData)
    swiftToScTeachers.size = Int64(teachers.count)
    for i in 0..<teachers.count {
      let teachersVal = teachers[i]
      let swiftToScTeachersVal = teachersVal.cself
      _swiftToScTeachersData[i] = swiftToScTeachersVal
    }
    self.init(create_Student_1(swiftToScTeachers), true)
    
    swiftToScTeachers.data.deallocate()
  }

  public var name: String {
    get {
      let result = _prop_get_Student_name(cself)
      let scToSwiftResult = String(cString: result)
      defer {
        result.deallocate()
      }
      return scToSwiftResult
    }

    set(value) {
      let swiftToScValue = strdup(value)!
      _prop_set_Student_name(cself, swiftToScValue)
    }
  }

  public func addTeacher(t: Teacher) -> Void {

    let swiftToScT = t.cself
    var err = ErrorObj()
    _func_Student_addTeacher(cself, swiftToScT, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func teachers() -> Array<Teacher> {

    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_Student_teachers(cself, &err)
    let _resultBuffer = UnsafeBufferPointer<UnsafeMutableRawPointer>(start: result.data.assumingMemoryBound(to: UnsafeMutableRawPointer.self), count: Int(result.size))
    var scToSwiftResult: [Teacher] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      let scToSwiftResultValue = Teacher(resultValue)
      scToSwiftResult.append(scToSwiftResultValue)
    }
    return scToSwiftResult
  }

}
