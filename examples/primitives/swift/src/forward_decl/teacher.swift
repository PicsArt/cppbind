/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-15:55.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Teacher  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
      release_Teacher(cself, owner)
    }
    
    
    public convenience init() {

        var err = ErrorObj()
        self.init(create_Teacher(&err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    
    
    public func addStudent(s: Student) -> Void {

        let swift_to_sc_s = s.cself
        var err = ErrorObj()
        _func_Teacher_addStudent(cself, swift_to_sc_s, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public func students() -> Array<Student> {

        var err = ErrorObj()
        let result = _func_Teacher_students(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_result_data = UnsafeBufferPointer<CObject>(start: result.data.assumingMemoryBound(to: CObject.self), count: Int(result.size))
        var sc_to_swift_result: [Student] = []
        defer {
          _tmp_result_data.deallocate()
        }
        for _i in 0..<Int(result.size) {
            let value_result = _tmp_result_data[_i]
            var sc_to_swift_value_result: Student
                sc_to_swift_value_result = Student(value_result, true)
            sc_to_swift_result.append(sc_to_swift_value_result)
        }
      return sc_to_swift_result
    }
}