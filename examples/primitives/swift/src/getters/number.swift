/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/06/2021-06:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class NumberInt  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_NumberInt(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init(n: Int) {

        let swift_to_sc_n = CInt(n)
        self.init(create_NumberInt(swift_to_sc_n), true)
    }
    

    public var num: Int {
        get {
            let result = _prop_get_NumberInt_num(cself)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_value = CInt(value)
            _prop_set_NumberInt_num(cself, swift_to_sc_value)
        }
        
    }
    
    public func toInt() -> Int {

        var err = ErrorObj()
        let result = _func_NumberInt_toInt(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let sc_to_swift_result = Int(result)
      return sc_to_swift_result
    }
}

public class NumberDouble  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_NumberDouble(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init(n: Double) {

        
        self.init(create_NumberDouble(n), true)
    }
    

    public var num: Double {
        get {
            let result = _prop_get_NumberDouble_num(cself)
            
            return result
        }
        
        set(value) {
            
            _prop_set_NumberDouble_num(cself, value)
        }
        
    }
    
    public func toInt() -> Int {

        var err = ErrorObj()
        let result = _func_NumberDouble_toInt(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let sc_to_swift_result = Int(result)
      return sc_to_swift_result
    }
}