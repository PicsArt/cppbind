/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/08/2021-11:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * A global function example.
 */
public func concat(str1: String, str2: String) -> String {
  let swifttoscstr1 = strdup(str1)!
  let swifttoscstr2 = strdup(str2)!
  var err = ErrorObj()
  let result = _func__concat(swifttoscstr1, swifttoscstr2, &err)
  let errorType = Int(err.err_type)
  if errorType != 0 {
    switch errorType {
    case (1):
      let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}

/**
 * A global template function example.
 */
public func max(arg0: Int, arg1: Int) -> Int {
  let swifttoscarg0 = CInt(arg0)
  let swifttoscarg1 = CInt(arg1)
  var err = ErrorObj()
  let result = _func__maxInt(swifttoscarg0, swifttoscarg1, &err)
  let errorType = Int(err.err_type)
  if errorType != 0 {
    switch errorType {
    case (1):
      let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = Int(result)
  return sctoswiftresult
}

/**
 * A global template function example.
 */
public func max(arg0: String, arg1: String) -> String {
  let swifttoscarg0 = strdup(arg0)!
  let swifttoscarg1 = strdup(arg1)!
  var err = ErrorObj()
  let result = _func__maxString(swifttoscarg0, swifttoscarg1, &err)
  let errorType = Int(err.err_type)
  if errorType != 0 {
    switch errorType {
    case (1):
      let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}

/**
 * A global template function example.
 */
public func makePair(arg0: Project, arg1: Project) -> (Project, Project) {
  let swifttoscarg0 = arg0.cself
  let swifttoscarg1 = arg1.cself
  var err = ErrorObj()
  let result = _func_IegenExample_makePairProjectProject(swifttoscarg0, swifttoscarg1, &err)
  let errorType = Int(err.err_type)
  if errorType != 0 {
    switch errorType {
    case (1):
      let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let _resultFirstData = UnsafeBufferPointer<CObject>(
    start: result.first.assumingMemoryBound(to: CObject.self),
    count: 1)
  let _resultSecondData = UnsafeBufferPointer<CObject>(
    start: result.second.assumingMemoryBound(to: CObject.self),
    count: 1)
  defer {
    _resultFirstData.deallocate()
    _resultSecondData.deallocate()
  }
  let resultFirst = _resultFirstData[0]
  let resultSecond = _resultSecondData[0]
  var sctoswiftresultFirst: Project
  sctoswiftresultFirst = Project(resultFirst)
  var sctoswiftresultSecond: Project
  sctoswiftresultSecond = Project(resultSecond)
  let sctoswiftresult: (Project, Project) = (sctoswiftresultFirst, sctoswiftresultSecond)
  return sctoswiftresult
}

/**
 * A global template function example.
 */
public func makePair(arg0: Root, arg1: Project) -> (Root, Project) {
  let swifttoscarg0 = arg0.cself
  let swifttoscarg1 = arg1.cself
  var err = ErrorObj()
  let result = _func_IegenExample_makePairRootProject(swifttoscarg0, swifttoscarg1, &err)
  let errorType = Int(err.err_type)
  if errorType != 0 {
    switch errorType {
    case (1):
      let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let _resultFirstData = UnsafeBufferPointer<CObject>(
    start: result.first.assumingMemoryBound(to: CObject.self),
    count: 1)
  let _resultSecondData = UnsafeBufferPointer<CObject>(
    start: result.second.assumingMemoryBound(to: CObject.self),
    count: 1)
  defer {
    _resultFirstData.deallocate()
    _resultSecondData.deallocate()
  }
  let resultFirst = _resultFirstData[0]
  let resultSecond = _resultSecondData[0]
  var sctoswiftresultFirst: Root
  sctoswiftresultFirst = Root(resultFirst)
  var sctoswiftresultSecond: Project
  sctoswiftresultSecond = Project(resultSecond)
  let sctoswiftresult: (Root, Project) = (sctoswiftresultFirst, sctoswiftresultSecond)
  return sctoswiftresult
}
