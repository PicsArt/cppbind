/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/01/2022-18:17.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public func singleComplexDefaultValue() -> Task {
  var err = IEGenCObject()
  let result = _func__singleComplexDefaultValue_1(&err)
  if err.type != nil {
    let errorType = String(cString: err.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(err, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      err.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  var sctoswiftresult: Task
  sctoswiftresult = Task(result, true)
  return sctoswiftresult
}

public func singleComplexDefaultValue(task: Task) -> Task {
  let swifttosctask = task.cself
  var err = IEGenCObject()
  let result = _func__singleComplexDefaultValue(swifttosctask, &err)
  if err.type != nil {
    let errorType = String(cString: err.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(err, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      err.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  var sctoswiftresult: Task
  sctoswiftresult = Task(result, true)
  return sctoswiftresult
}

/**
 * A global function with mixed default values.
 */
public func multipleMixedDefaultValues() -> String {
  var err = IEGenCObject()
  let result = _func__multipleMixedDefaultValues_1(&err)
  if err.type != nil {
    let errorType = String(cString: err.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(err, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      err.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}

/**
 * A global function with mixed default values.
 */
public func multipleMixedDefaultValues(task: Task, i: Int = 1) -> String {
  let swifttosctask = task.cself
  let swifttosci = CInt(i)
  var err = IEGenCObject()
  let result = _func__multipleMixedDefaultValues_2(swifttosctask, swifttosci, &err)
  if err.type != nil {
    let errorType = String(cString: err.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(err, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      err.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}

/**
 * A global function with mixed default values.
 */
public func multipleMixedDefaultValues(task: Task, i: Int = 1, r: Root) -> String {
  let swifttosctask = task.cself
  let swifttosci = CInt(i)
  let swifttoscr = r.cself
  var err = IEGenCObject()
  let result = _func__multipleMixedDefaultValues(swifttosctask, swifttosci, swifttoscr, &err)
  if err.type != nil {
    let errorType = String(cString: err.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(err, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      err.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}
