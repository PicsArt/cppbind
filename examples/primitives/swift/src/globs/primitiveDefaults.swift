/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/29/2022-15:47.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * A global function with enum default argument.
 */
public func optionalColor(c: Color = Color.Red) -> Color {
  let swifttoscc = c.rawValue
  var iegenErr = IEGenCObject()
  let result = _func__optionalColor(swifttoscc, &iegenErr)
  if iegenErr.type != nil {
    let errorType = String(cString: iegenErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(iegenErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      iegenErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  guard let sctoswiftresult = Color(rawValue: result) else {
     ExceptionHandler.handleUncaughtException(
        "Internal error: unresolved reference to non existing field of Color enum.")
  }
  return sctoswiftresult
}

/**
 * A global function with string default argument.
 */
public func optionalString(optionalStr: String = "abc") -> String {
  let swifttoscoptionalStr = strdup(optionalStr)!
  var iegenErr = IEGenCObject()
  let result = _func__optionalString(swifttoscoptionalStr, &iegenErr)
  if iegenErr.type != nil {
    let errorType = String(cString: iegenErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(iegenErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      iegenErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = String(cString: result)
  defer {
    result.deallocate()
  }
  return sctoswiftresult
}

/**
 * A global function with primitive default value.
 */
public func optionalInt(i: Int = 5) -> Int {
  let swifttosci = CInt(i)
  var iegenErr = IEGenCObject()
  let result = _func__optionalInt(swifttosci, &iegenErr)
  if iegenErr.type != nil {
    let errorType = String(cString: iegenErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(iegenErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      iegenErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = Int(result)
  return sctoswiftresult
}
