/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/03/2022-06:14.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * Class with custom hash, equals and toString methods.
 */
public class Object1: Hashable, CustomStringConvertible {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Object1(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Object1) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(value: Int = 0) {
    let swifttoscvalue = CInt(value)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Object1(swifttoscvalue, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: Int {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Object1_value(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  /**
   * Hash function returning dummy value for testing purposes.
   */
  public func hash(into hasher: inout Hasher) {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object1_hash(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    hasher.combine(result)
  }

  /**
   * Equals function returning dummy value for testing purposes.
   */
  public static func == (lhs: Object1, rhs: Object1) -> Bool {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object1_equals(lhs.cself, rhs.cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /**
   * ToString function returning dummy value for testing purposes.
   */
  public var description: String {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object1_toString(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Object1" }

  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Object1 {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(ExtendedObject1.cppbindCxxTypeName):
      return ExtendedObject1(cppbindObj, owner)
    default:
      return Object1(cppbindObj, owner)
    }
  }
}

/**
 * Class without any special functions.
 * For Kotlin CppBind will generate the default ones based on underlying C++ object is and type name.
 * For Swift and Python it won't generate them.
 * Instead for Python will generate a __repr__ returning a string containing C++ object id and type name.
 */
public class Object2 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Object2(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Object2) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Object2(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Object2" }

  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Object2 {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(ExtendedObject2.cppbindCxxTypeName):
      return ExtendedObject2(cppbindObj, owner)
    default:
      return Object2(cppbindObj, owner)
    }
  }
}

/**
 * Class with custom hash, equals and toString methods.
 */
public class Object3: Hashable, CustomStringConvertible {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Object3(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Object3) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(value: Int = 0) {
    let swifttoscvalue = CInt(value)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Object3(swifttoscvalue, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: Int {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Object3_value(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  /**
   * Hash function returning dummy value for testing purposes.
   */
  public func hash(into hasher: inout Hasher) {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object3_hash(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    hasher.combine(result)
  }

  /**
   * Equals based on value property for testing purposes.
   */
  public static func == (lhs: Object3, rhs: Object3) -> Bool {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object3_equals(lhs.cself, rhs.cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /**
   * ToString based on value property for testing purposes.
   */
  public var description: String {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Object3_toString(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Object3" }

  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Object3 {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(ExtendedObject3.cppbindCxxTypeName):
      return ExtendedObject3(cppbindObj, owner)
    default:
      return Object3(cppbindObj, owner)
    }
  }
}

/**
 * Class without any special functions.
 * For Kotlin CppBind will generate the default ones based on underlying C++ object is and type name.
 * For Swift and Python it won't generate them.
 * Instead for Python will generate a __repr__ returning a string containing C++ object id and type name.
 */
public class Object4 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Object4(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Object4) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Object4(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Object4" }

  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Object4 {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(ExtendedObject4.cppbindCxxTypeName):
      return ExtendedObject4(cppbindObj, owner)
    default:
      return Object4(cppbindObj, owner)
    }
  }
}

public class ExtendedObject1: Object1 {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(value: Int = 0) {
    let swifttoscvalue = CInt(value)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ExtendedObject1(swifttoscvalue, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * Hash function returning dummy value for testing purposes.
   */
  public override func hash(into hasher: inout Hasher) {
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_ExtendedObject1_hash(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    hasher.combine(result)
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::ExtendedObject1" }
}

public class ExtendedObject2: Object2 {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ExtendedObject2(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::ExtendedObject2" }
}

public class ExtendedObject3: Object3 {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(value: Int = 0) {
    let swifttoscvalue = CInt(value)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ExtendedObject3(swifttoscvalue, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::ExtendedObject3" }
}

public class ExtendedObject4: Object4 {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ExtendedObject4(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::ExtendedObject4" }
}
