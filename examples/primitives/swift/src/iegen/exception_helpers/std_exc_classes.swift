/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-10:20.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class StdException : Error {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_Std_StdException(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal private initializer to prevent automatic initializer inheritance
  private init(_cself: IEGenCObject, _self: StdException) {
    fatalError("A private initializer should not be called.")
  }

  public func what() -> String {

    var iegenErr = IEGenCObject()
    let result = _func_Std_StdException_what(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    return sctoswiftresult
  }

  class func iegenDowncast(_ iegenObj: IEGenCObject, _ owner: Bool = false) -> StdException {
    let typeName = String(cString: iegenObj.type)
    switch(typeName) {
    case("iegen::example::FileError"):
      return FileError(iegenObj, owner)
    case("std::domain_error"):
      return StdDomainError(iegenObj, owner)
    case("std::invalid_argument"):
      return StdInvalidArgument(iegenObj, owner)
    case("std::length_error"):
      return StdLengthError(iegenObj, owner)
    case("std::out_of_range"):
      return StdOutOfRange(iegenObj, owner)
    case("std::overflow_error"):
      return StdOverflowError(iegenObj, owner)
    case("std::range_error"):
      return StdRangeError(iegenObj, owner)
    case("std::underflow_error"):
      return StdUnderflowError(iegenObj, owner)
    case("iegen::example::SystemError"):
      return SystemError(iegenObj, owner)
    case("std::bad_alloc"):
      return StdBadAlloc(iegenObj, owner)
    case("std::bad_cast"):
      return StdBadCast(iegenObj, owner)
    case("std::bad_typeid"):
      return StdBadTypeId(iegenObj, owner)
    case("std::logic_error"):
      return StdLogicError(iegenObj, owner)
    case("std::runtime_error"):
      return StdRuntimeError(iegenObj, owner)
    default:
      return StdException(iegenObj, owner)
    }
  }
}

public class StdLogicError: StdException {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  /// internal private initializer to prevent automatic initializer inheritance
  private init(_cself: IEGenCObject, _self: StdLogicError) {
    fatalError("A private initializer should not be called.")
  }

  override class func iegenDowncast(_ iegenObj: IEGenCObject, _ owner: Bool = false) -> StdLogicError {
    let typeName = String(cString: iegenObj.type)
    switch(typeName) {
    case("std::domain_error"):
      return StdDomainError(iegenObj, owner)
    case("std::invalid_argument"):
      return StdInvalidArgument(iegenObj, owner)
    case("std::length_error"):
      return StdLengthError(iegenObj, owner)
    case("std::out_of_range"):
      return StdOutOfRange(iegenObj, owner)
    default:
      return StdLogicError(iegenObj, owner)
    }
  }
}

public class StdRuntimeError: StdException {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  /// internal private initializer to prevent automatic initializer inheritance
  private init(_cself: IEGenCObject, _self: StdRuntimeError) {
    fatalError("A private initializer should not be called.")
  }

  override class func iegenDowncast(_ iegenObj: IEGenCObject, _ owner: Bool = false) -> StdRuntimeError {
    let typeName = String(cString: iegenObj.type)
    switch(typeName) {
    case("std::overflow_error"):
      return StdOverflowError(iegenObj, owner)
    case("std::range_error"):
      return StdRangeError(iegenObj, owner)
    case("std::underflow_error"):
      return StdUnderflowError(iegenObj, owner)
    default:
      return StdRuntimeError(iegenObj, owner)
    }
  }
}

public class StdDomainError: StdLogicError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdInvalidArgument: StdLogicError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdLengthError: StdLogicError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdOutOfRange: StdLogicError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdRangeError: StdRuntimeError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdOverflowError: StdRuntimeError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdUnderflowError: StdRuntimeError {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdBadAlloc: StdException {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdBadCast: StdException {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}

public class StdBadTypeId: StdException {
  /// internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

}
