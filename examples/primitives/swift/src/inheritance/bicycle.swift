/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 11/22/2022-06:42.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Bicycle: Vehicle {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Bicycle) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(numberOfSeats: Int) {
    let swifttoscnumberOfSeats = CInt(numberOfSeats)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Bicycle(swifttoscnumberOfSeats, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public override func type() -> String {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Bicycle_type(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  override class var cppbindCxxTypeName : String { return "cppbind::example::Bicycle" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  override class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Bicycle {
    let typeName = String(cString: cppbindObj.type)
    var obj : Bicycle
    switch(typeName) {
    case(ElectricCityBicycle.cppbindCxxTypeName):
      obj = ElectricCityBicycle(cppbindObj, owner)
    case(ElectricBicycle.cppbindCxxTypeName):
      obj = ElectricBicycle(cppbindObj, owner)
    case(MountainBicycle.cppbindCxxTypeName):
      obj = MountainBicycle(cppbindObj, owner)
    default:
      obj = Bicycle(cppbindObj, owner)
    }
    return obj
  }
}

public class ElectricBicycle: Bicycle {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: ElectricBicycle) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(numberOfSeats: Int) {
    let swifttoscnumberOfSeats = CInt(numberOfSeats)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ElectricBicycle(swifttoscnumberOfSeats, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public override func type() -> String {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_ElectricBicycle_type(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  override class var cppbindCxxTypeName : String { return "cppbind::example::ElectricBicycle" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  override class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> ElectricBicycle {
    let typeName = String(cString: cppbindObj.type)
    var obj : ElectricBicycle
    switch(typeName) {
    case(ElectricCityBicycle.cppbindCxxTypeName):
      obj = ElectricCityBicycle(cppbindObj, owner)
    default:
      obj = ElectricBicycle(cppbindObj, owner)
    }
    return obj
  }
}

public class MountainBicycle: Bicycle {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(numberOfSeats: Int) {
    let swifttoscnumberOfSeats = CInt(numberOfSeats)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_MountainBicycle(swifttoscnumberOfSeats, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public override func type() -> String {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_MountainBicycle_type(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  override class var cppbindCxxTypeName : String { return "cppbind::example::MountainBicycle" }
}

public class ElectricCityBicycle: ElectricBicycle {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(numberOfSeats: Int) {
    let swifttoscnumberOfSeats = CInt(numberOfSeats)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ElectricCityBicycle(swifttoscnumberOfSeats, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public override func type() -> String {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_ElectricCityBicycle_type(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  override class var cppbindCxxTypeName : String { return "cppbind::example::ElectricCityBicycle" }
}
