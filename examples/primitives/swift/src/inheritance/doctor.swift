/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * A base class for checking single branch non-polymorphic inheritance cases
 */
public class Doctor {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Doctor(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: Doctor) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(doctorName: String) {
    let swifttoscdoctorName = strdup(doctorName)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Doctor(swifttoscdoctorName, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Doctor" }
}

public class Surgeon: Doctor {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(surgeonName: String) {
    let swifttoscsurgeonName = strdup(surgeonName)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Surgeon(swifttoscsurgeonName, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::Surgeon" }
}

/**
 * A base class for checking multibranch mixed polymorphic inheritance cases
 */
public protocol GoodVirtualDoctor {
  var cself: CppBindCObject { get }

  func keepCppBindReference(_ object: Any)
}

extension GoodVirtualDoctor {
}

public class GoodVirtualDoctorImpl: GoodVirtualDoctor {
  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_GoodVirtualDoctorImpl(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::GoodVirtualDoctor" }

  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> GoodVirtualDoctor {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(GoodYoungDoctor.cppbindCxxTypeName):
      return GoodYoungDoctor(cppbindObj, owner)
    default:
      return GoodVirtualDoctorImpl(cppbindObj, owner)
    }
  }
}

public class GoodDoctor {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_GoodDoctor(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: GoodDoctor) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(doctorName: String) {
    let swifttoscdoctorName = strdup(doctorName)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_GoodDoctor(swifttoscdoctorName, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::GoodDoctor" }
}

/**
 * Polymorphic subclass
 */
public class GoodYoungDoctor: GoodDoctor, GoodVirtualDoctor {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(doctorName: String) {
    let swifttoscdoctorName = strdup(doctorName)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_GoodYoungDoctor(swifttoscdoctorName, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::GoodYoungDoctor" }
}

/**
 * Non-polymorphic subclass
 */
public class GoodOldDoctor: GoodDoctor {
  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    super.init(_cself, _owner)
  }

  public convenience init(doctorName: String) {
    let swifttoscdoctorName = strdup(doctorName)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_GoodOldDoctor(swifttoscdoctorName, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  override class var cppbindCxxTypeName : String { return "cppbind::example::GoodOldDoctor" }
}

public class DoctorInfo {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_DoctorInfo(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(s: Surgeon) {
    let swifttoscs = s.cself
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_DoctorInfo(swifttoscs, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public convenience init(d: GoodYoungDoctor) {
    let swifttoscd = d.cself
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_DoctorInfo_1(swifttoscd, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func getDoctorName(d: Doctor) -> String {

    let swifttoscd = d.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getDoctorName(cself, swifttoscd, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func getSurgeonName(s: Surgeon) -> String {

    let swifttoscs = s.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getSurgeonName(cself, swifttoscs, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func getDoctor() -> Doctor {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getDoctor(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Doctor
    sctoswiftresult = Doctor(result)
    return sctoswiftresult
  }

  public func getGoodDoctor() -> GoodDoctor {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getGoodDoctor(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: GoodDoctor
    sctoswiftresult = GoodDoctor(result)
    return sctoswiftresult
  }

  public func getGoodVirtualDoctor() -> GoodVirtualDoctor {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getGoodVirtualDoctor(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: GoodVirtualDoctor
    sctoswiftresult = GoodVirtualDoctorImpl.cppbindConstructObject(result)
    return sctoswiftresult
  }

  public func getGoodDoctorName(d: GoodDoctor) -> String {

    let swifttoscd = d.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_DoctorInfo_getGoodDoctorName(cself, swifttoscd, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::DoctorInfo" }
}
