/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/14/2022-10:58.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public protocol Parallelogram {
  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  var cself: CppBindCObject { get }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  func keepCppBindReference(_ object: Any)
  var area: Double { get }
  func perimeter() -> Double
  /// This method is used in swift tests. As currently we do not allow hash and equals on interfaces
  /// and the default hash/equals/toString which are based on C++ object id are not generated for swift.
  func isEqualTo(p: Parallelogram) -> Bool
}

extension Parallelogram {
  public var area: Double {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parallelogram_area(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func perimeter() -> Double {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Parallelogram_perimeter(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /// This method is used in swift tests. As currently we do not allow hash and equals on interfaces
  /// and the default hash/equals/toString which are based on C++ object id are not generated for swift.
  public func isEqualTo(p: Parallelogram) -> Bool {

    let swifttoscp = p.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Parallelogram_isEqualTo(cself, swifttoscp, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

}

public class ParallelogramImpl: Parallelogram {
  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_ParallelogramImpl(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::Parallelogram" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Parallelogram {
    let typeName = String(cString: cppbindObj.type)
    switch(typeName) {
    case(RectangleImpl.cppbindCxxTypeName):
      return RectangleImpl(cppbindObj, owner)
    case(RhombusFigureImpl.cppbindCxxTypeName):
      return RhombusFigureImpl(cppbindObj, owner)
    case(Square.cppbindCxxTypeName):
      return Square(cppbindObj, owner)
    default:
      return ParallelogramImpl(cppbindObj, owner)
    }
  }
}
