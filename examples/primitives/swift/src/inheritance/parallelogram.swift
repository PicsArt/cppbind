/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/06/2021-06:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public protocol Parallelogram  {

    
    var cself : CObject { get }
    
    
    

    var area: Double { get
    }
    
    func perimeter() -> Double
}
extension Parallelogram {
    
    public var area: Double {
        get {
            let result = _prop_get_Parallelogram_area(cself)
            
            return result
        }
        
    }
    
    public func perimeter() -> Double {

        var err = ErrorObj()
        let result = _func_Parallelogram_perimeter(cself, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      
      return result
    }
}
public class ParallelogramImpl : Parallelogram {
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }
    deinit {
      if owner {
        release_ParallelogramImpl(cself)
        cself.type?.deallocate()
      }
    }

    
}