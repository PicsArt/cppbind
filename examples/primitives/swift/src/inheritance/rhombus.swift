/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-09:35.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public protocol RhombusFigure: Parallelogram {
}

extension RhombusFigure {
}

public class RhombusFigureImpl: RhombusFigure {
  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_IegenExample_RhombusFigureImpl(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(diagonal1: Double, diagonal2: Double) {
    var iegenErr = IEGenCObject()
    self.init(create_IegenExample_RhombusFigure(diagonal1, diagonal2, &iegenErr), true)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var iegenCxxTypeName : String { return "iegen::example::Rhombus" }

  class func iegenDowncast(_ iegenObj: IEGenCObject, _ owner: Bool = false) -> RhombusFigure {
    let typeName = String(cString: iegenObj.type)
    switch(typeName) {
    case(Square.iegenCxxTypeName):
      return Square(iegenObj, owner)
    default:
      return RhombusFigureImpl(iegenObj, owner)
    }
  }
}
