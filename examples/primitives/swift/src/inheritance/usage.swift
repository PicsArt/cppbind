/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:27.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class GeometricFigure {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_GeometricFigure(cself)
    }
  }

  public convenience init(p: Parallelogram) {
    let swifttoscp = p.cself
    var err = ErrorObj()
    self.init(create_GeometricFigure(swifttoscp, &err), true)
    let err_type = Int(err.err_type)
    if (err_type != 0) {
      switch(err_type) {
        case(1):
          let exc_obj = StdException(err.err_ptr, true)
          ExceptionHandler.handleUncaughtException(exc_obj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var parallelogram: Parallelogram {
    get {
      let result = _prop_get_GeometricFigure_parallelogram(cself)
      let sctoswiftresult = ParallelogramImpl(result)
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.cself
      _prop_set_GeometricFigure_parallelogram(cself, swifttoscvalue)
    }
  }

}

public class MyVehicle {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_MyVehicle(cself)
    }
  }

  public convenience init(v: Vehicle) {
    let swifttoscv = v.cself
    var err = ErrorObj()
    self.init(create_MyVehicle(swifttoscv, &err), true)
    let err_type = Int(err.err_type)
    if (err_type != 0) {
      switch(err_type) {
        case(1):
          let exc_obj = StdException(err.err_ptr, true)
          ExceptionHandler.handleUncaughtException(exc_obj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var vehicle: Vehicle {
    get {
      let result = _prop_get_MyVehicle_vehicle(cself)
      let sctoswiftresult = Vehicle(result, true)
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.cself
      _prop_set_MyVehicle_vehicle(cself, swifttoscvalue)
    }
  }

}

public class MyBicycle {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_MyBicycle(cself)
    }
  }

  public convenience init(b: Bicycle) {
    let swifttoscb = b.cself
    var err = ErrorObj()
    self.init(create_MyBicycle(swifttoscb, &err), true)
    let err_type = Int(err.err_type)
    if (err_type != 0) {
      switch(err_type) {
        case(1):
          let exc_obj = StdException(err.err_ptr, true)
          ExceptionHandler.handleUncaughtException(exc_obj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var bicycle: Bicycle {
    get {
      let result = _prop_get_MyBicycle_bicycle(cself)
      let sctoswiftresult = Bicycle(result, true)
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.cself
      _prop_set_MyBicycle_bicycle(cself, swifttoscvalue)
    }
  }

}
