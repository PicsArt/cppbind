/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/14/2022-10:58.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/// comments
/// 
public class SizeUsage {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_SizeUsage(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// comments
  /// 
  public static func multiplyBy(size: (Float, Float), n: Int) -> (Float, Float) {

    var swifttoscsize = CppBindSizeF()
    swifttoscsize.first = size.0
    swifttoscsize.second = size.1
    let swifttoscn = CInt(n)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_multiplyBy(swifttoscsize, swifttoscn, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresultFirst = result.first
    let sctoswiftresultSecond = result.second
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /// comments
  /// 
  public static func doubleSizeF() -> (Float, Float) {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_doubleSizeF_1(&cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresultFirst = result.first
    let sctoswiftresultSecond = result.second
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /// comments
  /// 
  public static func doubleSizeF(resolution: (Float, Float)) -> (Float, Float) {

    var swifttoscresolution = CppBindSizeF()
    swifttoscresolution.first = resolution.0
    swifttoscresolution.second = resolution.1
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_doubleSizeF(swifttoscresolution, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresultFirst = result.first
    let sctoswiftresultSecond = result.second
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::SizeUsage" }
}
