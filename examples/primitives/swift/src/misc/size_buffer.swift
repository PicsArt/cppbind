/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-15:55.
 * Please do not change it manually.
 */

import CWrapper
import Foundation
/**
 * comments
 * 
 */
public class SizeUsage  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
      release_SizeUsage(cself, owner)
    }
    
    
    
    /**
     * comments
     * 
     */
    public static func multiplyBy(size: (Float, Float), n: Int) -> (Float, Float) {

        let _first_swift_to_sc_size = UnsafeMutablePointer<Float>.allocate(capacity: 1)
        let _second_swift_to_sc_size = UnsafeMutablePointer<Float>.allocate(capacity: 1)
        defer {
          _first_swift_to_sc_size.deallocate()
          _second_swift_to_sc_size.deallocate()
        }
        var swift_to_sc_size = CDataPair()
        swift_to_sc_size.first = UnsafeMutableRawPointer(_first_swift_to_sc_size)
        swift_to_sc_size.second = UnsafeMutableRawPointer(_second_swift_to_sc_size)
        _first_swift_to_sc_size[0] = size.0
        _second_swift_to_sc_size[0] = size.1
        let swift_to_sc_n = CInt(n)
        var err = ErrorObj()
        let result = _func_SizeUsage_multiplyBy(swift_to_sc_size, swift_to_sc_n, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_pair_first_result_data = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
        let _tmp_pair_second_result_data = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
        defer {
          _tmp_pair_first_result_data.deallocate()
          _tmp_pair_second_result_data.deallocate()
        }
        let first_sc_to_swift_result = _tmp_pair_first_result_data[0]
        let second_sc_to_swift_result = _tmp_pair_second_result_data[0]
        let sc_to_swift_result: (Float, Float) = (first_sc_to_swift_result, second_sc_to_swift_result)
      return sc_to_swift_result
    }
    /**
     * comments
     * 
     */
    public static func doubleSizeF(resolution: (Float, Float)) -> (Float, Float) {

        let _first_swift_to_sc_resolution = UnsafeMutablePointer<Float>.allocate(capacity: 1)
        let _second_swift_to_sc_resolution = UnsafeMutablePointer<Float>.allocate(capacity: 1)
        defer {
          _first_swift_to_sc_resolution.deallocate()
          _second_swift_to_sc_resolution.deallocate()
        }
        var swift_to_sc_resolution = CDataPair()
        swift_to_sc_resolution.first = UnsafeMutableRawPointer(_first_swift_to_sc_resolution)
        swift_to_sc_resolution.second = UnsafeMutableRawPointer(_second_swift_to_sc_resolution)
        _first_swift_to_sc_resolution[0] = resolution.0
        _second_swift_to_sc_resolution[0] = resolution.1
        var err = ErrorObj()
        let result = _func_SizeUsage_doubleSizeF(swift_to_sc_resolution, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let _tmp_pair_first_result_data = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
        let _tmp_pair_second_result_data = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
        defer {
          _tmp_pair_first_result_data.deallocate()
          _tmp_pair_second_result_data.deallocate()
        }
        let first_sc_to_swift_result = _tmp_pair_first_result_data[0]
        let second_sc_to_swift_result = _tmp_pair_second_result_data[0]
        let sc_to_swift_result: (Float, Float) = (first_sc_to_swift_result, second_sc_to_swift_result)
      return sc_to_swift_result
    }
}