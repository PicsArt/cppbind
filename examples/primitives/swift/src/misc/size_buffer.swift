/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class SizeUsage {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_SizeUsage(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /**
   * comments
   * 
   */
  public static func multiplyBy(size: (Float, Float), n: Int) -> (Float, Float) {

    let swifttoscsizeFirst = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    let swifttoscsizeSecond = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    defer {
      swifttoscsizeFirst.deallocate()
      swifttoscsizeSecond.deallocate()
    }
    var swifttoscsize = CppBindCDataPair()
    swifttoscsize.first = UnsafeMutableRawPointer(swifttoscsizeFirst)
    swifttoscsize.second = UnsafeMutableRawPointer(swifttoscsizeSecond)
    swifttoscsizeFirst[0] = size.0
    swifttoscsizeSecond[0] = size.1
    let swifttoscn = CInt(n)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_multiplyBy(swifttoscsize, swifttoscn, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let resultFirstData = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
    let resultSecondData = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
    defer {
      resultFirstData.deallocate()
      resultSecondData.deallocate()
    }
    let sctoswiftresultFirst = resultFirstData[0]
    let sctoswiftresultSecond = resultSecondData[0]
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public static func doubleSizeF() -> (Float, Float) {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_doubleSizeF_1(&cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let resultFirstData = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
    let resultSecondData = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
    defer {
      resultFirstData.deallocate()
      resultSecondData.deallocate()
    }
    let sctoswiftresultFirst = resultFirstData[0]
    let sctoswiftresultSecond = resultSecondData[0]
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public static func doubleSizeF(resolution: (Float, Float)) -> (Float, Float) {

    let swifttoscresolutionFirst = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    let swifttoscresolutionSecond = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    defer {
      swifttoscresolutionFirst.deallocate()
      swifttoscresolutionSecond.deallocate()
    }
    var swifttoscresolution = CppBindCDataPair()
    swifttoscresolution.first = UnsafeMutableRawPointer(swifttoscresolutionFirst)
    swifttoscresolution.second = UnsafeMutableRawPointer(swifttoscresolutionSecond)
    swifttoscresolutionFirst[0] = resolution.0
    swifttoscresolutionSecond[0] = resolution.1
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_SizeUsage_doubleSizeF(swifttoscresolution, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let resultFirstData = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
    let resultSecondData = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
    defer {
      resultFirstData.deallocate()
      resultSecondData.deallocate()
    }
    let sctoswiftresultFirst = resultFirstData[0]
    let sctoswiftresultSecond = resultSecondData[0]
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::SizeUsage" }
}
