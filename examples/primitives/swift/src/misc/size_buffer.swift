/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/08/2021-11:58.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class SizeUsage {

  public let cself: CObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: CObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_SizeUsage(cself, owner)
  }

  /**
   * comments
   * 
   */
  public static func multiplyBy(size: (Float, Float), n: Int) -> (Float, Float) {

    let swifttoscsizeFirst = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    let swifttoscsizeSecond = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    defer {
      swifttoscsizeFirst.deallocate()
      swifttoscsizeSecond.deallocate()
    }
    var swifttoscsize = CDataPair()
    swifttoscsize.first = UnsafeMutableRawPointer(swifttoscsizeFirst)
    swifttoscsize.second = UnsafeMutableRawPointer(swifttoscsizeSecond)
    swifttoscsizeFirst[0] = size.0
    swifttoscsizeSecond[0] = size.1
    let swifttoscn = CInt(n)
    var err = ErrorObj()
    let result = _func_SizeUsage_multiplyBy(swifttoscsize, swifttoscn, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    
    let resultFirstData = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
    let resultSecondData = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
    defer {
      resultFirstData.deallocate()
      resultSecondData.deallocate()
    }
    let sctoswiftresultFirst = resultFirstData[0]
    let sctoswiftresultSecond = resultSecondData[0]
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

  /**
   * comments
   * 
   */
  public static func doubleSizeF(resolution: (Float, Float)) -> (Float, Float) {

    let swifttoscresolutionFirst = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    let swifttoscresolutionSecond = UnsafeMutablePointer<Float>.allocate(capacity: 1)
    defer {
      swifttoscresolutionFirst.deallocate()
      swifttoscresolutionSecond.deallocate()
    }
    var swifttoscresolution = CDataPair()
    swifttoscresolution.first = UnsafeMutableRawPointer(swifttoscresolutionFirst)
    swifttoscresolution.second = UnsafeMutableRawPointer(swifttoscresolutionSecond)
    swifttoscresolutionFirst[0] = resolution.0
    swifttoscresolutionSecond[0] = resolution.1
    var err = ErrorObj()
    let result = _func_SizeUsage_doubleSizeF(swifttoscresolution, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(CObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    
    let resultFirstData = UnsafeBufferPointer<Float>(start: result.first.assumingMemoryBound(to: Float.self), count: 1)
    let resultSecondData = UnsafeBufferPointer<Float>(start: result.second.assumingMemoryBound(to: Float.self), count: 1)
    defer {
      resultFirstData.deallocate()
      resultSecondData.deallocate()
    }
    let sctoswiftresultFirst = resultFirstData[0]
    let sctoswiftresultSecond = resultSecondData[0]
    let sctoswiftresult: (Float, Float) = (sctoswiftresultFirst, sctoswiftresultSecond)
    return sctoswiftresult
  }

}
