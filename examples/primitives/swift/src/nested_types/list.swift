/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/04/2022-11:27.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public typealias Item = List.Item

/**
 * An example with multi level nested type using header_code_fragment to create an alias in target languages.
 */
public class List {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_List(cself, owner)
  }

  public convenience init() {
    var err = IEGenCObject()
    self.init(create_List(&err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(IEGenCObject(type: err.type, ptr: err.ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
        err.type.deallocate()
      }
    }
  }

  public var back: Item {
    get {
      let result = _prop_get_List_back(cself)
      var sctoswiftresult: Item
      sctoswiftresult = Item(result)
      return sctoswiftresult
    }
  }

  public class Item {

    public let cself: IEGenCObject
    public let owner: Bool

    // internal main initializer
    internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }

    deinit {
      release_Item(cself, owner)
    }

    public convenience init(v: Value) {
      let swifttoscv = v.cself
      var err = IEGenCObject()
      self.init(create_Item(swifttoscv, &err), true)
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(IEGenCObject(type: err.type, ptr: err.ptr), true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
          err.type.deallocate()
        }
      }
    }

    public var value: Value {
      get {
        let result = _prop_get_Item_value(cself)
        var sctoswiftresult: Value
        sctoswiftresult = Value(result)
        return sctoswiftresult
      }

      set(value) {
        let swifttoscvalue = value.cself
        _prop_set_Item_value(cself, swifttoscvalue)
      }
    }

    public class Value {

      public let cself: IEGenCObject
      public let owner: Bool

      // internal main initializer
      internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
      }

      deinit {
        release_Value(cself, owner)
      }

      public convenience init(value: Int) {
        let swifttoscvalue = CInt(value)
        var err = IEGenCObject()
        self.init(create_Value(swifttoscvalue, &err), true)
        if err.type != nil {
          let errorType = String(cString: err.type!)
          switch errorType {
          case ("std::exception"):
            let excObj = StdException(IEGenCObject(type: err.type, ptr: err.ptr), true)
            ExceptionHandler.handleUncaughtException(excObj.what())
          default:
            ExceptionHandler.handleUncaughtException("Uncaught Exception")
            err.type.deallocate()
          }
        }
      }

      public var value: Int {
        get {
          let result = _prop_get_Value_value(cself)
          let sctoswiftresult = Int(result)
          return sctoswiftresult
        }

        set(value) {
          let swifttoscvalue = CInt(value)
          _prop_set_Value_value(cself, swifttoscvalue)
        }
      }

    }

  }

  public func push_back(item: Item) -> Void {

    let swifttoscitem = item.cself
    var err = IEGenCObject()
    _func_List_push_back(cself, swifttoscitem, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(IEGenCObject(type: err.type, ptr: err.ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
        err.type.deallocate()
      }
    }
  }

  public func pop_back() -> Void {

    var err = IEGenCObject()
    _func_List_pop_back(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(IEGenCObject(type: err.type, ptr: err.ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
        err.type.deallocate()
      }
    }
  }

}

public typealias Value = List.Item.Value
