/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/30/2022-09:24.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public typealias Item = List.Item

/**
 * An example with multi level nested type using header_code_fragment to create an alias in target languages.
 */
public class List {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_IegenExample_List(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var iegenErr = IEGenCObject()
    self.init(create_IegenExample_List(&iegenErr), true)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var back: List.Item {
    var iegenErr = IEGenCObject()
    let result = _prop_get_IegenExample_List_back(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: List.Item
    sctoswiftresult = List.Item(result)
    return sctoswiftresult
  }

  public class Item {

    public let cself: IEGenCObject
    public let owner: Bool
    private var refs: [Any]

    // internal main initializer
    internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
      self.refs = []
    }

    deinit {
      release_List_Item(cself, owner)
    }

    public func keepIEGenReference(_ object: Any) {
      self.refs.append(object)
    }

    public convenience init(v: List.Item.Value) {
      let swifttoscv = v.cself
      var iegenErr = IEGenCObject()
      self.init(create_List_Item(swifttoscv, &iegenErr), true)
      if iegenErr.type != nil {
        let errorType = String(cString: iegenErr.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(iegenErr, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          iegenErr.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }

    public var value: List.Item.Value {
      get {
        let result = _prop_get_List_Item_value(cself)
        var sctoswiftresult: List.Item.Value
        sctoswiftresult = List.Item.Value(result)
        sctoswiftresult.keepIEGenReference(self)
        return sctoswiftresult
      }

      set(value) {
        let swifttoscvalue = value.cself
        _prop_set_List_Item_value(cself, swifttoscvalue)
      }
    }

    public class Value {

      public let cself: IEGenCObject
      public let owner: Bool
      private var refs: [Any]

      // internal main initializer
      internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
        self.refs = []
      }

      deinit {
        release_List_Item_Value(cself, owner)
      }

      public func keepIEGenReference(_ object: Any) {
        self.refs.append(object)
      }

      public convenience init(value: Int) {
        let swifttoscvalue = CInt(value)
        var iegenErr = IEGenCObject()
        self.init(create_List_Item_Value(swifttoscvalue, &iegenErr), true)
        if iegenErr.type != nil {
          let errorType = String(cString: iegenErr.type!)
          switch errorType {
          case ("std::exception"):
            let excObj = StdException(iegenErr, true)
            ExceptionHandler.handleUncaughtException(excObj.what())
          default:
            iegenErr.type.deallocate()
            ExceptionHandler.handleUncaughtException("Uncaught Exception")
          }
        }
      }

      public var value: Int {
        get {
          let result = _prop_get_List_Item_Value_value(cself)
          let sctoswiftresult = Int(result)
          return sctoswiftresult
        }

        set(value) {
          let swifttoscvalue = CInt(value)
          _prop_set_List_Item_Value_value(cself, swifttoscvalue)
        }
      }

    }

  }

  public func push_back(item: List.Item) -> Void {

    let swifttoscitem = item.cself
    var iegenErr = IEGenCObject()
    _func_IegenExample_List_push_back(cself, swifttoscitem, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func pop_back() -> Void {

    var iegenErr = IEGenCObject()
    _func_IegenExample_List_pop_back(cself, &iegenErr)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

}

public typealias Value = List.Item.Value
