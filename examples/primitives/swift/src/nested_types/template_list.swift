/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/29/2022-15:47.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * An example with template nested types.
 */
public class TemplateListInt {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_IegenExample_TemplateListInt(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var iegenErr = IEGenCObject()
    self.init(create_IegenExample_TemplateListInt(&iegenErr), true)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public class Item {

    public let cself: IEGenCObject
    public let owner: Bool
    private var refs: [Any]

    // internal main initializer
    internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
      self.refs = []
    }

    deinit {
      release_TemplateListInt_Item(cself, owner)
    }

    public func keepIEGenReference(_ object: Any) {
      self.refs.append(object)
    }

    public convenience init(v: Int) {
      let swifttoscv = CInt(v)
      var iegenErr = IEGenCObject()
      self.init(create_TemplateListInt_Item(swifttoscv, &iegenErr), true)
      if iegenErr.type != nil {
        let errorType = String(cString: iegenErr.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(iegenErr, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          iegenErr.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }

    public var value: Int {
      get {
        let result = _prop_get_TemplateListInt_Item_value(cself)
        let sctoswiftresult = Int(result)
        return sctoswiftresult
      }

      set(value) {
        let swifttoscvalue = CInt(value)
        _prop_set_TemplateListInt_Item_value(cself, swifttoscvalue)
      }
    }

  }

}

/**
 * An example with template nested types.
 */
public class TemplateListDouble {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_IegenExample_TemplateListDouble(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var iegenErr = IEGenCObject()
    self.init(create_IegenExample_TemplateListDouble(&iegenErr), true)
    if iegenErr.type != nil {
      let errorType = String(cString: iegenErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(iegenErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        iegenErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public class Item {

    public let cself: IEGenCObject
    public let owner: Bool
    private var refs: [Any]

    // internal main initializer
    internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
      self.refs = []
    }

    deinit {
      release_TemplateListDouble_Item(cself, owner)
    }

    public func keepIEGenReference(_ object: Any) {
      self.refs.append(object)
    }

    public convenience init(v: Double) {
      var iegenErr = IEGenCObject()
      self.init(create_TemplateListDouble_Item(v, &iegenErr), true)
      if iegenErr.type != nil {
        let errorType = String(cString: iegenErr.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(iegenErr, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          iegenErr.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }

    public var value: Double {
      get {
        let result = _prop_get_TemplateListDouble_Item_value(cself)
        return result
      }

      set(value) {
        _prop_set_TemplateListDouble_Item_value(cself, value)
      }
    }

  }

}
