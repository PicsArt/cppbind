/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/06/2021-14:43.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class NumInt  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_NumInt(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init(val_: Int) {

        let swift_to_sc_val_ = CInt(val_)
        var err = ErrorObj()
        self.init(create_NumInt(swift_to_sc_val_, &err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    

    public var value: Int {
        get {
            let result = _prop_get_NumInt_value(cself)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
    }
    
}

public class NumDouble  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_NumDouble(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init(val_: Double) {

        
        var err = ErrorObj()
        self.init(create_NumDouble(val_, &err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    

    public var value: Double {
        get {
            let result = _prop_get_NumDouble_value(cself)
            
            return result
        }
    }
    
}
/**
 * An example with nullable arguments.
 */
public class NullableUtils  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_NullableUtils(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init(num: NumDouble?) {

        let swift_to_sc_num = CObject(type: num?.cself.type, ptr: num?.cself.ptr)
        var err = ErrorObj()
        self.init(create_NullableUtils(swift_to_sc_num, &err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    
    public var nullable: NumDouble? {
        get {
            let result = _prop_get_NullableUtils_nullable(cself)
            var sc_to_swift_result: NumDouble? = nil
            if (result.ptr != nil) {
                sc_to_swift_result = NumDouble(result)
            }
            return sc_to_swift_result
        }
        
        
        set(value) {
            let swift_to_sc_value = CObject(type: value?.cself.type, ptr: value?.cself.ptr)
            _prop_set_NullableUtils_nullable(cself, swift_to_sc_value)
        }
        
    }

    public var nonNull: NumDouble {
        get {
            let result = _prop_get_NullableUtils_nonNull(cself)
            var sc_to_swift_result: NumDouble
            sc_to_swift_result = NumDouble(result)
            return sc_to_swift_result
        }
        
        
        set(value) {
            let swift_to_sc_value = value.cself
            _prop_set_NullableUtils_nonNull(cself, swift_to_sc_value)
        }
        
    }


    public var numDouble: NumDouble? {
        get {
            let result = _prop_get_NullableUtils_numDouble(cself)
            var sc_to_swift_result: NumDouble? = nil
            if (result.ptr != nil) {
                sc_to_swift_result = NumDouble(result)
            }
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_value = CObject(type: value?.cself.type, ptr: value?.cself.ptr)
            _prop_set_NullableUtils_numDouble(cself, swift_to_sc_value)
        }
        
    }


    public var numInt: NumInt {
        get {
            let result = _prop_get_NullableUtils_numInt(cself)
            var sc_to_swift_result: NumInt
                sc_to_swift_result = NumInt(result, true)
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_value = value.cself
            _prop_set_NullableUtils_numInt(cself, swift_to_sc_value)
        }
        
    }
    
    public static func max(first: NumDouble?, second: NumDouble) -> NumDouble? {

        let swift_to_sc_first = CObject(type: first?.cself.type, ptr: first?.cself.ptr)
        let swift_to_sc_second = second.cself
        var err = ErrorObj()
        let result = _func_NullableUtils_max(swift_to_sc_first, swift_to_sc_second, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      var sc_to_swift_result: NumDouble? = nil
        if (result.ptr != nil) {
            sc_to_swift_result = NumDouble(result)
        }
      return sc_to_swift_result
    }

    public static func max(first: NumInt?, second: NumInt?) -> NumInt? {

        let swift_to_sc_first = CObject(type: first?.cself.type, ptr: first?.cself.ptr)
        let swift_to_sc_second = CObject(type: second?.cself.type, ptr: second?.cself.ptr)
        var err = ErrorObj()
        let result = _func_NullableUtils_max_1(swift_to_sc_first, swift_to_sc_second, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      var sc_to_swift_result: NumInt? = nil
            if (result.ptr != nil) {
                sc_to_swift_result = NumInt(result, true)
            }
      return sc_to_swift_result
    }

    public static func checkNonnullArg(number: NumDouble) -> Void {

        let swift_to_sc_number = number.cself
        var err = ErrorObj()
        _func_NullableUtils_checkNonnullArg(swift_to_sc_number, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public static func checkNonnullReturn() -> NumDouble {

        var err = ErrorObj()
        let result = _func_NullableUtils_checkNonnullReturn(&err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      var sc_to_swift_result: NumDouble
        sc_to_swift_result = NumDouble(result)
      return sc_to_swift_result
    }
}