/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-11:54.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * An example for with overloaded methods.
 */
public class Counter {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_Counter(cself)
    }
  }

  /**
   * Counter constructor.
   */
  public convenience init(count: Int) {
    let swiftToScCount = CInt(count)
    self.init(create_Counter(swiftToScCount), true)
  }

  /**
   * Getter for count.
   */
  public var count: Int {
    get {
      let result = _prop_get_Counter_count(cself)
      let scToSwiftResult = Int(result)
      return scToSwiftResult
    }
  }

  /**
   * Plus operator
   */
  public static func +(cself: Counter, counter: Counter) -> Counter {
    let swiftToScCounter = counter.cself
    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_Counter_operator_add_(cself.cself, swiftToScCounter, &err)
    let scToSwiftResult = Counter(result, true)
    return scToSwiftResult
  }

  /**
   * Comparison operator for kotlin
   */
  public func compareTo(counter: Counter) -> Int {

    let swiftToScCounter = counter.cself
    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_Counter_compareTo(cself, swiftToScCounter, &err)
    let scToSwiftResult = Int(result)
    return scToSwiftResult
  }

  public static func >(cself: Counter, counter: Counter) -> Bool {
    let swiftToScCounter = counter.cself
    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_Counter_operator_gt_(cself.cself, swiftToScCounter, &err)
    return result
  }

  public static func +=(cself: Counter, counter: Counter) -> Counter {
    let swiftToScCounter = counter.cself
    var err = ErrorObj()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let result = _func_Counter_operator_iadd_(cself.cself, swiftToScCounter, &err)
    let scToSwiftResult = Counter(result)
    return scToSwiftResult
  }

}
