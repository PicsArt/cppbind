/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/25/2021-15:57.
 * Please do not change it manually.
 */

import CWrapper
import Foundation
/**
 * An example for with overloaded operators.
 */
public protocol IntArray  {

    
    var cself : UnsafeMutableRawPointer { get }
    
    
    
    
    subscript(i: Int) -> Int { get set }

    subscript(i: String) -> Int { get }
}
extension IntArray {
    
    

    public subscript(i: Int) -> Int {
        get {
            let swift_to_sc_i = CInt(i)
            let result = _func_IntArray_operator_getitem_(cself, swift_to_sc_i)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_i = CInt(i)
            let swift_to_sc_value = CInt(value)
            _func_IntArray_operator_setitem_(cself, swift_to_sc_i, swift_to_sc_value)
        }
    }


    public subscript(i: String) -> Int {
        get {
            let swift_to_sc_i = strdup(i)!
            let result = _func_IntArray_operator_getitem__1(cself, swift_to_sc_i)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
    }
}
public class IntArrayImpl : IntArray {
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
      self.cself = _cself
      self.owner = _owner
    }
    deinit {
      if owner {
        release_IntArrayImpl(cself)
      }
    }

    
    public convenience init() {

        self.init(create_IntArray(), true)
    }
}