/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-12:32.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Optionals {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_Optionals(cself)
    }
  }

  /**
   * constructor
   */
  public convenience init() {
    var err = ErrorObj()
    self.init(create_Optionals(&err), true)
    let err_type = Int(err.err_type)
    if (err_type != 0) {
      switch(err_type) {
        case(1):
          let exc_obj = StdException(err.err_ptr, true)
          ExceptionHandler.handleUncaughtException(exc_obj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func optionalPtrWithNullptrDefault(task: Task? = nil) -> Task? {

    let swiftToScTask = task?.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalPtrWithNullptrDefault(cself, swiftToScTask, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult: Task?
    if let result = result {
      scToSwiftResult = Task(result)
    } else {
      scToSwiftResult = nil
    }
    return scToSwiftResult
  }

  public func optionalPtrWithNullDefault(task: Task? = nil) -> Task? {

    let swiftToScTask = task?.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalPtrWithNullDefault(cself, swiftToScTask, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult: Task?
    if let result = result {
      scToSwiftResult = Task(result)
    } else {
      scToSwiftResult = nil
    }
    return scToSwiftResult
  }

  public func optionalFDPtrWithNullptrDefault(project: Project? = nil) -> Project? {

    let swiftToScProject = project?.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalFDPtrWithNullptrDefault(cself, swiftToScProject, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult: Project?
    if let result = result {
      scToSwiftResult = Project(result)
    } else {
      scToSwiftResult = nil
    }
    return scToSwiftResult
  }

  public func optionalSharedPtrWithNullptrDefault(person: Person? = nil) -> Person? {

    let swiftToScPerson = person?.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalSharedPtrWithNullptrDefault(cself, swiftToScPerson, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult: Person?
        if let result = result {
          scToSwiftResult = Person(result, true)
        } else {
          scToSwiftResult = nil
        }
    return scToSwiftResult
  }

  public func optionalIntWithDefault(value: Int = 5) -> Int {

    let swiftToScValue = CInt(value)
    var err = ErrorObj()
    let result = _func_Optionals_optionalIntWithDefault(cself, swiftToScValue, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = Int(result)
    return scToSwiftResult
  }

  public func optionalLongWithDefault(value: CLong = 7) -> CLong {

    var err = ErrorObj()
    let result = _func_Optionals_optionalLongWithDefault(cself, value, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalDoubleWithDefault(value: Double = 9.0) -> Double {

    var err = ErrorObj()
    let result = _func_Optionals_optionalDoubleWithDefault(cself, value, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalFloatWithDefault(value: Float = 11.0) -> Float {

    var err = ErrorObj()
    let result = _func_Optionals_optionalFloatWithDefault(cself, value, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalBoolWithDefault(value: Bool = true) -> Bool {

    var err = ErrorObj()
    let result = _func_Optionals_optionalBoolWithDefault(cself, value, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /**
   * @param[in] optionalStr string with default value
   */
  public func optionalStringWithDefault(optionalStr: String = "abc") -> String {

    let swiftToScOptionalstr = strdup(optionalStr)!
    var err = ErrorObj()
    let result = _func_Optionals_optionalStringWithDefault(cself, swiftToScOptionalstr, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = String(cString: result)
    defer {
      result.deallocate()
    }
    return scToSwiftResult
  }

  /**
   * @param[in] optionalStr string with default value
   */
  public func optionalStringViewWithDefault(optionalStr: String = "abc") -> String {

    let swiftToScOptionalstr = strdup(optionalStr)!
    var err = ErrorObj()
    let result = _func_Optionals_optionalStringViewWithDefault(cself, swiftToScOptionalstr, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = String(cString: result)
    defer {
      result.deallocate()
    }
    return scToSwiftResult
  }

  public func optionalCharPointerWithDefault(optionalStr: String = "def") -> String {

    let swiftToScOptionalstr = optionalStr.cString(using: String.Encoding.utf8)!
    var err = ErrorObj()
    let result = _func_Optionals_optionalCharPointerWithDefault(cself, swiftToScOptionalstr, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = String(cString: result)
    return scToSwiftResult
  }

  public func optionalEnumWithDefault(c: Color = Color.Red) -> Color {

    let swiftToScC = c.rawValue
    var err = ErrorObj()
    let result = _func_Optionals_optionalEnumWithDefault(cself, swiftToScC, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    
    let scToSwiftResultOptional = Color(rawValue: result)
    if (scToSwiftResultOptional == nil) {
      ExceptionHandler.handleUncaughtException(
      "Internal error: unresolved reference to non existing field of Color enum.")
    }
    let scToSwiftResult = scToSwiftResultOptional!
    return scToSwiftResult
  }

  public func optionalEnumWithDefaultAndFieldPrefix(c: ColorShade = ColorShade.ShadeLight) -> ColorShade {

    let swiftToScC = c.rawValue
    var err = ErrorObj()
    let result = _func_Optionals_optionalEnumWithDefaultAndFieldPrefix(cself, swiftToScC, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    
    let scToSwiftResultOptional = ColorShade(rawValue: result)
    if (scToSwiftResultOptional == nil) {
      ExceptionHandler.handleUncaughtException(
      "Internal error: unresolved reference to non existing field of ColorShade enum.")
    }
    let scToSwiftResult = scToSwiftResultOptional!
    return scToSwiftResult
  }

  public func optionalEnumWithInternalDefault(c: ColorShade) -> ColorShade {

    let swiftToScC = c.rawValue
    var err = ErrorObj()
    let result = _func_Optionals_optionalEnumWithInternalDefault(cself, swiftToScC, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    
    let scToSwiftResultOptional = ColorShade(rawValue: result)
    if (scToSwiftResultOptional == nil) {
      ExceptionHandler.handleUncaughtException(
      "Internal error: unresolved reference to non existing field of ColorShade enum.")
    }
    let scToSwiftResult = scToSwiftResultOptional!
    return scToSwiftResult
  }

  public func optionalRefWithDefaultComplexValue(task: Task) -> Task {

    let swiftToScTask = task.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalRefWithDefaultComplexValue(cself, swiftToScTask, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = Task(result)
    return scToSwiftResult
  }

  public func optionalByValWithDefaultComplexValue(task: Task) -> Task {

    let swiftToScTask = task.cself
    var err = ErrorObj()
    let result = _func_Optionals_optionalByValWithDefaultComplexValue(cself, swiftToScTask, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = Task(result, true)
    return scToSwiftResult
  }

}
