/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/02/2022-11:51.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Optionals {

  /**
   * An internal property to keep a reference to the original C++ object.
   * It is intended to be used by the generated code.
   */
  public let cself: CppBindCObject

  /**
   * An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
   * It is intended to be used by the generated code.
   */
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Optionals(cself, owner)
  }

  /**
   * An internal method to bind the lifetimes of the current and another object.
   * It is intended to be used by the generated code.
   */
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Optionals_1(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public convenience init(task: Task, i: Int = 1) {
    let swifttosctask = task.cself
    let swifttosci = CInt(i)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Optionals_2(swifttosctask, swifttosci, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public convenience init(task: Task, i: Int = 1, r: Root) {
    let swifttosctask = task.cself
    let swifttosci = CInt(i)
    let swifttoscr = r.cself
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Optionals(swifttosctask, swifttosci, swifttoscr, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func optionalPtrWithNullptrDefault(task: Task? = nil) -> Task? {

    let swifttosctask = task?.cself ?? CppBindCObject(type: nil, ptr: nil)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalPtrWithNullptrDefault(cself, swifttosctask, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Task? = nil
    if (result.ptr != nil) {
      sctoswiftresult = Task(result)
    }
    return sctoswiftresult
  }

  public func optionalPtrWithNullDefault(task: Task? = nil) -> Task? {

    let swifttosctask = task?.cself ?? CppBindCObject(type: nil, ptr: nil)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalPtrWithNullDefault(cself, swifttosctask, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Task? = nil
    if (result.ptr != nil) {
      sctoswiftresult = Task(result)
    }
    return sctoswiftresult
  }

  public func optionalIntWithDefault(value: Int = 5) -> Int {

    let swifttoscvalue = CInt(value)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalIntWithDefault(cself, swifttoscvalue, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public func optionalLongWithDefault(value: CLong = 7) -> CLong {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalLongWithDefault(cself, value, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalDoubleWithDefault(value: Double = 9.0) -> Double {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalDoubleWithDefault(cself, value, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalFloatWithDefault(value: Float = 11.0) -> Float {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalFloatWithDefault(cself, value, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalBoolWithDefault(value: Bool = true) -> Bool {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalBoolWithDefault(cself, value, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /**
   * @param[in] optionalStr string with default value
   */
  public func optionalStringWithDefault(optionalStr: String = "abc") -> String {

    let swifttoscoptionalStr = strdup(optionalStr)!
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalStringWithDefault(cself, swifttoscoptionalStr, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func optionalCharWithDefault(symbol: Character = ",") -> Character {

    let swifttoscsymbol = symbol.description.utf8CString[0]
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalCharWithDefault(cself, swifttoscsymbol, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Character(UnicodeScalar(Int(result))!)
    return sctoswiftresult
  }

  public func optionalUnsignedCharWithDefault(num: CUnsignedChar = 100) -> CUnsignedChar {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalUnsignedCharWithDefault(cself, num, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func optionalCharPointerWithDefault(optionalStr: String = "def") -> String {

    let swifttoscoptionalStr = optionalStr.cString(using: String.Encoding.utf8)!
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalCharPointerWithDefault(cself, swifttoscoptionalStr, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    return sctoswiftresult
  }

  public func optionalEnumWithDefault(c: Color = Color.Red) -> Color {

    let swifttoscc = c.rawValue
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalEnumWithDefault(cself, swifttoscc, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    guard let sctoswiftresult = Color(rawValue: result) else {
       ExceptionHandler.handleUncaughtException(
          "Internal error: unresolved reference to non existing field of Color enum.")
    }
    return sctoswiftresult
  }

  public func singleComplexDefaultValue() -> Task {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_singleComplexDefaultValue_1(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Task
    sctoswiftresult = Task(result, true)
    return sctoswiftresult
  }

  public func singleComplexDefaultValue(task: Task) -> Task {

    let swifttosctask = task.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_singleComplexDefaultValue(cself, swifttosctask, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Task
    sctoswiftresult = Task(result, true)
    return sctoswiftresult
  }

  public func multipleMixedDefaultValues() -> String {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_multipleMixedDefaultValues_1(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func multipleMixedDefaultValues(task: Task, i: Int = 1) -> String {

    let swifttosctask = task.cself
    let swifttosci = CInt(i)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_multipleMixedDefaultValues_2(cself, swifttosctask, swifttosci, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func multipleMixedDefaultValues(task: Task, i: Int = 1, r: Root) -> String {

    let swifttosctask = task.cself
    let swifttosci = CInt(i)
    let swifttoscr = r.cself
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_multipleMixedDefaultValues(cself, swifttosctask, swifttosci, swifttoscr, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func optionalEnumWithDefaultAndFieldPrefix(c: ColorShade = ColorShade.ShadeLight) -> ColorShade {

    let swifttoscc = c.rawValue
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalEnumWithDefaultAndFieldPrefix(cself, swifttoscc, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    guard let sctoswiftresult = ColorShade(rawValue: result) else {
       ExceptionHandler.handleUncaughtException(
          "Internal error: unresolved reference to non existing field of ColorShade enum.")
    }
    return sctoswiftresult
  }

  public func optionalEnumWithInternalDefault(c: ColorShade) -> ColorShade {

    let swifttoscc = c.rawValue
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalEnumWithInternalDefault(cself, swifttoscc, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    guard let sctoswiftresult = ColorShade(rawValue: result) else {
       ExceptionHandler.handleUncaughtException(
          "Internal error: unresolved reference to non existing field of ColorShade enum.")
    }
    return sctoswiftresult
  }

  /**
   * @param[in] optionalStr string with default value
   */
  public func optionalStringViewWithDefault(optionalStr: String = "abc") -> String {

    let swifttoscoptionalStr = strdup(optionalStr)!
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalStringViewWithDefault(cself, swifttoscoptionalStr, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public func optionalFDPtrWithNullptrDefault(project: Project? = nil) -> Project? {

    let swifttoscproject = project?.cself ?? CppBindCObject(type: nil, ptr: nil)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalFDPtrWithNullptrDefault(cself, swifttoscproject, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Project? = nil
    if (result.ptr != nil) {
      sctoswiftresult = Project(result)
    }
    return sctoswiftresult
  }

  public func optionalSharedPtrWithNullptrDefault(person: Person? = nil) -> Person? {

    let swifttoscperson = person?.cself ?? CppBindCObject(type: nil, ptr: nil)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Optionals_optionalSharedPtrWithNullptrDefault(cself, swifttoscperson, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Person? = nil
    if (result.ptr != nil) {
      sctoswiftresult = Person(result, true)
    }
    return sctoswiftresult
  }

  /**
   * An internal property to keep an information about the underlying C++ object type.
   * It is intended to be used by the generated code.
   */
  class var cppbindCxxTypeName : String { return "cppbind::example::Optionals" }
}
