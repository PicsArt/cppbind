/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/06/2021-14:43.
 * Please do not change it manually.
 */

import CWrapper
import Foundation
/**
 * An example with overloaded methods.
 */
public class Utils  {
    
    public let cself : CObject
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: CObject, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_Utils(cself)
            cself.type?.deallocate()
        }
    }
    
    
    public convenience init() {

        var err = ErrorObj()
        self.init(create_Utils(&err), true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
    
    /**
     * Sum two ints.
     */
    public static func sum(first: Int, second: Int) -> Int {

        let swift_to_sc_first = CInt(first)
        let swift_to_sc_second = CInt(second)
        var err = ErrorObj()
        let result = _func_Utils_sum(swift_to_sc_first, swift_to_sc_second, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let sc_to_swift_result = Int(result)
      return sc_to_swift_result
    }
    /**
     * Sum two floats.
     */
    public static func sum(first: Float, second: Float) -> Float {

        
        
        var err = ErrorObj()
        let result = _func_Utils_sum_1(first, second, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      
      return result
    }
    /**
     * Concatenate with two strings.
     */
    public func concatenate(first: String, second: String) -> String {

        let swift_to_sc_first = strdup(first)!
        let swift_to_sc_second = strdup(second)!
        var err = ErrorObj()
        let result = _func_Utils_concatenate(cself, swift_to_sc_first, swift_to_sc_second, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let sc_to_swift_result = String(cString: result)
        defer {
          result.deallocate()
        }
      return sc_to_swift_result
    }
    /**
     * Concatenate with three strings.
     */
    public func concatenate(first: String, second: String, third: String) -> String {

        let swift_to_sc_first = strdup(first)!
        let swift_to_sc_second = strdup(second)!
        let swift_to_sc_third = strdup(third)!
        var err = ErrorObj()
        let result = _func_Utils_concatenate_1(cself, swift_to_sc_first, swift_to_sc_second, swift_to_sc_third, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(CObject(type: nil, ptr: err.err_ptr), true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
      let sc_to_swift_result = String(cString: result)
        defer {
          result.deallocate()
        }
      return sc_to_swift_result
    }
}