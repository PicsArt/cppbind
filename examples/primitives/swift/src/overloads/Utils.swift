/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/09/2022-07:52.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * An example with overloaded methods.
 */
public class Utils {

  /**
   * An internal property to keep a reference to the original C++ object.
   * It is intended to be used by the generated code.
   */
  public let cself: CppBindCObject

  /**
   * An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
   * It is intended to be used by the generated code.
   */
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Utils(cself, owner)
  }

  /**
   * An internal method to bind the lifetimes of the current and another object.
   * It is intended to be used by the generated code.
   */
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Utils(&cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * Sum two ints.
   */
  public static func sum(first: Int, second: Int) -> Int {

    let swifttoscfirst = CInt(first)
    let swifttoscsecond = CInt(second)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_sum(swifttoscfirst, swifttoscsecond, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  /**
   * Sum two floats.
   */
  public static func sum(first: Float, second: Float) -> Float {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_sum1(first, second, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  /**
   * Concatenate with two strings.
   */
  public func concatenate(first: String, second: String) -> String {

    let swifttoscfirst = strdup(first)!
    let swifttoscsecond = strdup(second)!
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_concatenate(cself, swifttoscfirst, swifttoscsecond, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /**
   * Concatenate with three strings.
   */
  public func concatenate(first: String, second: String, third: String) -> String {

    let swifttoscfirst = strdup(first)!
    let swifttoscsecond = strdup(second)!
    let swifttoscthird = strdup(third)!
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_concatenate1(cself, swifttoscfirst, swifttoscsecond, swifttoscthird, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  /**
   * Sub two ints.
   */
  public static func minus(first: Int, second: Int) -> Int {

    let swifttoscfirst = CInt(first)
    let swifttoscsecond = CInt(second)
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_minus(swifttoscfirst, swifttoscsecond, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  /**
   * Sub two floats.
   */
  public static func minus(first: Float, second: Float) -> Float {

    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_minus1(first, second, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return result
  }

  public func sum(first: Array<Int>, second: Array<Int>) -> Array<Int> {

    let _swifttoscfirstData = UnsafeMutablePointer<CInt>.allocate(capacity: first.count)
    var swifttoscfirst = CppBindCDataArray()
    swifttoscfirst.data = UnsafeMutableRawPointer(_swifttoscfirstData)
    swifttoscfirst.size = Int64(first.count)
    for i in 0..<first.count {
      let firstVal = first[i]
      let swifttoscfirstVal = CInt(firstVal)
      _swifttoscfirstData[i] = swifttoscfirstVal
    }
    let _swifttoscsecondData = UnsafeMutablePointer<CInt>.allocate(capacity: second.count)
    var swifttoscsecond = CppBindCDataArray()
    swifttoscsecond.data = UnsafeMutableRawPointer(_swifttoscsecondData)
    swifttoscsecond.size = Int64(second.count)
    for i in 0..<second.count {
      let secondVal = second[i]
      let swifttoscsecondVal = CInt(secondVal)
      _swifttoscsecondData[i] = swifttoscsecondVal
    }
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_sum2(cself, swifttoscfirst, swifttoscsecond, &cppbindErr)
    
    swifttoscfirst.data.deallocate()
    
    swifttoscsecond.data.deallocate()
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultBuffer = UnsafeBufferPointer<CInt>(
      start: result.data.assumingMemoryBound(to: CInt.self),
      count: Int(result.size))
    var sctoswiftresult: [Int] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      let sctoswiftresultValue = Int(resultValue)
      sctoswiftresult.append(sctoswiftresultValue)
    }
    return sctoswiftresult
  }

  public func sum(first: Array<Float>, second: Array<Float>) -> Array<Float> {

    let _swifttoscfirstData = UnsafeMutablePointer<CFloat>.allocate(capacity: first.count)
    var swifttoscfirst = CppBindCDataArray()
    swifttoscfirst.data = UnsafeMutableRawPointer(_swifttoscfirstData)
    swifttoscfirst.size = Int64(first.count)
    for i in 0..<first.count {
      let firstVal = first[i]
      
      _swifttoscfirstData[i] = firstVal
    }
    let _swifttoscsecondData = UnsafeMutablePointer<CFloat>.allocate(capacity: second.count)
    var swifttoscsecond = CppBindCDataArray()
    swifttoscsecond.data = UnsafeMutableRawPointer(_swifttoscsecondData)
    swifttoscsecond.size = Int64(second.count)
    for i in 0..<second.count {
      let secondVal = second[i]
      
      _swifttoscsecondData[i] = secondVal
    }
    var cppbindErr = CppBindCObject()
    let result = _func_CppbindExample_Utils_sum3(cself, swifttoscfirst, swifttoscsecond, &cppbindErr)
    
    swifttoscfirst.data.deallocate()
    
    swifttoscsecond.data.deallocate()
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultBuffer = UnsafeBufferPointer<CFloat>(
      start: result.data.assumingMemoryBound(to: CFloat.self),
      count: Int(result.size))
    var sctoswiftresult: [Float] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      
      sctoswiftresult.append(resultValue)
    }
    return sctoswiftresult
  }

  /**
   * An internal property to keep an information about the underlying C++ object type.
   * It is intended to be used by the generated code.
   */
  class var cppbindCxxTypeName : String { return "cppbind::example::Utils" }
}
