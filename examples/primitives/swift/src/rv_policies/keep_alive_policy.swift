/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * A test example for keep_alive policy with shared_ref=False.
 */
public class Child1 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Child1(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Child1(swifttoscname, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Child1_name(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Child1" }
}

/**
 * A test example for keep_alive policy with action=gen_interface.
 */
public protocol Child3 {
  var cself: CppBindCObject { get }

  func keepCppBindReference(_ object: Any)
  var name: String { get }
}

extension Child3 {
  public var name: String {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Child3_name(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

}

public class Child3Impl: Child3 {
  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Child3Impl(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Child3(swifttoscname, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Child3" }
}

/**
 * A test example for keep_alive policy with shared_ref=True.
 */
public class Child2 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Child2(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Child2(swifttoscname, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Child2_name(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Child2" }
}

/**
 * A test example for keep_alive policy. Container holding shared_ref and non shared_ref class and interface types.
 */
public class Parent1 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Parent1(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String, child1: Child1, child2: Child2, child3: Child3) {
    let swifttoscname = strdup(name)!
    let swifttoscchild1 = child1.cself
    let swifttoscchild2 = child2.cself
    let swifttoscchild3 = child3.cself
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Parent1(swifttoscname, swifttoscchild1, swifttoscchild2, swifttoscchild3, &cppbindErr), true)
    self.keepCppBindReference(child1)
    self.keepCppBindReference(child3)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parent1_name(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public var child1: Child1 {
    get {
      var cppbindErr = CppBindCObject()
      let result = _prop_get_CppbindExample_Parent1_child1(cself, &cppbindErr)
      if cppbindErr.type != nil {
        let errorType = String(cString: cppbindErr.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(cppbindErr, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          cppbindErr.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      var sctoswiftresult: Child1
      sctoswiftresult = Child1(result)
      sctoswiftresult.keepCppBindReference(self)
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.cself
      var cppbindErr = CppBindCObject()
      _prop_set_CppbindExample_Parent1_child1(cself, swifttoscvalue, &cppbindErr)
      if cppbindErr.type != nil {
        let errorType = String(cString: cppbindErr.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(cppbindErr, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          cppbindErr.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }
  }

  public var child2: Child2 {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parent1_child2(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Child2
    sctoswiftresult = Child2(result, true)
    return sctoswiftresult
  }

  public var child3: Child3 {
    get {
      let result = _prop_get_CppbindExample_Parent1_child3(cself)
      var sctoswiftresult: Child3
      sctoswiftresult = Child3Impl(result)
      sctoswiftresult.keepCppBindReference(self)
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = value.cself
      _prop_set_CppbindExample_Parent1_child3(cself, swifttoscvalue)
      self.keepCppBindReference(value)
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Parent1" }
}

/**
 * A test example for keep_alive policy. Container holding shared_ref and non shared_ref class and interface types.
 */
public class Parent2 {

  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_Parent2(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_Parent2(swifttoscname, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parent2_name(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

  public var children1: Array<Child1> {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parent2_children1(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultBuffer = UnsafeBufferPointer<CppBindCObject>(
      start: result.data.assumingMemoryBound(to: CppBindCObject.self),
      count: Int(result.size))
    var sctoswiftresult: [Child1] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      var sctoswiftresultValue: Child1
      sctoswiftresultValue = Child1(resultValue)
      sctoswiftresult.append(sctoswiftresultValue)
    }
    for valuesctoswiftresult in sctoswiftresult {
      valuesctoswiftresult.keepCppBindReference(self)
    }
    return sctoswiftresult
  }

  public var children2: Array<Child2> {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_Parent2_children2(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultBuffer = UnsafeBufferPointer<CppBindCObject>(
      start: result.data.assumingMemoryBound(to: CppBindCObject.self),
      count: Int(result.size))
    var sctoswiftresult: [Child2] = []
    defer {
      _resultBuffer.deallocate()
    }
    for i in 0..<Int(result.size) {
      let resultValue = _resultBuffer[i]
      var sctoswiftresultValue: Child2
      sctoswiftresultValue = Child2(resultValue, true)
      sctoswiftresult.append(sctoswiftresultValue)
    }
    return sctoswiftresult
  }

  public func addChild1(c: Child1) -> Void {

    let swifttoscc = c.cself
    var cppbindErr = CppBindCObject()
    _func_CppbindExample_Parent2_addChild1(cself, swifttoscc, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func addChildren1(c: Array<Child1>) -> Void {

    let _swifttosccData = UnsafeMutablePointer<CppBindCObject>.allocate(capacity: c.count)
    var swifttoscc = CppBindCDataArray()
    swifttoscc.data = UnsafeMutableRawPointer(_swifttosccData)
    swifttoscc.size = Int64(c.count)
    for i in 0..<c.count {
      let cVal = c[i]
      let swifttosccVal = cVal.cself
      _swifttosccData[i] = swifttosccVal
    }
    var cppbindErr = CppBindCObject()
    _func_CppbindExample_Parent2_addChildren1(cself, swifttoscc, &cppbindErr)
    self.keepCppBindReference(c)
    
    swifttoscc.data.deallocate()
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func addChild2(c: Child2) -> Void {

    let swifttoscc = c.cself
    var cppbindErr = CppBindCObject()
    _func_CppbindExample_Parent2_addChild2(cself, swifttoscc, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func addChildren2(c: Array<Child2>) -> Void {

    let _swifttosccData = UnsafeMutablePointer<CppBindCObject>.allocate(capacity: c.count)
    var swifttoscc = CppBindCDataArray()
    swifttoscc.data = UnsafeMutableRawPointer(_swifttosccData)
    swifttoscc.size = Int64(c.count)
    for i in 0..<c.count {
      let cVal = c[i]
      let swifttosccVal = cVal.cself
      _swifttosccData[i] = swifttosccVal
    }
    var cppbindErr = CppBindCObject()
    _func_CppbindExample_Parent2_addChildren2(cself, swifttoscc, &cppbindErr)
    
    swifttoscc.data.deallocate()
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  class var cppbindCxxTypeName : String { return "cppbind::example::Parent2" }
}
