/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/23/2022-11:06.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * A test example for return value policies. This is not used in documentation.
 */
public class SwValue {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_SwValue(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var err = IEGenCObject()
    self.init(create_SwValue(swifttoscname, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    get {
      var err = IEGenCObject()
      let result = _prop_get_SwValue_name(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      let sctoswiftresult = String(cString: result)
      defer {
        result.deallocate()
      }
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = strdup(value)!
      var err = IEGenCObject()
      _prop_set_SwValue_name(cself, swifttoscvalue, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }
  }

}

public class ValueSharedRef {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_ValueSharedRef(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(name: String) {
    let swifttoscname = strdup(name)!
    var err = IEGenCObject()
    self.init(create_ValueSharedRef(swifttoscname, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var name: String {
    get {
      var err = IEGenCObject()
      let result = _prop_get_ValueSharedRef_name(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      let sctoswiftresult = String(cString: result)
      defer {
        result.deallocate()
      }
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = strdup(value)!
      var err = IEGenCObject()
      _prop_set_ValueSharedRef_name(cself, swifttoscvalue, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
    }
  }

}

public class ValuesHolder {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_ValuesHolder(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var err = IEGenCObject()
    self.init(create_ValuesHolder(&err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public convenience init(valuePtr: SwValue, valueRef: ValueSharedRef) {
    let swifttoscvaluePtr = valuePtr.cself
    let swifttoscvalueRef = valueRef.cself
    var err = IEGenCObject()
    self.init(create_ValuesHolder_1(swifttoscvaluePtr, swifttoscvalueRef, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func getPtrDefault() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrDefault(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getPtrCopy() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrCopy(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getPtrMove() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrMove(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getPtrReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result)
    return sctoswiftresult
  }

  public func getPtrAutomatic() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrAutomatic(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getPtrAutomaticReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrAutomaticReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result)
    return sctoswiftresult
  }

  public func getPtrTakeOwnership() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getPtrTakeOwnership(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueDefault() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueDefault(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueCopy() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueCopy(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueMove() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueMove(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueAutomatic() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueAutomatic(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueAutomaticReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueAutomaticReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getValueTakeOwnership() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getValueTakeOwnership(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefCopy() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefCopy(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefDefault() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefDefault(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefMove() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefMove(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result)
    return sctoswiftresult
  }

  public func getRefAutomatic() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefAutomatic(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefAutomaticReference() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefAutomaticReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getRefTakeOwnership() -> SwValue {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getRefTakeOwnership(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: SwValue
    sctoswiftresult = SwValue(result, true)
    return sctoswiftresult
  }

  public func getSharedRefDefault() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefDefault(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefCopy() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefCopy(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefMove() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefMove(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefReference() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefAutomatic() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefAutomatic(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefAutomaticReference() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefAutomaticReference(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func getSharedRefTakeOwnership() -> ValueSharedRef {

    var err = IEGenCObject()
    let result = _func_ValuesHolder_getSharedRefTakeOwnership(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: ValueSharedRef
    sctoswiftresult = ValueSharedRef(result, true)
    return sctoswiftresult
  }

  public func clean() -> Void {

    var err = IEGenCObject()
    _func_ValuesHolder_clean(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

}

/**
 * A test example for reference_internal policy.
 */
public class AnotherValueHolder {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [Any]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_AnotherValueHolder(cself, owner)
  }

  public func keepIEGenReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init() {
    var err = IEGenCObject()
    self.init(create_AnotherValueHolder(&err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: SwValue {
    get {
      var err = IEGenCObject()
      let result = _prop_get_AnotherValueHolder_value(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      var sctoswiftresult: SwValue
      sctoswiftresult = SwValue(result)
      sctoswiftresult.keepIEGenReference(self)
      return sctoswiftresult
    }
  }

  public var valueReference: SwValue {
    get {
      var err = IEGenCObject()
      let result = _prop_get_AnotherValueHolder_valueReference(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      var sctoswiftresult: SwValue
      sctoswiftresult = SwValue(result)
      return sctoswiftresult
    }
  }

  public var sharedValue: ValueSharedRef {
    get {
      var err = IEGenCObject()
      let result = _prop_get_AnotherValueHolder_sharedValue(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      var sctoswiftresult: ValueSharedRef
      sctoswiftresult = ValueSharedRef(result, true)
      return sctoswiftresult
    }
  }

  public var sharedValueReference: ValueSharedRef {
    get {
      var err = IEGenCObject()
      let result = _prop_get_AnotherValueHolder_sharedValueReference(cself, &err)
      
      if err.type != nil {
        let errorType = String(cString: err.type!)
        switch errorType {
        case ("std::exception"):
          let excObj = StdException(err, true)
          ExceptionHandler.handleUncaughtException(excObj.what())
        default:
          err.type.deallocate()
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
        }
      }
      var sctoswiftresult: ValueSharedRef
      sctoswiftresult = ValueSharedRef(result, true)
      return sctoswiftresult
    }
  }

}
