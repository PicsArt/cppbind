/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/04/2022-14:10.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Car {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_Car(cself, owner)
  }

  public convenience init(cost: Int) {
    let swifttosccost = CInt(cost)
    var err = IEGenCObject()
    self.init(create_Car(swifttosccost, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * value getter
   */
  public var cost: Int {
    get {
      let result = _prop_get_Car_cost(cself)
      let sctoswiftresult = Int(result)
      return sctoswiftresult
    }
  }

  public func setCostWithCarSharedPtr(sp: Car) -> Void {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    _func_Car_setCostWithCarSharedPtr(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func setCostWithCar(sp: Car) -> Void {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    _func_Car_setCostWithCar(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * comments
   * 
   */
  public func setCostWithCarConstSharedPtr(sp: Car) -> Void {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    _func_Car_setCostWithCarConstSharedPtr(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * comments
   * 
   */
  public func makeConstSharedPtr(sp: Car) -> Car {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    let result = _func_Car_makeConstSharedPtr(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Car
    sctoswiftresult = Car(result, true)
    return sctoswiftresult
  }

  public func setCostWithCarRef(sp: Car) -> Void {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    _func_Car_setCostWithCarRef(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func setCostWithCarPtr(sp: Car) -> Void {

    let swifttoscsp = sp.cself
    var err = IEGenCObject()
    _func_Car_setCostWithCarPtr(cself, swifttoscsp, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func getNewCarSharedPtr() -> Car {

    var err = IEGenCObject()
    let result = _func_Car_getNewCarSharedPtr(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Car
    sctoswiftresult = Car(result, true)
    return sctoswiftresult
  }

}

public class CarUsage {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_CarUsage(cself, owner)
  }

  public convenience init(car: Car) {
    let swifttosccar = car.cself
    var err = IEGenCObject()
    self.init(create_CarUsage(swifttosccar, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  /**
   * Iegen supports only by value return in case shared_ref is set
   */
  public func getCar() -> Car {

    var err = IEGenCObject()
    let result = _func_CarUsage_getCar(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Car
    sctoswiftresult = Car(result, true)
    return sctoswiftresult
  }

}
