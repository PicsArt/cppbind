/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/29/2021-11:56.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class Car  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_Car(cself)
        }
    }
    
    
    public convenience init(cost: Int) {

        let swift_to_sc_cost = CInt(cost)
        self.init(create_Car(swift_to_sc_cost), true)
    }
    /**
     * value getter
     */
    public var cost: Int {
        get {
            let result = _prop_get_Car_cost(cself)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
        
    }
    
    public func setCostWithCarSharedPtr(sp: Car) -> Void {

        let swift_to_sc_sp = sp.cself
        var err = ErrorObj()
        _func_Car_setCostWithCarSharedPtr(cself, swift_to_sc_sp, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public func setCostWithCar(sp: Car) -> Void {

        let swift_to_sc_sp = sp.cself
        var err = ErrorObj()
        _func_Car_setCostWithCar(cself, swift_to_sc_sp, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public func setCostWithCarRef(sp: Car) -> Void {

        let swift_to_sc_sp = sp.cself
        var err = ErrorObj()
        _func_Car_setCostWithCarRef(cself, swift_to_sc_sp, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public func setCostWithCarPtr(sp: Car) -> Void {

        let swift_to_sc_sp = sp.cself
        var err = ErrorObj()
        _func_Car_setCostWithCarPtr(cself, swift_to_sc_sp, &err)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }

    public func getNewCarSharedPtr() -> Car {

        var err = ErrorObj()
        let result = _func_Car_getNewCarSharedPtr(cself, &err)
        let sc_to_swift_result = Car(result, true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }
}

public class CarUsage  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_CarUsage(cself)
        }
    }
    
    
    public convenience init(car: Car) {

        let swift_to_sc_car = car.cself
        self.init(create_CarUsage(swift_to_sc_car), true)
    }
    
    
    public func getCar() -> Car {

        var err = ErrorObj()
        let result = _func_CarUsage_getCar(cself, &err)
        let sc_to_swift_result = Car(result, true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }

    public func getCarPtr() -> Car {

        var err = ErrorObj()
        let result = _func_CarUsage_getCarPtr(cself, &err)
        let sc_to_swift_result = Car(result)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }

    public func getCarRef() -> Car {

        var err = ErrorObj()
        let result = _func_CarUsage_getCarRef(cself, &err)
        let sc_to_swift_result = Car(result)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }
}

public class Plane  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_Plane(cself)
        }
    }
    
    
    public convenience init(seats: Int) {

        let swift_to_sc_seats = CInt(seats)
        self.init(create_Plane(swift_to_sc_seats), true)
    }
    /**
     * value getter
     */
    public var seats: Int {
        get {
            let result = _prop_get_Plane_seats(cself)
            let sc_to_swift_result = Int(result)
            return sc_to_swift_result
        }
        
    }
    
}

public class PlaneUsage  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_PlaneUsage(cself)
        }
    }
    
    
    public convenience init(plane: Plane) {

        let swift_to_sc_plane = plane.cself
        self.init(create_PlaneUsage(swift_to_sc_plane), true)
    }
    
    
    public func getPlane() -> Plane {

        var err = ErrorObj()
        let result = _func_PlaneUsage_getPlane(cself, &err)
        let sc_to_swift_result = Plane(result, true)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }

    public func getPlanePtr() -> Plane {

        var err = ErrorObj()
        let result = _func_PlaneUsage_getPlanePtr(cself, &err)
        let sc_to_swift_result = Plane(result)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }

    public func getPlaneRef() -> Plane {

        var err = ErrorObj()
        let result = _func_PlaneUsage_getPlaneRef(cself, &err)
        let sc_to_swift_result = Plane(result)
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
        return sc_to_swift_result
    }
}