/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 08/12/2021-13:32.
 * Please do not change it manually.
 */

import Foundation
import CWrapper


/**
 * Class Root
 */
public class Root  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_Root(cself)
        }
    }
    
    /**
     * comments
     * 
     */
    public convenience init(_path: String) {

        let swift_to_sc__path = strdup(_path)!
        self.init(create_Root(swift_to_sc__path), true)
    }
    

    public var path: String {
        get {
            let result = _prop_get_Root_path(cself);
            let sc_to_swift_result = String(cString: result)
            defer{
              result.deallocate()
            }
            return sc_to_swift_result
        }
        
        set(value) {
            let swift_to_sc_value = strdup(value)!
            _prop_set_Root_path(cself, swift_to_sc_value)
        }
        
    }
    
    public func setPath(_path: String) -> Void {

        let swift_to_sc__path = strdup(_path)!
        var err = ErrorObj()
        _func_Root_setPath(cself, swift_to_sc__path, &err);
        let err_type = Int(err.err_type)
        if (err_type != 0) {
            switch(err_type) {
                case(1):
                    let exc_obj = StdException(err.err_ptr, true)
                    ExceptionHandler.handleUncaughtException(exc_obj.what())
                default:
                    ExceptionHandler.handleUncaughtException("Uncaught Exception")
            }
        }
    }
}