/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 11/12/2021-18:26.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * Class Root
 */
public class Root {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_Root(cself)
    }
  }

  /**
   * comments
   * 
   */
  public convenience init(path: String) {
    let swiftToScPath = strdup(path)!
    self.init(create_Root(swiftToScPath), true)
  }

  public var path: String {
    get {
      let result = _prop_get_Root_path(cself)
      let scToSwiftResult = String(cString: result)
      defer {
        result.deallocate()
      }
      return scToSwiftResult
    }

    set(value) {
      let swiftToScValue = strdup(value)!
      _prop_set_Root_path(cself, swiftToScValue)
    }
  }

  public func setPath(path: String) -> Void {

    let swiftToScPath = strdup(path)!
    var err = ErrorObj()
    _func_Root_setPath(cself, swiftToScPath, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

}
