/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/30/2022-14:24.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/// comments
public func sumSpan(items: Array<Int>) -> Int {
  let _swifttoscitemsData = UnsafeMutablePointer<CInt>.allocate(capacity: items.count)
  var swifttoscitems = CppBindCDataArray()
  swifttoscitems.data = UnsafeMutableRawPointer(_swifttoscitemsData)
  swifttoscitems.size = Int64(items.count)
  for i in 0..<items.count {
    let itemsVal = items[i]
    let swifttoscitemsVal = CInt(itemsVal)
    _swifttoscitemsData[i] = swifttoscitemsVal
  }
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_sumSpan(swifttoscitems, &cppbindErr)
  
  swifttoscitems.data.deallocate()
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let sctoswiftresult = Int(result)
  return sctoswiftresult
}

/// comments
public func getSpan(items: Array<Int>) -> Array<Int> {
  let _swifttoscitemsData = UnsafeMutablePointer<CInt>.allocate(capacity: items.count)
  var swifttoscitems = CppBindCDataArray()
  swifttoscitems.data = UnsafeMutableRawPointer(_swifttoscitemsData)
  swifttoscitems.size = Int64(items.count)
  for i in 0..<items.count {
    let itemsVal = items[i]
    let swifttoscitemsVal = CInt(itemsVal)
    _swifttoscitemsData[i] = swifttoscitemsVal
  }
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_getSpan(swifttoscitems, &cppbindErr)
  
  swifttoscitems.data.deallocate()
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let _resultBuffer = UnsafeBufferPointer<CInt>(
    start: result.data.assumingMemoryBound(to: CInt.self),
    count: Int(result.size))
  var sctoswiftresult: [Int] = []
  defer {
    _resultBuffer.deallocate()
  }
  for i in 0..<Int(result.size) {
    let resultValue = _resultBuffer[i]
    let sctoswiftresultValue = Int(resultValue)
    sctoswiftresult.append(sctoswiftresultValue)
  }
  return sctoswiftresult
}

/// comments
public func getSpan2(items: Array<Int>) -> Array<Int> {
  let _swifttoscitemsData = UnsafeMutablePointer<CInt>.allocate(capacity: items.count)
  var swifttoscitems = CppBindCDataArray()
  swifttoscitems.data = UnsafeMutableRawPointer(_swifttoscitemsData)
  swifttoscitems.size = Int64(items.count)
  for i in 0..<items.count {
    let itemsVal = items[i]
    let swifttoscitemsVal = CInt(itemsVal)
    _swifttoscitemsData[i] = swifttoscitemsVal
  }
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_getSpan2(swifttoscitems, &cppbindErr)
  
  swifttoscitems.data.deallocate()
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  let _resultBuffer = UnsafeBufferPointer<CInt>(
    start: result.data.assumingMemoryBound(to: CInt.self),
    count: Int(result.size))
  var sctoswiftresult: [Int] = []
  defer {
    _resultBuffer.deallocate()
  }
  for i in 0..<Int(result.size) {
    let resultValue = _resultBuffer[i]
    let sctoswiftresultValue = Int(resultValue)
    sctoswiftresult.append(sctoswiftresultValue)
  }
  return sctoswiftresult
}
