/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/02/2022-11:11.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * Addressable is a base class for all the objects, that have abs path.
 * FIXME: swift.descendants is given manually since we have an issue with descendants list formation for templates (#410)
 */
public protocol AddressableRoot {
  var cself: IEGenCObject { get }

  /**
   * comments
   * @brief Get object's abs path based on parent's abs path and object's name
   * @return the abs path of the object
   */
  func absPath() -> String
}

extension AddressableRoot {
  /**
   * comments
   * @brief Get object's abs path based on parent's abs path and object's name
   * @return the abs path of the object
   */
  public func absPath() -> String {

    var err = IEGenCErrorObj()
    let result = _func_AddressableRoot_absPath(cself, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = String(cString: result)
    defer {
      result.deallocate()
    }
    return sctoswiftresult
  }

}

public class AddressableImplRoot: AddressableRoot {
  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_AddressableImplRoot(cself, owner)
  }

  /**
   * comments
   */
  public convenience init(parent: Root, name: String) {
    let swifttoscparent = parent.cself
    let swifttoscname = strdup(name)!
    var err = IEGenCErrorObj()
    self.init(create_AddressableRoot(swifttoscparent, swifttoscname, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

}
