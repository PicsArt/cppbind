/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/24/2022-14:00.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/// An example interface which descendant types are templates. Used for an example of downcast in target language.
public protocol Container {
  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  var cself: CppBindCObject { get }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  func keepCppBindReference(_ object: Any)
}

extension Container {
}

public class ContainerImpl: Container {
  public let cself: CppBindCObject
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_ContainerImpl(cself, owner)
  }

  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::Container" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> Container {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(MyStackProject.cppbindCxxTypeName):
      obj = MyStackProject(cppbindObj, owner)
    case(MyStackTask.cppbindCxxTypeName):
      obj = MyStackTask(cppbindObj, owner)
    case(MyStackRoot.cppbindCxxTypeName):
      obj = MyStackRoot(cppbindObj, owner)
    case(StackPrj.cppbindCxxTypeName):
      obj = StackPrj(cppbindObj, owner)
    case(StackTask.cppbindCxxTypeName):
      obj = StackTask(cppbindObj, owner)
    case(StackNumInt.cppbindCxxTypeName):
      obj = StackNumInt(cppbindObj, owner)
    case(RootsStack.cppbindCxxTypeName):
      obj = RootsStack(cppbindObj, owner)
    default:
      obj = ContainerImpl(cppbindObj, owner)
    }
    return obj as! Container
  }
}

/// An example of usage for a type which descendants are template types.
/// Used for an example of downcast in target language.
public class ContainerHolder {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_ContainerHolder(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  public convenience init(container: Container) {
    let swifttosccontainer = container.cself
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_ContainerHolder(swifttosccontainer, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var container: Container {
    var cppbindErr = CppBindCObject()
    let result = _prop_get_CppbindExample_ContainerHolder_container(cself, &cppbindErr)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: Container
    sctoswiftresult = ContainerImpl.cppbindConstructObject(result)
    sctoswiftresult.keepCppBindReference(self)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::ContainerHolder" }
}
