/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/17/2022-13:51.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class PairEmployee {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [AnyObject]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_PairEmployee(cself, owner)
  }

  public func keepIEGenReference(_ object: AnyObject) {
    self.refs.append(object)
  }

  public convenience init(first: String, second: Employee) {
    let swifttoscfirst = strdup(first)!
    let swifttoscsecond = second.cself
    var err = IEGenCObject()
    self.init(create_PairEmployee(swifttoscfirst, swifttoscsecond, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var first: String {
    get {
      let result = _prop_get_PairEmployee_first(cself)
      let sctoswiftresult = String(cString: result)
      defer {
        result.deallocate()
      }
      return sctoswiftresult
    }
  }

  public var second: Employee {
    get {
      let result = _prop_get_PairEmployee_second(cself)
      var sctoswiftresult: Employee
      sctoswiftresult = Employee(result, true)
      return sctoswiftresult
    }
  }

}

public class PairStudent {

  public let cself: IEGenCObject
  public let owner: Bool
  private var refs: [AnyObject]

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_PairStudent(cself, owner)
  }

  public func keepIEGenReference(_ object: AnyObject) {
    self.refs.append(object)
  }

  public convenience init(first: String, second: Student) {
    let swifttoscfirst = strdup(first)!
    let swifttoscsecond = second.cself
    var err = IEGenCObject()
    self.init(create_PairStudent(swifttoscfirst, swifttoscsecond, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var first: String {
    get {
      let result = _prop_get_PairStudent_first(cself)
      let sctoswiftresult = String(cString: result)
      defer {
        result.deallocate()
      }
      return sctoswiftresult
    }
  }

  public var second: Student {
    get {
      let result = _prop_get_PairStudent_second(cself)
      var sctoswiftresult: Student
      sctoswiftresult = Student(result, true)
      return sctoswiftresult
    }
  }

}
