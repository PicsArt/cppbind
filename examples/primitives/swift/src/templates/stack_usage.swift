/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 11/09/2021-13:53.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class StackUsage {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_StackUsage(cself)
    }
  }

  public convenience init() {
    self.init(create_StackUsage(), true)
  }

  public func firstItemOfSpecializedStack(p: StackPrj) -> Project {

    let swift_to_sc_p = p.cself
    var err = ErrorObj()
    let result = _func_StackUsage_firstItemOfSpecializedStack(cself, swift_to_sc_p, &err)
    let sc_to_swift_result = Project(result)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return sc_to_swift_result
  }

  public func firstItemOfTemplateStack(arg0: StackPrj) -> Project {

    let swift_to_sc_arg0 = arg0.cself
    var err = ErrorObj()
    let result = _func_StackUsage_firstItemOfTemplateStackProject(cself, swift_to_sc_arg0, &err)
    let sc_to_swift_result = Project(result)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    return sc_to_swift_result
  }

}
