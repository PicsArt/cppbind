/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/06/2021-09:36.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class TemplateMethods {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_TemplateMethods(cself)
    }
  }

  public convenience init() {
    var err = ErrorObj()
    self.init(create_TemplateMethods(&err), true)
    let err_type = Int(err.err_type)
    if (err_type != 0) {
      switch(err_type) {
        case(1):
          let exc_obj = StdException(err.err_ptr, true)
          ExceptionHandler.handleUncaughtException(exc_obj.what())
        default:
          ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func max(arg0: Int, arg1: Int) -> Int {

    let swiftToScArg0 = CInt(arg0)
    let swiftToScArg1 = CInt(arg1)
    var err = ErrorObj()
    let result = _func_TemplateMethods_maxInt(cself, swiftToScArg0, swiftToScArg1, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = Int(result)
    return scToSwiftResult
  }

  public func max(arg0: String, arg1: String) -> String {

    let swiftToScArg0 = strdup(arg0)!
    let swiftToScArg1 = strdup(arg1)!
    var err = ErrorObj()
    let result = _func_TemplateMethods_maxString(cself, swiftToScArg0, swiftToScArg1, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let scToSwiftResult = String(cString: result)
    defer {
      result.deallocate()
    }
    return scToSwiftResult
  }

  public func makePair(arg0: Project, arg1: Project) -> (Project, Project) {

    let swiftToScArg0 = arg0.cself
    let swiftToScArg1 = arg1.cself
    var err = ErrorObj()
    let result = _func_TemplateMethods_makePairProjectProject(cself, swiftToScArg0, swiftToScArg1, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<UnsafeMutableRawPointer>(
      start: result.first.assumingMemoryBound(to: UnsafeMutableRawPointer.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<UnsafeMutableRawPointer>(
      start: result.second.assumingMemoryBound(to: UnsafeMutableRawPointer.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let scToSwiftResultfirst = Project(resultFirst)
    let scToSwiftResultsecond = Project(resultSecond)
    let scToSwiftResult: (Project, Project) = (scToSwiftResultfirst, scToSwiftResultsecond)
    return scToSwiftResult
  }

  public func makePair(arg0: Root, arg1: Project) -> (Root, Project) {

    let swiftToScArg0 = arg0.cself
    let swiftToScArg1 = arg1.cself
    var err = ErrorObj()
    let result = _func_TemplateMethods_makePairRootProject(cself, swiftToScArg0, swiftToScArg1, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let _resultFirstData = UnsafeBufferPointer<UnsafeMutableRawPointer>(
      start: result.first.assumingMemoryBound(to: UnsafeMutableRawPointer.self),
      count: 1)
    let _resultSecondData = UnsafeBufferPointer<UnsafeMutableRawPointer>(
      start: result.second.assumingMemoryBound(to: UnsafeMutableRawPointer.self),
      count: 1)
    defer {
      _resultFirstData.deallocate()
      _resultSecondData.deallocate()
    }
    let resultFirst = _resultFirstData[0]
    let resultSecond = _resultSecondData[0]
    let scToSwiftResultfirst = Root(resultFirst)
    let scToSwiftResultsecond = Project(resultSecond)
    let scToSwiftResult: (Root, Project) = (scToSwiftResultfirst, scToSwiftResultsecond)
    return scToSwiftResult
  }

}
