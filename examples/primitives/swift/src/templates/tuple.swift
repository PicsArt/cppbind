/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class TupleEmpty {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleEmpty(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleEmpty) {
    fatalError("A dummy internal initializer should not be called.")
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleEmpty {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleEmpty(cppbindObj, owner)
    }
    return obj as! TupleEmpty
  }
}

public class TupleThreeInt {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleThreeInt(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleThreeInt) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Int, ts1: Int, ts2: Int) {
    let swifttosct = CInt(t)
    let swifttoscts1 = CInt(ts1)
    let swifttoscts2 = CInt(ts2)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleThreeInt(swifttosct, swifttoscts1, swifttoscts2, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Int {
    let result = _prop_get_CppbindExample_TupleThreeInt_tail(cself)
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public var rest: TupleTwoInt {
    let result = _prop_get_CppbindExample_TupleThreeInt_rest(cself)
    var sctoswiftresult: TupleTwoInt
    sctoswiftresult = TupleTwoInt.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<int, int, int>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleThreeInt {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleThreeInt(cppbindObj, owner)
    }
    return obj as! TupleThreeInt
  }
}

public class TupleTwoInt {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleTwoInt(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleTwoInt) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Int, ts1: Int) {
    let swifttosct = CInt(t)
    let swifttoscts1 = CInt(ts1)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleTwoInt(swifttosct, swifttoscts1, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Int {
    let result = _prop_get_CppbindExample_TupleTwoInt_tail(cself)
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public var rest: TupleInt {
    let result = _prop_get_CppbindExample_TupleTwoInt_rest(cself)
    var sctoswiftresult: TupleInt
    sctoswiftresult = TupleInt.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<int, int>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleTwoInt {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleTwoInt(cppbindObj, owner)
    }
    return obj as! TupleTwoInt
  }
}

public class TupleInt {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleInt(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleInt) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Int) {
    let swifttosct = CInt(t)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleInt(swifttosct, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Int {
    let result = _prop_get_CppbindExample_TupleInt_tail(cself)
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public var rest: TupleEmpty {
    let result = _prop_get_CppbindExample_TupleInt_rest(cself)
    var sctoswiftresult: TupleEmpty
    sctoswiftresult = TupleEmpty.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<int>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleInt {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleInt(cppbindObj, owner)
    }
    return obj as! TupleInt
  }
}

public class TupleDouble {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleDouble(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleDouble) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Double) {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleDouble(t, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Double {
    let result = _prop_get_CppbindExample_TupleDouble_tail(cself)
    return result
  }

  public var rest: TupleEmpty {
    let result = _prop_get_CppbindExample_TupleDouble_rest(cself)
    var sctoswiftresult: TupleEmpty
    sctoswiftresult = TupleEmpty.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<double>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleDouble {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleDouble(cppbindObj, owner)
    }
    return obj as! TupleDouble
  }
}

public class TupleDoubles {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleDoubles(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleDoubles) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Double, ts1: Double) {
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleDoubles(t, ts1, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Double {
    let result = _prop_get_CppbindExample_TupleDoubles_tail(cself)
    return result
  }

  public var rest: TupleDouble {
    let result = _prop_get_CppbindExample_TupleDoubles_rest(cself)
    var sctoswiftresult: TupleDouble
    sctoswiftresult = TupleDouble.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<double, double>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleDoubles {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleDoubles(cppbindObj, owner)
    }
    return obj as! TupleDoubles
  }
}

public class TupleDoubleInt {

  /// An internal property to keep a reference to the original C++ object.
  /// It is intended to be used by the generated code.
  public let cself: CppBindCObject

  /// An internal property to keep track whether Swift is responsible for deallocating the underlying C++ object or not.
  /// It is intended to be used by the generated code.
  public let owner: Bool
  private var refs: [Any]

  /// internal main initializer
  internal required init(_ _cself: CppBindCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
    self.refs = []
  }

  deinit {
    release_CppbindExample_TupleDoubleInt(cself, owner)
  }

  /// An internal method to bind the lifetimes of the current and another object.
  /// It is intended to be used by the generated code.
  public func keepCppBindReference(_ object: Any) {
    self.refs.append(object)
  }

  /// internal dummy initializer to prevent automatic initializer inheritance
  internal init(_cself: CppBindCObject, _self: TupleDoubleInt) {
    fatalError("A dummy internal initializer should not be called.")
  }

  public convenience init(t: Int, ts1: Double) {
    let swifttosct = CInt(t)
    var cppbindErr = CppBindCObject()
    self.init(create_CppbindExample_TupleDoubleInt(swifttosct, ts1, &cppbindErr), true)
    if cppbindErr.type != nil {
      let errorType = String(cString: cppbindErr.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(cppbindErr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        cppbindErr.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var tail: Int {
    let result = _prop_get_CppbindExample_TupleDoubleInt_tail(cself)
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public var rest: TupleDouble {
    let result = _prop_get_CppbindExample_TupleDoubleInt_rest(cself)
    var sctoswiftresult: TupleDouble
    sctoswiftresult = TupleDouble.cppbindConstructObject(result, true)
    return sctoswiftresult
  }

  /// An internal property to keep an information about the underlying C++ object type.
  /// It is intended to be used by the generated code.
  class var cppbindCxxTypeName : String { return "cppbind::example::tuple<int, double>" }

  /// An internal method to create a Swift object from a C++ object.
  /// It is intended to be used by the generated code.
  class func cppbindConstructObject(_ cppbindObj: CppBindCObject, _ owner: Bool = false) -> TupleDoubleInt {
    let typeName = String(cString: cppbindObj.type)
    var obj : Any
    switch(typeName) {
    case(IntsTuple.cppbindCxxTypeName):
      obj = IntsTuple(cppbindObj, owner)
    case(MyTupleDouble.cppbindCxxTypeName):
      obj = MyTupleDouble(cppbindObj, owner)
    case(MyTupleInt.cppbindCxxTypeName):
      obj = MyTupleInt(cppbindObj, owner)
    default:
      obj = TupleDoubleInt(cppbindObj, owner)
    }
    return obj as! TupleDoubleInt
  }
}

/// An example with variadic template.
public func createTuple(args1: Int, args2: Int) -> TupleTwoInt {
  let swifttoscargs1 = CInt(args1)
  let swifttoscargs2 = CInt(args2)
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_createTupleIntInt(swifttoscargs1, swifttoscargs2, &cppbindErr)
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  var sctoswiftresult: TupleTwoInt
  sctoswiftresult = TupleTwoInt.cppbindConstructObject(result, true)
  return sctoswiftresult
}

/// An example with variadic template.
public func createTuple(args1: Int, args2: Double) -> TupleDoubleInt {
  let swifttoscargs1 = CInt(args1)
  var cppbindErr = CppBindCObject()
  let result = _func_CppbindExample_createTupleIntDouble(swifttoscargs1, args2, &cppbindErr)
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    case ("std::exception"):
      let excObj = StdException(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  var sctoswiftresult: TupleDoubleInt
  sctoswiftresult = TupleDoubleInt.cppbindConstructObject(result, true)
  return sctoswiftresult
}
