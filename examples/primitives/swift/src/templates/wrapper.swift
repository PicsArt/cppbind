/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 09/06/2021-06:32.
 * Please do not change it manually.
 */

import Foundation
import CWrapper


/**
 * comments
 * 
 */
public class WrapperPairStringString  {
    
    public let cself : UnsafeMutableRawPointer
    public let owner : Bool

    // internal main initializer
    internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
        self.cself = _cself
        self.owner = _owner
    }
    deinit {
        if owner {
            release_WrapperPairStringString(cself)
        }
    }
    
    
    public convenience init(value: (String, String)) {

        let _first_swift_to_sc_value = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
        let _second_swift_to_sc_value = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
        defer {
          _first_swift_to_sc_value.deallocate()
          _second_swift_to_sc_value.deallocate()
        }
        var swift_to_sc_value = CDataPair()
        swift_to_sc_value.first = UnsafeMutableRawPointer(_first_swift_to_sc_value)
        swift_to_sc_value.second = UnsafeMutableRawPointer(_second_swift_to_sc_value)
        let first_value = value.0
        let second_value = value.1
        let swift_to_sc_first_value = strdup(first_value)!
        let swift_to_sc_second_value = strdup(second_value)!
        _first_swift_to_sc_value[0] = swift_to_sc_first_value
        _second_swift_to_sc_value[0] = swift_to_sc_second_value
        self.init(create_WrapperPairStringString(swift_to_sc_value), true)
    }
    

    public var value: (String, String) {
        get {
            let result = _prop_get_WrapperPairStringString_value(cself);
            let _tmp_pair_first_result_data = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(start: result.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self), count: 1)
            let _tmp_pair_second_result_data = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(start: result.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self), count: 1)
            defer {
              _tmp_pair_first_result_data.deallocate()
              _tmp_pair_second_result_data.deallocate()
            }
            let first_result = _tmp_pair_first_result_data[0];
            let second_result = _tmp_pair_second_result_data[0];
            let sc_to_swift_first_result = String(cString: first_result)
            defer{
              first_result.deallocate()
            }
            let sc_to_swift_second_result = String(cString: second_result)
            defer{
              second_result.deallocate()
            }
            let sc_to_swift_result: (String, String) = ( sc_to_swift_first_result, sc_to_swift_second_result )
            return sc_to_swift_result
        }
        
        
        set(value) {
            let _first_swift_to_sc_value = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
            let _second_swift_to_sc_value = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
            defer {
              _first_swift_to_sc_value.deallocate()
              _second_swift_to_sc_value.deallocate()
            }
            var swift_to_sc_value = CDataPair()
            swift_to_sc_value.first = UnsafeMutableRawPointer(_first_swift_to_sc_value)
            swift_to_sc_value.second = UnsafeMutableRawPointer(_second_swift_to_sc_value)
            let first_value = value.0
            let second_value = value.1
            let swift_to_sc_first_value = strdup(first_value)!
            let swift_to_sc_second_value = strdup(second_value)!
            _first_swift_to_sc_value[0] = swift_to_sc_first_value
            _second_swift_to_sc_value[0] = swift_to_sc_second_value
            _prop_set_WrapperPairStringString_setValue(cself, swift_to_sc_value)
        }
        
    }
    
}