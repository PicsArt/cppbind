/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-19:53.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class WrapperPairStrings {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperPairStrings(cself)
    }
  }

  public convenience init(value: (String, String)) {
    let _swiftToScValueFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swiftToScValueSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swiftToScValueFirst.deallocate()
      _swiftToScValueSecond.deallocate()
    }
    var swiftToScValue = CDataPair()
    swiftToScValue.first = UnsafeMutableRawPointer(_swiftToScValueFirst)
    swiftToScValue.second = UnsafeMutableRawPointer(_swiftToScValueSecond)
    let valueFirst = value.0
    let valueSecond = value.1
    let swiftToScValuefirst = strdup(valueFirst)!
    let swiftToScValuesecond = strdup(valueSecond)!
    _swiftToScValueFirst[0] = swiftToScValuefirst
    _swiftToScValueSecond[0] = swiftToScValuesecond
    self.init(create_WrapperPairStrings(swiftToScValue), true)
  }

  public var value: (String, String) {
    get {
      let result = _prop_get_WrapperPairStrings_value(cself)
      let _resultFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
        start: result.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
        count: 1)
      let _resultSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
        start: result.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
        count: 1)
      defer {
        _resultFirstData.deallocate()
        _resultSecondData.deallocate()
      }
      let resultFirst = _resultFirstData[0]
      let resultSecond = _resultSecondData[0]
      let scToSwiftResultfirst = String(cString: resultFirst)
      defer {
        resultFirst.deallocate()
      }
      let scToSwiftResultsecond = String(cString: resultSecond)
      defer {
        resultSecond.deallocate()
      }
      let scToSwiftResult: (String, String) = (scToSwiftResultfirst, scToSwiftResultsecond)
      return scToSwiftResult
    }

    set(value) {
      let _swiftToScValueFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
      let _swiftToScValueSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
      defer {
        _swiftToScValueFirst.deallocate()
        _swiftToScValueSecond.deallocate()
      }
      var swiftToScValue = CDataPair()
      swiftToScValue.first = UnsafeMutableRawPointer(_swiftToScValueFirst)
      swiftToScValue.second = UnsafeMutableRawPointer(_swiftToScValueSecond)
      let valueFirst = value.0
      let valueSecond = value.1
      let swiftToScValuefirst = strdup(valueFirst)!
      let swiftToScValuesecond = strdup(valueSecond)!
      _swiftToScValueFirst[0] = swiftToScValuefirst
      _swiftToScValueSecond[0] = swiftToScValuesecond
      _prop_set_WrapperPairStrings_value(cself, swiftToScValue)
    }
  }

}

/**
 * comments
 * 
 */
public class WrapperPairIntInt {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperPairIntInt(cself)
    }
  }

  public convenience init(value: (Int, Int)) {
    let _swiftToScValueFirst = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swiftToScValueSecond = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swiftToScValueFirst.deallocate()
      _swiftToScValueSecond.deallocate()
    }
    var swiftToScValue = CDataPair()
    swiftToScValue.first = UnsafeMutableRawPointer(_swiftToScValueFirst)
    swiftToScValue.second = UnsafeMutableRawPointer(_swiftToScValueSecond)
    let valueFirst = value.0
    let valueSecond = value.1
    let swiftToScValuefirst = CInt(valueFirst)
    let swiftToScValuesecond = CInt(valueSecond)
    _swiftToScValueFirst[0] = swiftToScValuefirst
    _swiftToScValueSecond[0] = swiftToScValuesecond
    self.init(create_WrapperPairIntInt(swiftToScValue), true)
  }

  public var value: (Int, Int) {
    get {
      let result = _prop_get_WrapperPairIntInt_value(cself)
      let _resultFirstData = UnsafeBufferPointer<CInt>(
        start: result.first.assumingMemoryBound(to: CInt.self),
        count: 1)
      let _resultSecondData = UnsafeBufferPointer<CInt>(
        start: result.second.assumingMemoryBound(to: CInt.self),
        count: 1)
      defer {
        _resultFirstData.deallocate()
        _resultSecondData.deallocate()
      }
      let resultFirst = _resultFirstData[0]
      let resultSecond = _resultSecondData[0]
      let scToSwiftResultfirst = Int(resultFirst)
      let scToSwiftResultsecond = Int(resultSecond)
      let scToSwiftResult: (Int, Int) = (scToSwiftResultfirst, scToSwiftResultsecond)
      return scToSwiftResult
    }

    set(value) {
      let _swiftToScValueFirst = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
      let _swiftToScValueSecond = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
      defer {
        _swiftToScValueFirst.deallocate()
        _swiftToScValueSecond.deallocate()
      }
      var swiftToScValue = CDataPair()
      swiftToScValue.first = UnsafeMutableRawPointer(_swiftToScValueFirst)
      swiftToScValue.second = UnsafeMutableRawPointer(_swiftToScValueSecond)
      let valueFirst = value.0
      let valueSecond = value.1
      let swiftToScValuefirst = CInt(valueFirst)
      let swiftToScValuesecond = CInt(valueSecond)
      _swiftToScValueFirst[0] = swiftToScValuefirst
      _swiftToScValueSecond[0] = swiftToScValuesecond
      _prop_set_WrapperPairIntInt_value(cself, swiftToScValue)
    }
  }

}

/**
 * comments
 * 
 */
public class WrapperString {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperString(cself)
    }
  }

  public convenience init(value: String) {
    let swiftToScValue = strdup(value)!
    self.init(create_WrapperString(swiftToScValue), true)
  }

  public var value: String {
    get {
      let result = _prop_get_WrapperString_value(cself)
      let scToSwiftResult = String(cString: result)
      defer {
        result.deallocate()
      }
      return scToSwiftResult
    }

    set(value) {
      let swiftToScValue = strdup(value)!
      _prop_set_WrapperString_value(cself, swiftToScValue)
    }
  }

}
