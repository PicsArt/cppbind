/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/08/2021-09:10.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

/**
 * comments
 * 
 */
public class WrapperPairStrings {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperPairStrings(cself)
    }
  }

  public convenience init(value: (String, String)) {
    let _swifttoscvalueFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    let _swifttoscvalueSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
    defer {
      _swifttoscvalueFirst.deallocate()
      _swifttoscvalueSecond.deallocate()
    }
    var swifttoscvalue = CDataPair()
    swifttoscvalue.first = UnsafeMutableRawPointer(_swifttoscvalueFirst)
    swifttoscvalue.second = UnsafeMutableRawPointer(_swifttoscvalueSecond)
    let valueFirst = value.0
    let valueSecond = value.1
    let swifttoscvalueFirst = strdup(valueFirst)!
    let swifttoscvalueSecond = strdup(valueSecond)!
    _swifttoscvalueFirst[0] = swifttoscvalueFirst
    _swifttoscvalueSecond[0] = swifttoscvalueSecond
    var err = ErrorObj()
    self.init(create_WrapperPairStrings(swifttoscvalue, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: (String, String) {
    get {
      let result = _prop_get_WrapperPairStrings_value(cself)
      let _resultFirstData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
        start: result.first.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
        count: 1)
      let _resultSecondData = UnsafeBufferPointer<UnsafeMutablePointer<CChar>>(
        start: result.second.assumingMemoryBound(to: UnsafeMutablePointer<CChar>.self),
        count: 1)
      defer {
        _resultFirstData.deallocate()
        _resultSecondData.deallocate()
      }
      let resultFirst = _resultFirstData[0]
      let resultSecond = _resultSecondData[0]
      let sctoswiftresultFirst = String(cString: resultFirst)
      defer {
        resultFirst.deallocate()
      }
      let sctoswiftresultSecond = String(cString: resultSecond)
      defer {
        resultSecond.deallocate()
      }
      let sctoswiftresult: (String, String) = (sctoswiftresultFirst, sctoswiftresultSecond)
      return sctoswiftresult
    }

    set(value) {
      let _swifttoscvalueFirst = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
      let _swifttoscvalueSecond = UnsafeMutablePointer<UnsafeMutablePointer<CChar>>.allocate(capacity: 1)
      defer {
        _swifttoscvalueFirst.deallocate()
        _swifttoscvalueSecond.deallocate()
      }
      var swifttoscvalue = CDataPair()
      swifttoscvalue.first = UnsafeMutableRawPointer(_swifttoscvalueFirst)
      swifttoscvalue.second = UnsafeMutableRawPointer(_swifttoscvalueSecond)
      let valueFirst = value.0
      let valueSecond = value.1
      let swifttoscvalueFirst = strdup(valueFirst)!
      let swifttoscvalueSecond = strdup(valueSecond)!
      _swifttoscvalueFirst[0] = swifttoscvalueFirst
      _swifttoscvalueSecond[0] = swifttoscvalueSecond
      _prop_set_WrapperPairStrings_value(cself, swifttoscvalue)
    }
  }

}

/**
 * comments
 * 
 */
public class WrapperPairIntInt {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperPairIntInt(cself)
    }
  }

  public convenience init(value: (Int, Int)) {
    let _swifttoscvalueFirst = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    let _swifttoscvalueSecond = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
    defer {
      _swifttoscvalueFirst.deallocate()
      _swifttoscvalueSecond.deallocate()
    }
    var swifttoscvalue = CDataPair()
    swifttoscvalue.first = UnsafeMutableRawPointer(_swifttoscvalueFirst)
    swifttoscvalue.second = UnsafeMutableRawPointer(_swifttoscvalueSecond)
    let valueFirst = value.0
    let valueSecond = value.1
    let swifttoscvalueFirst = CInt(valueFirst)
    let swifttoscvalueSecond = CInt(valueSecond)
    _swifttoscvalueFirst[0] = swifttoscvalueFirst
    _swifttoscvalueSecond[0] = swifttoscvalueSecond
    var err = ErrorObj()
    self.init(create_WrapperPairIntInt(swifttoscvalue, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: (Int, Int) {
    get {
      let result = _prop_get_WrapperPairIntInt_value(cself)
      let _resultFirstData = UnsafeBufferPointer<CInt>(
        start: result.first.assumingMemoryBound(to: CInt.self),
        count: 1)
      let _resultSecondData = UnsafeBufferPointer<CInt>(
        start: result.second.assumingMemoryBound(to: CInt.self),
        count: 1)
      defer {
        _resultFirstData.deallocate()
        _resultSecondData.deallocate()
      }
      let resultFirst = _resultFirstData[0]
      let resultSecond = _resultSecondData[0]
      let sctoswiftresultFirst = Int(resultFirst)
      let sctoswiftresultSecond = Int(resultSecond)
      let sctoswiftresult: (Int, Int) = (sctoswiftresultFirst, sctoswiftresultSecond)
      return sctoswiftresult
    }

    set(value) {
      let _swifttoscvalueFirst = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
      let _swifttoscvalueSecond = UnsafeMutablePointer<CInt>.allocate(capacity: 1)
      defer {
        _swifttoscvalueFirst.deallocate()
        _swifttoscvalueSecond.deallocate()
      }
      var swifttoscvalue = CDataPair()
      swifttoscvalue.first = UnsafeMutableRawPointer(_swifttoscvalueFirst)
      swifttoscvalue.second = UnsafeMutableRawPointer(_swifttoscvalueSecond)
      let valueFirst = value.0
      let valueSecond = value.1
      let swifttoscvalueFirst = CInt(valueFirst)
      let swifttoscvalueSecond = CInt(valueSecond)
      _swifttoscvalueFirst[0] = swifttoscvalueFirst
      _swifttoscvalueSecond[0] = swifttoscvalueSecond
      _prop_set_WrapperPairIntInt_value(cself, swifttoscvalue)
    }
  }

}

/**
 * comments
 * 
 */
public class WrapperString {

  public let cself: UnsafeMutableRawPointer
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: UnsafeMutableRawPointer, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    if owner {
      release_WrapperString(cself)
    }
  }

  public convenience init(value: String) {
    let swifttoscvalue = strdup(value)!
    var err = ErrorObj()
    self.init(create_WrapperString(swifttoscvalue, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(err.err_ptr, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var value: String {
    get {
      let result = _prop_get_WrapperString_value(cself)
      let sctoswiftresult = String(cString: result)
      defer {
        result.deallocate()
      }
      return sctoswiftresult
    }

    set(value) {
      let swifttoscvalue = strdup(value)!
      _prop_set_WrapperString_value(cself, swifttoscvalue)
    }
  }

}
