/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/25/2022-14:17.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class QueueInt {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_QueueInt(cself, owner)
  }

  public convenience init() {
    var err = IEGenCObject()
    self.init(create_QueueInt(&err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func push_back(element: Int) -> Void {

    let swifttoscelement = CInt(element)
    var err = IEGenCObject()
    _func_QueueInt_push_back(cself, swifttoscelement, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func get_size() -> Int {

    var err = IEGenCObject()
    let result = _func_QueueInt_get_size(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

}

public class QueueIntUsage {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_QueueIntUsage(cself, owner)
  }

  public convenience init(q: QueueInt) {
    let swifttoscq = q.cself
    var err = IEGenCObject()
    self.init(create_QueueIntUsage(swifttoscq, &err), true)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var empty_queue: QueueInt {
    let result = _prop_get_QueueIntUsage_empty_queue(cself)
    var sctoswiftresult: QueueInt
    sctoswiftresult = QueueInt(result, true)
    return sctoswiftresult
  }

  public var saved_queue: QueueInt {
    let result = _prop_get_QueueIntUsage_saved_queue(cself)
    var sctoswiftresult: QueueInt
    sctoswiftresult = QueueInt(result)
    return sctoswiftresult
  }

  public static func getSize(q: QueueInt) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCObject()
    let result = _func_QueueIntUsage_getSize(swifttoscq, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getLastElement(q: QueueInt) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCObject()
    let result = _func_QueueIntUsage_getLastElement(swifttoscq, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getFirstElement(q: QueueInt) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCObject()
    let result = _func_QueueIntUsage_getFirstElement(swifttoscq, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getInvQueue(v: Array<Int>) -> QueueInt {

    let _swifttoscvData = UnsafeMutablePointer<CInt>.allocate(capacity: v.count)
    var swifttoscv = IEGenCDataArray()
    swifttoscv.data = UnsafeMutableRawPointer(_swifttoscvData)
    swifttoscv.size = Int64(v.count)
    for i in 0..<v.count {
      let vVal = v[i]
      let swifttoscvVal = CInt(vVal)
      _swifttoscvData[i] = swifttoscvVal
    }
    var err = IEGenCObject()
    let result = _func_QueueIntUsage_getInvQueue(swifttoscv, &err)
    
    swifttoscv.data.deallocate()
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: QueueInt
    sctoswiftresult = QueueInt(result, true)
    return sctoswiftresult
  }

  public func getSavedQueue() -> QueueInt {

    var err = IEGenCObject()
    let result = _func_QueueIntUsage_getSavedQueue(cself, &err)
    if err.type != nil {
      let errorType = String(cString: err.type!)
      switch errorType {
      case ("std::exception"):
        let excObj = StdException(err, true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        err.type.deallocate()
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: QueueInt
    sctoswiftresult = QueueInt(result)
    return sctoswiftresult
  }

}
