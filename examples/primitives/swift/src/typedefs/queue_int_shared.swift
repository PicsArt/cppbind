/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/03/2022-08:11.
 * Please do not change it manually.
 */

import CWrapper
import Foundation

public class QueueIntShared {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_QueueIntShared(cself, owner)
  }

  public convenience init() {
    var err = IEGenCErrorObj()
    self.init(create_QueueIntShared(&err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func push_back(element: Int) -> Void {

    let swifttoscelement = CInt(element)
    var err = IEGenCErrorObj()
    _func_QueueIntShared_push_back(cself, swifttoscelement, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public func get_size() -> Int {

    var err = IEGenCErrorObj()
    let result = _func_QueueIntShared_get_size(cself, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

}

public class QueueIntSharedUsage {

  public let cself: IEGenCObject
  public let owner: Bool

  // internal main initializer
  internal required init(_ _cself: IEGenCObject, _ _owner: Bool = false) {
    self.cself = _cself
    self.owner = _owner
  }

  deinit {
    release_QueueIntSharedUsage(cself, owner)
  }

  public convenience init(q: QueueIntShared) {
    let swifttoscq = q.cself
    var err = IEGenCErrorObj()
    self.init(create_QueueIntSharedUsage(swifttoscq, &err), true)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
  }

  public var saved_queue: QueueIntShared {
    get {
      let result = _prop_get_QueueIntSharedUsage_saved_queue(cself)
      var sctoswiftresult: QueueIntShared
      sctoswiftresult = QueueIntShared(result, true)
      return sctoswiftresult
    }
  }

  public static func getSize(q: QueueIntShared) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCErrorObj()
    let result = _func_QueueIntSharedUsage_getSize(swifttoscq, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getLastElement(q: QueueIntShared) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCErrorObj()
    let result = _func_QueueIntSharedUsage_getLastElement(swifttoscq, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getFirstElement(q: QueueIntShared) -> Int {

    let swifttoscq = q.cself
    var err = IEGenCErrorObj()
    let result = _func_QueueIntSharedUsage_getFirstElement(swifttoscq, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    let sctoswiftresult = Int(result)
    return sctoswiftresult
  }

  public static func getInvQueue(v: Array<Int>) -> QueueIntShared {

    let _swifttoscvData = UnsafeMutablePointer<CInt>.allocate(capacity: v.count)
    var swifttoscv = IEGenCDataArray()
    swifttoscv.data = UnsafeMutableRawPointer(_swifttoscvData)
    swifttoscv.size = Int64(v.count)
    for i in 0..<v.count {
      let vVal = v[i]
      let swifttoscvVal = CInt(vVal)
      _swifttoscvData[i] = swifttoscvVal
    }
    var err = IEGenCErrorObj()
    let result = _func_QueueIntSharedUsage_getInvQueue(swifttoscv, &err)
    
    swifttoscv.data.deallocate()
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: QueueIntShared
    sctoswiftresult = QueueIntShared(result, true)
    return sctoswiftresult
  }

  public func getSavedQueue() -> QueueIntShared {

    var err = IEGenCErrorObj()
    let result = _func_QueueIntSharedUsage_getSavedQueue(cself, &err)
    let errorType = Int(err.err_type)
    if errorType != 0 {
      switch errorType {
      case (1):
        let excObj = StdException(IEGenCObject(type: strdup("std::exception"), ptr: err.err_ptr), true)
        ExceptionHandler.handleUncaughtException(excObj.what())
      default:
        ExceptionHandler.handleUncaughtException("Uncaught Exception")
      }
    }
    var sctoswiftresult: QueueIntShared
    sctoswiftresult = QueueIntShared(result, true)
    return sctoswiftresult
  }

}
