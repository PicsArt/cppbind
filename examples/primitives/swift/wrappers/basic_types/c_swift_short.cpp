/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/13/2022-14:16.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/basic_types/c_swift_short.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/basic_types/short.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

short _func_CppbindExample_add(short a, short b, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    
    try {
        decltype(auto) result = cppbind::example::add(a, b);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    short result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_add1(CppBindCDataArray v, short a, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<short> ctocxxv;

    auto data_v = reinterpret_cast<short*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
    
    try {
        decltype(auto) result = cppbind::example::add(ctocxxv, a);
        auto _data_cxxtocresult = new short [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataPair _func_CppbindExample_add2(CppBindCDataPair p1, CppBindCDataPair p2, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto& first_tmp_p1 = *reinterpret_cast<short*>(p1.first);
    auto& second_tmp_p1 = *reinterpret_cast<short*>(p1.second);


    std::pair<short, short> ctocxxp1 { first_tmp_p1, second_tmp_p1 };
    auto& first_tmp_p2 = *reinterpret_cast<short*>(p2.first);
    auto& second_tmp_p2 = *reinterpret_cast<short*>(p2.second);


    std::pair<short, short> ctocxxp2 { first_tmp_p2, second_tmp_p2 };
    try {
        decltype(auto) result = cppbind::example::add(ctocxxp1, ctocxxp2);
        auto _first_data_cxxtocresult = new short;
        auto _second_data_cxxtocresult = new short;
        const auto& first_result = result.first;
        const auto& second_result = result.second;


        *_first_data_cxxtocresult = first_result;
        *_second_data_cxxtocresult = second_result;
        CppBindCDataPair cxxtocresult = { _first_data_cxxtocresult, _second_data_cxxtocresult };
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataPair result {};
    return result;
}

