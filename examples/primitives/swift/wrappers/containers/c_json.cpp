/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/04/2022-08:36.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/containers/c_json.h"
#include "cxx/containers/json.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_JSONEXAMPLES = "iegen::example::JsonExamples";

using namespace iegen::example;

void release_IegenExample_JsonExamples(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::JsonExamples*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_JsonExamples(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::JsonExamples();
        return {strdup(IEGEN_IEGEN_EXAMPLE_JSONEXAMPLES), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_JsonExamples_setJson(IEGenCObject cself, char * _Nonnull j, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxj = nlohmann::json::parse(j);
    free(j);
  
    auto ctocxxcself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        ctocxxcself->setJson(ctocxxj);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

char * _Nonnull _func_IegenExample_JsonExamples_getJson(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getJson();
        auto result_str = result.dump();
        auto cxxtocresult = strdup(result_str.c_str());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char * result {};
    return result;
}

char * _Nonnull _func_IegenExample_JsonExamples_getSimpleJsonExample(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSimpleJsonExample();
        auto result_str = result.dump();
        auto cxxtocresult = strdup(result_str.c_str());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char * result {};
    return result;
}

void _func_IegenExample_JsonExamples_setJsonMatrix(IEGenCObject cself, IEGenCDataArray jm, IEGenCObject* _Nonnull iegen_err) {
    std::vector<std::vector<nlohmann::json>> ctocxxjm;

    auto data_jm = reinterpret_cast<IEGenCDataArray*>(jm.data);

    for (size_t _i_jm = 0; _i_jm < jm.size; ++_i_jm) {
        auto& value_jm = data_jm[_i_jm];
        std::vector<nlohmann::json> ctocxxvalue_jm;

        auto data_value_jm = reinterpret_cast<char **>(value_jm.data);

        for (size_t _i_value_jm = 0; _i_value_jm < value_jm.size; ++_i_value_jm) {
            auto& value_value_jm = data_value_jm[_i_value_jm];
            auto ctocxxvalue_value_jm = nlohmann::json::parse(value_value_jm);
            free(value_value_jm);
            ctocxxvalue_jm.emplace_back(ctocxxvalue_value_jm);
        }
        ctocxxjm.emplace_back(ctocxxvalue_jm);
    }
  
    auto ctocxxcself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        ctocxxcself->setJsonMatrix(ctocxxjm);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

IEGenCDataArray _func_IegenExample_JsonExamples_getJsonMatrix(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getJsonMatrix();
        auto _data_cxxtocresult = new IEGenCDataArray [result.size()];
        IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            auto _data_cxxtocvalue_result = new char * [value_result.size()];
            IEGenCDataArray cxxtocvalue_result = { _data_cxxtocvalue_result, static_cast<long long>(value_result.size()) };
            for (int _i_value_result = 0; _i_value_result < value_result.size(); ++_i_value_result) {
                auto& value_value_result = value_result[_i_value_result];
                auto value_value_result_str = value_value_result.dump();
                auto cxxtocvalue_value_result = strdup(value_value_result_str.c_str());
                _data_cxxtocvalue_result[_i_value_result] = cxxtocvalue_value_result;
            }
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCDataArray result {};
    return result;
}

