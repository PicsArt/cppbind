/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/30/2021-09:10.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/containers/c_json.h"
#include "cxx/containers/json.hpp"

using namespace iegen::example;

void release_JsonExamples(CDataObj cself) {
    delete static_cast<iegen::example::JsonExamples*>(cself.ptr);
}

CDataObj create_JsonExamples(){
    auto this_object = new iegen::example::JsonExamples();
    return {0, this_object};
}

void _func_JsonExamples_setJson(CDataObj cself, char * _Nullable j, ErrorObj* _Nonnull err){
    auto c_to_cxx_j = nlohmann::json::parse(j);
    free(j);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        c_to_cxx_cself->setJson(c_to_cxx_j);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

char * _Nullable _func_JsonExamples_getJson(CDataObj cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->getJson();
        auto result_str = result.dump();
        auto cxx_to_c_result = strdup(result_str.c_str());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char * _Nullable result;
    return result;
}

char * _Nullable _func_JsonExamples_getSimpleJsonExample(CDataObj cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::JsonExamples*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->getSimpleJsonExample();
        auto result_str = result.dump();
        auto cxx_to_c_result = strdup(result_str.c_str());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char * _Nullable result;
    return result;
}