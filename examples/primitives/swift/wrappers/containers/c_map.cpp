/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-08:30.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/containers/c_map.h"
#include "cxx/containers/map.hpp"

using namespace iegen::example;

void release_MapItem(CObject cself) {
    delete static_cast<iegen::example::MapItem*>(cself.ptr);
}
int _prop_get_MapItem_value(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::MapItem*>(cself.ptr);
    const auto& result = c_to_cxx_cself->value;
    
    return result;
}
void _prop_set_MapItem_value(CObject cself, int value){
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapItem*>(cself.ptr);
    
    c_to_cxx_cself->value = value;
}


CObject create_MapItem(int _value, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::MapItem(_value);
        return {strdup("iegen::example::MapItem"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
void release_MapExamples(CObject cself) {
    delete static_cast<iegen::example::MapExamples*>(cself.ptr);
}

CObject create_MapExamples(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::MapExamples();
        return {strdup("iegen::example::MapExamples"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_MapExamples_addStringPair(CObject cself, CDataPair info, ErrorObj* _Nonnull err){
    auto first_tmp_info = *reinterpret_cast<char**>(info.first);
    auto second_tmp_info = *reinterpret_cast<char**>(info.second);
    auto c_to_cxx_first_tmp_info = std::string(first_tmp_info);
    free(first_tmp_info);
    auto c_to_cxx_second_tmp_info = std::string(second_tmp_info);
    free(second_tmp_info);
    std::pair<std::string, std::string> c_to_cxx_info { c_to_cxx_first_tmp_info, c_to_cxx_second_tmp_info };
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        c_to_cxx_cself->addStringPair(c_to_cxx_info);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_MapExamples_addIntMap(CObject cself, CDataMap info, ErrorObj* _Nonnull err){
    std::map<int, int> c_to_cxx_info;

    for (size_t _i_info = 0; _i_info < info.size; ++_i_info) {
        auto ktmp_info = reinterpret_cast<int*>(info.keys)[_i_info];
        auto vtmp_info = reinterpret_cast<int*>(info.values)[_i_info];
        
        
        c_to_cxx_info.insert({ ktmp_info, vtmp_info });
    }
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        c_to_cxx_cself->addIntMap(c_to_cxx_info);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_MapExamples_addStringMap(CObject cself, CDataMap info, ErrorObj* _Nonnull err){
    std::map<std::string, std::string> c_to_cxx_info;

    for (size_t _i_info = 0; _i_info < info.size; ++_i_info) {
        auto ktmp_info = reinterpret_cast<char**>(info.keys)[_i_info];
        auto vtmp_info = reinterpret_cast<char**>(info.values)[_i_info];
        auto c_to_cxx_ktmp_info = std::string(ktmp_info);
        free(ktmp_info);
        auto c_to_cxx_vtmp_info = std::string(vtmp_info);
        free(vtmp_info);
        c_to_cxx_info.insert({ c_to_cxx_ktmp_info, c_to_cxx_vtmp_info });
    }
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        c_to_cxx_cself->addStringMap(c_to_cxx_info);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CDataMap _func_MapExamples_getStringMap(CObject cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->getStringMap();
        auto _k_data_cxx_to_c_result = new char* [result.size()];
        auto _v_data_cxx_to_c_result = new char* [result.size()];
        CDataMap cxx_to_c_result = { _k_data_cxx_to_c_result, _v_data_cxx_to_c_result, (long long)result.size() };
        size_t _i_result = 0;
        for (auto& value_result : result) {
            const auto& key_result = value_result.first;
            const auto& val_result = value_result.second;
            {
                auto cxx_to_c_key_result = strdup(key_result.data());
                auto cxx_to_c_val_result = strdup(val_result.data());
                _k_data_cxx_to_c_result[_i_result] = cxx_to_c_key_result;
                _v_data_cxx_to_c_result[_i_result] = cxx_to_c_val_result;
                _i_result += 1;
            }
        }
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataMap result{};
    return result;
}

CDataMap _func_MapExamples_getIntMap(CObject cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->getIntMap();
        auto _k_data_cxx_to_c_result = new int [result.size()];
        auto _v_data_cxx_to_c_result = new int [result.size()];
        CDataMap cxx_to_c_result = { _k_data_cxx_to_c_result, _v_data_cxx_to_c_result, (long long)result.size() };
        size_t _i_result = 0;
        for (auto& value_result : result) {
            const auto& key_result = value_result.first;
            const auto& val_result = value_result.second;
            {
                
                
                _k_data_cxx_to_c_result[_i_result] = key_result;
                _v_data_cxx_to_c_result[_i_result] = val_result;
                _i_result += 1;
            }
        }
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataMap result{};
    return result;
}

void _func_MapExamples_addMixedMap(CObject cself, CDataMap info, ErrorObj* _Nonnull err){
    std::map<std::string, MapItem> c_to_cxx_info;

    for (size_t _i_info = 0; _i_info < info.size; ++_i_info) {
        auto ktmp_info = reinterpret_cast<char**>(info.keys)[_i_info];
        auto vtmp_info = reinterpret_cast<CObject*>(info.values)[_i_info];
        auto c_to_cxx_ktmp_info = std::string(ktmp_info);
        free(ktmp_info);
        
        auto& c_to_cxx_vtmp_info = *static_cast<iegen::example::MapItem*>(vtmp_info.ptr);
        c_to_cxx_info.insert({ c_to_cxx_ktmp_info, c_to_cxx_vtmp_info });
    }
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        c_to_cxx_cself->addMixedMap(c_to_cxx_info);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CDataMap _func_MapExamples_getMixedMap(CObject cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::MapExamples*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->getMixedMap();
        auto _k_data_cxx_to_c_result = new char* [result.size()];
        auto _v_data_cxx_to_c_result = new CObject [result.size()];
        CDataMap cxx_to_c_result = { _k_data_cxx_to_c_result, _v_data_cxx_to_c_result, (long long)result.size() };
        size_t _i_result = 0;
        for (auto& value_result : result) {
            const auto& key_result = value_result.first;
            const auto& val_result = value_result.second;
            {
                auto cxx_to_c_key_result = strdup(key_result.data());
                
                char* type_val_result = strdup("iegen::example::MapItem");
                CObject cxx_to_c_val_result = {type_val_result, const_cast<iegen::example::MapItem*>( new iegen::example::MapItem(val_result) )};
                _k_data_cxx_to_c_result[_i_result] = cxx_to_c_key_result;
                _v_data_cxx_to_c_result[_i_result] = cxx_to_c_val_result;
                _i_result += 1;
            }
        }
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataMap result{};
    return result;
}