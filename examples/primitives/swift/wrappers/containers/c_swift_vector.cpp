/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:36.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/containers/c_swift_vector.h"
#include "cxx/containers/vector.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_VECTORITEM = "cppbind::example::VectorItem";
const char* CPPBIND_CPPBIND_EXAMPLE_VECTOREXAMPLES = "cppbind::example::VectorExamples";

void release_CppbindExample_VectorItem(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::VectorItem*>(cself.ptr);
    }
    free(cself.type);
}

int _prop_get_CppbindExample_VectorItem_value(CppBindCObject cself) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::VectorItem*>(cself.ptr);
    decltype(auto) result = ctocxxcself->value;
    
    return result;
}

void _prop_set_CppbindExample_VectorItem_value(CppBindCObject cself, int value) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::VectorItem*>(cself.ptr);
    
    ctocxxcself->value = value;
}

CppBindCObject create_CppbindExample_VectorItem(int _value, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::VectorItem(_value);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_VECTORITEM), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_VectorExamples(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_VectorExamples(CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::VectorExamples();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_VECTOREXAMPLES), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExample_VectorExamples_addIntVector(CppBindCObject cself, CppBindCDataArray v, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }

    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addIntVector(ctocxxv);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void _func_CppbindExample_VectorExamples_addObjVector(CppBindCObject cself, CppBindCDataArray v, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<VectorItem *> ctocxxv;

    auto data_v = reinterpret_cast<CppBindCObject*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        auto ctocxxvalue_v = static_cast<cppbind::example::VectorItem*>(value_v.ptr);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }

    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addObjVector(ctocxxv);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void _func_CppbindExample_VectorExamples_addStringVector(CppBindCObject cself, CppBindCDataArray v, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<std::string> ctocxxv;

    auto data_v = reinterpret_cast<char**>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        auto ctocxxvalue_v = std::string(value_v);
        free(value_v);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }

    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addStringVector(ctocxxv);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCDataArray _func_CppbindExample_VectorExamples_getStringVector(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getStringVector();
        auto _data_cxxtocresult = new char* [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            auto cxxtocvalue_result = strdup(value_result.data());
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_VectorExamples_getObjVector(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getObjVector();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup(CPPBIND_CPPBIND_EXAMPLE_VECTORITEM);
            auto value_ptr_value_result = value_result;
            CppBindCObject cxxtocvalue_result = {type_value_result, value_ptr_value_result};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_VectorExamples_getIntVector(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::VectorExamples*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getIntVector();
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

