/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/21/2022-14:58.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/containers/c_vector.h"
#include "cxx/containers/vector.hpp"



using namespace iegen::example;

void release_VectorItem(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::VectorItem*>(cself.ptr);
    }
}
int _prop_get_VectorItem_value(CObject cself){
    iegen::example::VectorItem* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorItem") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorItem*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->value;
    
    return result;
}
void _prop_set_VectorItem_value(CObject cself, int value){
    
    iegen::example::VectorItem* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorItem") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorItem*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    
    ctocxxcself->value = value;
}


CObject create_VectorItem(int _value, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::VectorItem(_value);
        return {strdup("iegen::example::VectorItem"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
void release_VectorExamples(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::VectorExamples*>(cself.ptr);
    }
}

CObject create_VectorExamples(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::VectorExamples();
        return {strdup("iegen::example::VectorExamples"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_VectorExamples_addIntVector(CObject cself, CDataArray v, ErrorObj* _Nonnull err){
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
  
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->addIntVector(ctocxxv);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_VectorExamples_addObjVector(CObject cself, CDataArray v, ErrorObj* _Nonnull err){
    std::vector<VectorItem *> ctocxxv;

    auto data_v = reinterpret_cast<CObject*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        iegen::example::VectorItem* ctocxxvalue_v_ptr = nullptr;
        if (value_v.ptr) {
            if (strcmp(value_v.type, "iegen::example::VectorItem") == 0)
                ctocxxvalue_v_ptr = static_cast<iegen::example::VectorItem*>(value_v.ptr);
            else {
                std::cerr << "Unexpected object type: " << value_v.type << std::endl;
                exit(1);
            }
        }
        auto ctocxxvalue_v = ctocxxvalue_v_ptr;
        ctocxxv.emplace_back(ctocxxvalue_v);
    }
  
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->addObjVector(ctocxxv);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_VectorExamples_addStringVector(CObject cself, CDataArray v, ErrorObj* _Nonnull err){
    std::vector<std::string> ctocxxv;

    auto data_v = reinterpret_cast<char**>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        auto ctocxxvalue_v = std::string(value_v);
        free(value_v);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }
  
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->addStringVector(ctocxxv);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CDataArray _func_VectorExamples_getStringVector(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getStringVector();
        auto _data_cxxtocresult = new char* [result.size()];
        CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            auto cxxtocvalue_result = strdup(value_result.data());
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataArray result{};
    return result;
}

CDataArray _func_VectorExamples_getObjVector(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getObjVector();
        auto _data_cxxtocresult = new CObject [result.size()];
        CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup("iegen::example::VectorItem");
            auto value_ptr_value_result = const_cast<iegen::example::VectorItem*>(value_result);
            CObject cxxtocvalue_result = {type_value_result, value_ptr_value_result};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataArray result{};
    return result;
}

CDataArray _func_VectorExamples_getIntVector(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::VectorExamples* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::VectorExamples") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::VectorExamples*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getIntVector();
        auto _data_cxxtocresult = new int [result.size()];
        CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataArray result{};
    return result;
}
