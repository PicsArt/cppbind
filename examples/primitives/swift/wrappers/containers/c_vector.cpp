/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/containers/c_vector.h"
#include "cxx/containers/vector.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_VECTORITEM = "iegen::example::VectorItem";
const char* IEGEN_IEGEN_EXAMPLE_VECTOREXAMPLES = "iegen::example::VectorExamples";

using namespace iegen::example;

void release_IegenExample_VectorItem(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::VectorItem*>(cself.ptr);
    }
    free(cself.type);
}

int _prop_get_IegenExample_VectorItem_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::VectorItem*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void _prop_set_IegenExample_VectorItem_value(IEGenCObject cself, int value) {
    
    auto ctocxxcself = static_cast<iegen::example::VectorItem*>(cself.ptr);
    
    ctocxxcself->value = value;
}

IEGenCObject create_IegenExample_VectorItem(int _value, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::VectorItem(_value);
        return {strdup(IEGEN_IEGEN_EXAMPLE_VECTORITEM), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void release_IegenExample_VectorExamples(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::VectorExamples*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_VectorExamples(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::VectorExamples();
        return {strdup(IEGEN_IEGEN_EXAMPLE_VECTOREXAMPLES), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_VectorExamples_addIntVector(IEGenCObject cself, IEGenCDataArray v, IEGenCObject* _Nonnull iegen_err) {
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
  
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addIntVector(ctocxxv);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

void _func_IegenExample_VectorExamples_addObjVector(IEGenCObject cself, IEGenCDataArray v, IEGenCObject* _Nonnull iegen_err) {
    std::vector<VectorItem *> ctocxxv;

    auto data_v = reinterpret_cast<IEGenCObject*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        auto ctocxxvalue_v = static_cast<iegen::example::VectorItem*>(value_v.ptr);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }
  
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addObjVector(ctocxxv);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

void _func_IegenExample_VectorExamples_addStringVector(IEGenCObject cself, IEGenCDataArray v, IEGenCObject* _Nonnull iegen_err) {
    std::vector<std::string> ctocxxv;

    auto data_v = reinterpret_cast<char**>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        auto ctocxxvalue_v = std::string(value_v);
        free(value_v);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }
  
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        ctocxxcself->addStringVector(ctocxxv);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

IEGenCDataArray _func_IegenExample_VectorExamples_getStringVector(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getStringVector();
        auto _data_cxxtocresult = new char* [result.size()];
        IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            auto cxxtocvalue_result = strdup(value_result.data());
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCDataArray result {};
    return result;
}

IEGenCDataArray _func_IegenExample_VectorExamples_getObjVector(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getObjVector();
        auto _data_cxxtocresult = new IEGenCObject [result.size()];
        IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup(IEGEN_IEGEN_EXAMPLE_VECTORITEM);
            auto value_ptr_value_result = const_cast<iegen::example::VectorItem*>(value_result);
            IEGenCObject cxxtocvalue_result = {type_value_result, value_ptr_value_result};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCDataArray result {};
    return result;
}

IEGenCDataArray _func_IegenExample_VectorExamples_getIntVector(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::VectorExamples*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getIntVector();
        auto _data_cxxtocresult = new int [result.size()];
        IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCDataArray result {};
    return result;
}

