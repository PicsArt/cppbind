/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_custom_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION = "iegen::example::SimpleBaseException";
const char* IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION = "iegen::example::SimpleChildException";

using namespace iegen::example;

void release_IegenExample_SimpleBaseException(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::SimpleBaseException>::value, "iegen::example::SimpleBaseException type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION) == 0)
            delete static_cast<iegen::example::SimpleBaseException*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION) == 0)
            delete static_cast<iegen::example::SimpleChildException*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::SimpleBaseException* downcast_IegenExample_SimpleBaseException(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION) == 0)
            return static_cast<iegen::example::SimpleBaseException*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION) == 0)
            return static_cast<iegen::example::SimpleChildException*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_SimpleBaseException(int err_num, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::SimpleBaseException(err_num);
        return {strdup(IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_SimpleBaseException_errNum(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    iegen::example::SimpleBaseException* ctocxxcself = downcast_IegenExample_SimpleBaseException(cself);
    try {
        const auto& result = ctocxxcself->errNum();
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

IEGenCObject create_IegenExample_SimpleChildException(int err_num, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::SimpleChildException(err_num);
        return {strdup(IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_SimpleChildException_errNum(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::SimpleChildException*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->errNum();
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

