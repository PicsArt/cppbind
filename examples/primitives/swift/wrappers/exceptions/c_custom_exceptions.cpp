/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/30/2021-09:10.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/exceptions/c_custom_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

void release_SimpleBaseException(CDataObj cself) {
    delete static_cast<iegen::example::SimpleBaseException*>(cself.ptr);
}

CDataObj create_SimpleBaseException(int err_num){
    
    auto this_object = new iegen::example::SimpleBaseException(err_num);
    return {0, this_object};
}

int _func_SimpleBaseException_errNum(CDataObj cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::SimpleBaseException*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->errNum();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}
void release_SimpleChildException(CDataObj cself) {
    delete static_cast<iegen::example::SimpleBaseException*>(cself.ptr);
}

CDataObj create_SimpleChildException(int err_num){
    
    auto this_object = new iegen::example::SimpleChildException(err_num);
    return {0, static_cast<iegen::example::SimpleBaseException*>(this_object)};
}

int _func_SimpleChildException_errNum(CDataObj cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::SimpleChildException*>(static_cast<iegen::example::SimpleBaseException*>(cself.ptr));
    try {
        const auto& result = c_to_cxx_cself->errNum();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}