/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/16/2022-09:09.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_custom_std_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

iegen::example::SystemError* downcast_IegenExample_SystemError(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, "iegen::example::SystemError") == 0)
            return static_cast<iegen::example::SystemError*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::FileError") == 0)
            return static_cast<iegen::example::FileError*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_SystemError(char* _Nonnull message, IEGenCObject* _Nonnull err) {
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::SystemError(ctocxxmessage);
        return {strdup("iegen::example::SystemError"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

const char * _Nonnull _func_IegenExample_SystemError_what(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    iegen::example::SystemError* ctocxxcself = downcast_IegenExample_SystemError(cself);
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

IEGenCObject create_IegenExample_FileError(char* _Nonnull message, IEGenCObject* _Nonnull err) {
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::FileError(ctocxxmessage);
        return {strdup("iegen::example::FileError"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

const char * _Nonnull _func_IegenExample_FileError_what(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::example::FileError*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

