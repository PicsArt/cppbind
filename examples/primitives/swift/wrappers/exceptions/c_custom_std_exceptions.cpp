/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/exceptions/c_custom_std_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

void release_SystemError(void* _Nonnull cself) {
    delete static_cast<std::exception*>(cself);
}

void* _Nonnull create_SystemError(char* _Nonnull message, ErrorObj* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::SystemError(ctocxxmessage);
        return static_cast<std::exception*>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

const char * _Nonnull _func_SystemError_what(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::SystemError*>(static_cast<std::exception*>(cself));
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result = nullptr;
    return result;
}
void release_FileError(void* _Nonnull cself) {
    delete static_cast<std::exception*>(cself);
}

void* _Nonnull create_FileError(char* _Nonnull message, ErrorObj* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::FileError(ctocxxmessage);
        return static_cast<std::exception*>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

const char * _Nonnull _func_FileError_what(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::FileError*>(static_cast<std::exception*>(cself));
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result = nullptr;
    return result;
}