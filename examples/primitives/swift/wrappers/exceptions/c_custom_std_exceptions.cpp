/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/03/2022-12:28.
 * Please do not change it manually.
 */

#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/exceptions/c_custom_std_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;


IEGenCObject create_SystemError(char* _Nonnull message, IEGenCObject* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::SystemError(ctocxxmessage);
        return {strdup("iegen::example::SystemError"), static_cast<std::exception*>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

const char * _Nonnull _func_SystemError_what(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::SystemError*>(static_cast<std::exception*>(cself.ptr));
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

IEGenCObject create_FileError(char* _Nonnull message, IEGenCObject* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::FileError(ctocxxmessage);
        return {strdup("iegen::example::FileError"), static_cast<std::exception*>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

const char * _Nonnull _func_FileError_what(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::FileError*>(static_cast<std::exception*>(cself.ptr));
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}
