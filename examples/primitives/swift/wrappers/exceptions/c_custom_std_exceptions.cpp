/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/02/2022-10:55.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_custom_std_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

void release_SystemError(CObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::SystemError>::value, "iegen::example::SystemError type must have virtual destructor");
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::SystemError*>(cself.ptr);
    }
}

CObject create_SystemError(char* _Nonnull message, ErrorObj* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::SystemError(ctocxxmessage);
        return {strdup("iegen::example::SystemError"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

const char * _Nonnull _func_SystemError_what(CObject cself, ErrorObj* _Nonnull err){
    iegen::example::SystemError* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SystemError") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SystemError*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::FileError") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::FileError*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result{};
    return result;
}
void release_FileError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::FileError*>(cself.ptr);
    }
}

CObject create_FileError(char* _Nonnull message, ErrorObj* _Nonnull err){
    auto ctocxxmessage = std::string(message);
    free(message);
    try {
        auto this_object = new iegen::example::FileError(ctocxxmessage);
        return {strdup("iegen::example::FileError"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

const char * _Nonnull _func_FileError_what(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::FileError*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result{};
    return result;
}
