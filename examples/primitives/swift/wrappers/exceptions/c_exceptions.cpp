/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 07/22/2021-12:36.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/exceptions/c_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::example;

using namespace iegen::exceptions;

void release_SystemError(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::SystemError*>(static_cast<std::exception*>(cself));
}

void* _Nonnull create_SystemError(char* _Nonnull message){
    auto c_to_cxx_message = std::string(message);
    free(message);
    auto this_object = new iegen::example::SystemError(c_to_cxx_message);
    return static_cast<std::exception*>(this_object);
}

const char * _Nonnull _func_SystemError_what(void* _Nonnull cself, ErrorObj* _Nonnull err){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::SystemError*>(static_cast<std::exception*>(cself));
    try {
      const auto& result = c_to_cxx_cself->what();
      
      return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result;
    return result;
}
void release_FileError(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::FileError*>(static_cast<std::exception*>(cself));
}

void* _Nonnull create_FileError(char* _Nonnull message){
    auto c_to_cxx_message = std::string(message);
    free(message);
    auto this_object = new iegen::example::FileError(c_to_cxx_message);
    return static_cast<std::exception*>(this_object);
}

const char * _Nonnull _func_FileError_what(void* _Nonnull cself, ErrorObj* _Nonnull err){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::FileError*>(static_cast<std::exception*>(cself));
    try {
      const auto& result = c_to_cxx_cself->what();
      
      return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result;
    return result;
}
void release_SimpleBaseException(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::SimpleBaseException*>(static_cast<iegen::example::SimpleBaseException*>(cself));
}

void* _Nonnull create_SimpleBaseException(int err_num){
    
    auto this_object = new iegen::example::SimpleBaseException(err_num);
    return static_cast<iegen::example::SimpleBaseException*>(this_object);
}

int _func_SimpleBaseException_errNum(void* _Nonnull cself, ErrorObj* _Nonnull err){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::SimpleBaseException*>(static_cast<iegen::example::SimpleBaseException*>(cself));
    try {
      const auto& result = c_to_cxx_cself->errNum();
      
      return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}
void release_SimpleChildException(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::SimpleChildException*>(static_cast<iegen::example::SimpleBaseException*>(cself));
}

void* _Nonnull create_SimpleChildException(int err_num){
    
    auto this_object = new iegen::example::SimpleChildException(err_num);
    return static_cast<iegen::example::SimpleBaseException*>(this_object);
}

int _func_SimpleChildException_errNum(void* _Nonnull cself, ErrorObj* _Nonnull err){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::SimpleChildException*>(static_cast<iegen::example::SimpleBaseException*>(cself));
    try {
      const auto& result = c_to_cxx_cself->errNum();
      
      return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}
void release_Integer(void* _Nonnull cself) {
    delete dynamic_cast<iegen::exceptions::Integer*>(static_cast<iegen::exceptions::Integer*>(cself));
}

void* _Nonnull create_Integer(int n){
    
    auto this_object = new iegen::exceptions::Integer(n);
    return static_cast<iegen::exceptions::Integer*>(this_object);
}
int _prop_get_Integer_value(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::exceptions::Integer*>(static_cast<iegen::exceptions::Integer*>(cself));
    auto result = c_to_cxx_cself->value();
    
    return result;
}
void release_Exc(void* _Nonnull cself) {
    delete dynamic_cast<iegen::exceptions::Exc*>(static_cast<iegen::exceptions::Exc*>(cself));
}

int _func_Exc_getByKey(CDataMap m, int key, ErrorObj* _Nonnull err){
    std::map<int, int> c_to_cxx_m;

    for (size_t _i_m = 0; _i_m < m.size; ++_i_m) {
        auto ktmp_m = reinterpret_cast<int*>(m.keys)[_i_m];
        auto vtmp_m = reinterpret_cast<int*>(m.values)[_i_m];
        
        
        c_to_cxx_m.insert({ ktmp_m, vtmp_m });
    }
  
    
  
    try {
      const auto& result = iegen::exceptions::Exc::getByKey(c_to_cxx_m, key);
      
      return result;
    }catch (const std::out_of_range& e) {
        err->err_type = 1;
        err->err_ptr = new std::out_of_range(e);
    }catch (const std::invalid_argument& e) {
        err->err_type = 2;
        err->err_ptr = new std::invalid_argument(e);
    }catch (const std::length_error& e) {
        err->err_type = 3;
        err->err_ptr = new std::length_error(e);
    }catch (const iegen::example::SystemError& e) {
        err->err_type = 4;
        err->err_ptr = new iegen::example::SystemError(e);
    }
    catch (const std::exception& e) {
        err->err_type = 5;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

void _func_Exc_noop(ErrorObj* _Nonnull err){
    try {
      iegen::exceptions::Exc::noop();
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void* _Nonnull _func_Exc_returnInteger(bool do_throw, ErrorObj* _Nonnull err){
    
  
    try {
      const auto& result = iegen::exceptions::Exc::returnInteger(do_throw);
      auto value_ptr_result = const_cast<iegen::exceptions::Integer*>(result);
    auto cxx_to_c_result = static_cast<iegen::exceptions::Integer*>(value_ptr_result);
      return cxx_to_c_result;
    }catch (const std::out_of_range& e) {
        err->err_type = 1;
        err->err_ptr = new std::out_of_range(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}

void _func_Exc_raiseErrorByType(char* _Nonnull err_type, ErrorObj* _Nonnull err){
    auto c_to_cxx_err_type = std::string(err_type);
    free(err_type);
  
    try {
      iegen::exceptions::Exc::raiseErrorByType(c_to_cxx_err_type);
    }catch (const std::runtime_error& e) {
        err->err_type = 1;
        err->err_ptr = new std::runtime_error(e);
    }catch (const iegen::example::FileError& e) {
        err->err_type = 2;
        err->err_ptr = new iegen::example::FileError(e);
    }catch (const iegen::example::SystemError& e) {
        err->err_type = 3;
        err->err_ptr = new iegen::example::SystemError(e);
    }catch (const iegen::example::SimpleChildException& e) {
        err->err_type = 4;
        err->err_ptr = new iegen::example::SimpleChildException(e);
    }catch (const iegen::example::SimpleBaseException& e) {
        err->err_type = 5;
        err->err_ptr = new iegen::example::SimpleBaseException(e);
    }catch (const std::exception& e) {
        err->err_type = 6;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}