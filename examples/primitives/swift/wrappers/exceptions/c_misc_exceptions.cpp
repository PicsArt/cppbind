/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_misc_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;
extern const char* IEGEN_STD_STDOUTOFRANGE;
extern const char* IEGEN_STD_STDRUNTIMEERROR;
extern const char* IEGEN_IEGEN_EXAMPLE_FILEERROR;
extern const char* IEGEN_IEGEN_EXAMPLE_SYSTEMERROR;
extern const char* IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION;
extern const char* IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION;

const char* IEGEN_IEGEN_EXCEPTIONS_INTEGER = "iegen::exceptions::Integer";
const char* IEGEN_IEGEN_EXCEPTIONS_MISCEXC = "iegen::exceptions::MiscExc";

using namespace iegen::exceptions;

void release_IegenExceptions_Integer(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::exceptions::Integer*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExceptions_Integer(int n, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::exceptions::Integer(n);
        return {strdup(IEGEN_IEGEN_EXCEPTIONS_INTEGER), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _prop_get_IegenExceptions_Integer_value(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::exceptions::Integer*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->value();
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

void release_IegenExceptions_MiscExc(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::exceptions::MiscExc*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject _func_IegenExceptions_MiscExc_returnInteger(bool do_throw, IEGenCObject* _Nonnull iegen_err) {
  
    try {
        const auto& result = iegen::exceptions::MiscExc::returnInteger(do_throw);
        
        char* type_result = strdup(IEGEN_IEGEN_EXCEPTIONS_INTEGER);
        auto value_ptr_result = const_cast<iegen::exceptions::Integer*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::out_of_range& e) {
        iegen_err->type = strdup(IEGEN_STD_STDOUTOFRANGE);
        iegen_err->ptr = new std::out_of_range(e);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExceptions_MiscExc_raiseErrorByType(char* _Nonnull err_type, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxerr_type = std::string(err_type);
    free(err_type);
  
    try {
        iegen::exceptions::MiscExc::raiseErrorByType(ctocxxerr_type);
    } catch (const std::runtime_error& e) {
        iegen_err->type = strdup(IEGEN_STD_STDRUNTIMEERROR);
        iegen_err->ptr = new std::runtime_error(e);
    } catch (const iegen::example::FileError& e) {
        iegen_err->type = strdup(IEGEN_IEGEN_EXAMPLE_FILEERROR);
        iegen_err->ptr = new iegen::example::FileError(e);
    } catch (const iegen::example::SystemError& e) {
        iegen_err->type = strdup(IEGEN_IEGEN_EXAMPLE_SYSTEMERROR);
        iegen_err->ptr = new iegen::example::SystemError(e);
    } catch (const iegen::example::SimpleChildException& e) {
        iegen_err->type = strdup(IEGEN_IEGEN_EXAMPLE_SIMPLECHILDEXCEPTION);
        iegen_err->ptr = new iegen::example::SimpleChildException(e);
    } catch (const iegen::example::SimpleBaseException& e) {
        iegen_err->type = strdup(IEGEN_IEGEN_EXAMPLE_SIMPLEBASEEXCEPTION);
        iegen_err->ptr = new iegen::example::SimpleBaseException(e);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

