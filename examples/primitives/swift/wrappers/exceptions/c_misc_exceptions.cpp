/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/21/2022-14:54.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/exceptions/c_misc_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"



using namespace iegen::exceptions;

void release_Integer(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::exceptions::Integer*>(cself.ptr);
    }
}

CObject create_Integer(int n, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::exceptions::Integer(n);
        return {strdup("iegen::exceptions::Integer"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _prop_get_Integer_value(CObject cself){
    iegen::exceptions::Integer* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::exceptions::Integer") == 0)
            ctocxxcself_ptr = static_cast<iegen::exceptions::Integer*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->value();
    
    return result;
}
void release_MiscExc(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::exceptions::MiscExc*>(cself.ptr);
    }
}

CObject _func_MiscExc_returnInteger(bool do_throw, ErrorObj* _Nonnull err){
    
  
    try {
        const auto& result = iegen::exceptions::MiscExc::returnInteger(do_throw);
        
        char* type_result = strdup("iegen::exceptions::Integer");
        auto value_ptr_result = const_cast<iegen::exceptions::Integer*>(result);
        CObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }catch (const std::out_of_range& e) {
        err->err_type = 1;
        err->err_ptr = new std::out_of_range(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_MiscExc_raiseErrorByType(char* _Nonnull err_type, ErrorObj* _Nonnull err){
    auto ctocxxerr_type = std::string(err_type);
    free(err_type);
  
    try {
        iegen::exceptions::MiscExc::raiseErrorByType(ctocxxerr_type);
    }catch (const std::runtime_error& e) {
        err->err_type = 1;
        err->err_ptr = new std::runtime_error(e);
    }catch (const iegen::example::FileError& e) {
        err->err_type = 2;
        err->err_ptr = new iegen::example::FileError(e);
    }catch (const iegen::example::SystemError& e) {
        err->err_type = 3;
        err->err_ptr = new iegen::example::SystemError(e);
    }catch (const iegen::example::SimpleChildException& e) {
        err->err_type = 4;
        err->err_ptr = new iegen::example::SimpleChildException(e);
    }catch (const iegen::example::SimpleBaseException& e) {
        err->err_type = 5;
        err->err_ptr = new iegen::example::SimpleBaseException(e);
    }catch (const std::exception& e) {
        err->err_type = 6;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}
