/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/25/2021-09:16.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/exceptions/c_misc_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::exceptions;

void release_Integer(void* _Nonnull cself) {
    delete static_cast<iegen::exceptions::Integer*>(cself);
}

void* _Nonnull create_Integer(int n, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::exceptions::Integer(n);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

int _prop_get_Integer_value(void* _Nonnull cself){
    auto c_to_cxx_cself = static_cast<iegen::exceptions::Integer*>(cself);
    const auto& result = c_to_cxx_cself->value();
    
    return result;
}
void release_MiscExc(void* _Nonnull cself) {
    delete static_cast<iegen::exceptions::MiscExc*>(cself);
}

void* _Nonnull _func_MiscExc_returnInteger(bool do_throw, ErrorObj* _Nonnull err){
    
  
    try {
        const auto& result = iegen::exceptions::MiscExc::returnInteger(do_throw);
        
        auto cxx_to_c_result = const_cast<iegen::exceptions::Integer*>(result);
        return cxx_to_c_result;
    }catch (const std::out_of_range& e) {
        err->err_type = 1;
        err->err_ptr = new std::out_of_range(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void _func_MiscExc_raiseErrorByType(char* _Nonnull err_type, ErrorObj* _Nonnull err){
    auto c_to_cxx_err_type = std::string(err_type);
    free(err_type);
  
    try {
        iegen::exceptions::MiscExc::raiseErrorByType(c_to_cxx_err_type);
    }catch (const std::runtime_error& e) {
        err->err_type = 1;
        err->err_ptr = new std::runtime_error(e);
    }catch (const iegen::example::FileError& e) {
        err->err_type = 2;
        err->err_ptr = new iegen::example::FileError(e);
    }catch (const iegen::example::SystemError& e) {
        err->err_type = 3;
        err->err_ptr = new iegen::example::SystemError(e);
    }catch (const iegen::example::SimpleChildException& e) {
        err->err_type = 4;
        err->err_ptr = new iegen::example::SimpleChildException(e);
    }catch (const iegen::example::SimpleBaseException& e) {
        err->err_type = 5;
        err->err_ptr = new iegen::example::SimpleBaseException(e);
    }catch (const std::exception& e) {
        err->err_type = 6;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}