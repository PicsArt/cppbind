/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/10/2022-14:09.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_no_throw_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

using namespace iegen::exceptions;

void release_IegenExceptions_NoThrowExc(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::exceptions::NoThrowExc*>(cself.ptr);
    }
}

IEGenCObject create_IegenExceptions_NoThrowExc(bool do_throw, IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::exceptions::NoThrowExc(do_throw);
        return {strdup("iegen::exceptions::NoThrowExc"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExceptions_NoThrowExc_noop(IEGenCObject* _Nonnull err) {
    try {
        iegen::exceptions::NoThrowExc::noop();
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

char* _Nonnull _prop_get_IegenExceptions_NoThrowExc_prop(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::exceptions::NoThrowExc*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->prop();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_IegenExceptions_NoThrowExc_prop(IEGenCObject cself, char* _Nonnull s, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::exceptions::NoThrowExc*>(cself.ptr);
    auto ctocxxs = std::string(s);
    free(s);
    try {
        ctocxxcself->setProp(ctocxxs);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

