/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/13/2022-14:16.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_swift_misc_exceptions.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/exceptions/exceptions.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_STD_STDOUTOFRANGE;
extern const char* CPPBIND_STD_STDRUNTIMEERROR;
extern const char* CPPBIND_CPPBIND_EXAMPLE_FILEERROR;
extern const char* CPPBIND_CPPBIND_EXAMPLE_SYSTEMERROR;
extern const char* CPPBIND_CPPBIND_EXAMPLE_SIMPLECHILDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_SIMPLEBASEEXCEPTION;

const char* CPPBIND_CPPBIND_EXCEPTIONS_INTEGER = "cppbind::exceptions::Integer";
const char* CPPBIND_CPPBIND_EXCEPTIONS_MISCEXC = "cppbind::exceptions::MiscExc";

void release_CppbindExceptions_Integer(CppBindCObject cself, bool owner) {
    using namespace cppbind::exceptions;
    if (owner) {
        delete static_cast<cppbind::exceptions::Integer*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExceptions_Integer(int n, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::exceptions;
    try {
        auto this_object = new cppbind::exceptions::Integer(n);
        return {strdup(CPPBIND_CPPBIND_EXCEPTIONS_INTEGER), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExceptions_Integer_value(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::exceptions;
    auto ctocxxcself = static_cast<cppbind::exceptions::Integer*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->value();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

void release_CppbindExceptions_MiscExc(CppBindCObject cself, bool owner) {
    using namespace cppbind::exceptions;
    if (owner) {
        delete static_cast<cppbind::exceptions::MiscExc*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject _func_CppbindExceptions_MiscExc_returnInteger(bool do_throw, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::exceptions;

    try {
        decltype(auto) result = cppbind::exceptions::MiscExc::returnInteger(do_throw);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXCEPTIONS_INTEGER);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::out_of_range& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDOUTOFRANGE);
        cppbind_err->ptr = new std::out_of_range(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExceptions_MiscExc_raiseErrorByType(char* _Nonnull err_type, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::exceptions;
    auto ctocxxerr_type = std::string(err_type);
    free(err_type);

    try {
        cppbind::exceptions::MiscExc::raiseErrorByType(ctocxxerr_type);
    } catch (const std::runtime_error& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDRUNTIMEERROR);
        cppbind_err->ptr = new std::runtime_error(e);
    } catch (const cppbind::example::FileError& e) {
        cppbind_err->type = strdup(CPPBIND_CPPBIND_EXAMPLE_FILEERROR);
        cppbind_err->ptr = new cppbind::example::FileError(e);
    } catch (const cppbind::example::SystemError& e) {
        cppbind_err->type = strdup(CPPBIND_CPPBIND_EXAMPLE_SYSTEMERROR);
        cppbind_err->ptr = new cppbind::example::SystemError(e);
    } catch (const cppbind::example::SimpleChildException& e) {
        cppbind_err->type = strdup(CPPBIND_CPPBIND_EXAMPLE_SIMPLECHILDEXCEPTION);
        cppbind_err->ptr = new cppbind::example::SimpleChildException(e);
    } catch (const cppbind::example::SimpleBaseException& e) {
        cppbind_err->type = strdup(CPPBIND_CPPBIND_EXAMPLE_SIMPLEBASEEXCEPTION);
        cppbind_err->ptr = new cppbind::example::SimpleBaseException(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

