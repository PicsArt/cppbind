/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:05.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_swift_no_throw_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXCEPTIONS_NOTHROWEXC = "cppbind::exceptions::NoThrowExc";

using namespace cppbind::exceptions;

void release_CppbindExceptions_NoThrowExc(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::exceptions::NoThrowExc*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExceptions_NoThrowExc(bool do_throw, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::exceptions::NoThrowExc(do_throw);
        return {strdup(CPPBIND_CPPBIND_EXCEPTIONS_NOTHROWEXC), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExceptions_NoThrowExc_noop(CppBindCObject* _Nonnull cppbind_err) {
    try {
        cppbind::exceptions::NoThrowExc::noop();
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

char* _Nonnull _prop_get_CppbindExceptions_NoThrowExc_prop(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::exceptions::NoThrowExc*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->prop();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_CppbindExceptions_NoThrowExc_prop(CppBindCObject cself, char* _Nonnull s, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxcself = static_cast<cppbind::exceptions::NoThrowExc*>(cself.ptr);
    auto ctocxxs = std::string(s);
    free(s);
    try {
        ctocxxcself->setProp(ctocxxs);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

