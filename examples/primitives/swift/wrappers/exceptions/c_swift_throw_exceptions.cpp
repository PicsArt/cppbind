/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:05.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/exceptions/c_swift_throw_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"
#include "cxx/simple/task.hpp"

extern const char* CPPBIND_STD_STDINVALIDARGUMENT;
extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_STD_STDOUTOFRANGE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_SYSTEMERROR;
extern const char* CPPBIND_CPPBIND_EXAMPLE_TASK;

const char* CPPBIND_CPPBIND_EXCEPTIONS_THROWEXC = "cppbind::exceptions::ThrowExc";

using namespace cppbind::exceptions;

void _func_CppbindExceptions_throwExc(bool do_throw, CppBindCObject* _Nonnull cppbind_err) {
    
    try {
        throwExc(do_throw);
    } catch (const std::invalid_argument& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDINVALIDARGUMENT);
        cppbind_err->ptr = new std::invalid_argument(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void release_CppbindExceptions_ThrowExc(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::exceptions::ThrowExc*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExceptions_ThrowExc(bool do_throw, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::exceptions::ThrowExc(do_throw);
        return {strdup(CPPBIND_CPPBIND_EXCEPTIONS_THROWEXC), this_object};
    } catch (const std::invalid_argument& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDINVALIDARGUMENT);
        cppbind_err->ptr = new std::invalid_argument(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _func_CppbindExceptions_ThrowExc_getByKey(CppBindCDataMap m, int key, CppBindCObject* _Nonnull cppbind_err) {
    std::map<int, int> ctocxxm;

    for (size_t _i_m = 0; _i_m < m.size; ++_i_m) {
        auto ktmp_m = reinterpret_cast<int*>(m.keys)[_i_m];
        auto vtmp_m = reinterpret_cast<int*>(m.values)[_i_m];
        
        
        ctocxxm.insert({ ktmp_m, vtmp_m });
    }
  
  
    try {
        const auto& result = cppbind::exceptions::ThrowExc::getByKey(ctocxxm, key);
        
        return result;
    } catch (const std::out_of_range& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDOUTOFRANGE);
        cppbind_err->ptr = new std::out_of_range(e);
    } catch (const cppbind::example::SystemError& e) {
        cppbind_err->type = strdup(CPPBIND_CPPBIND_EXAMPLE_SYSTEMERROR);
        cppbind_err->ptr = new cppbind::example::SystemError(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

char* _Nonnull _func_CppbindExceptions_ThrowExc_throwsWithReturnValueString(CppBindCObject* _Nonnull cppbind_err) {
    try {
        const auto& result = cppbind::exceptions::ThrowExc::throwsWithReturnValueString();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::invalid_argument& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDINVALIDARGUMENT);
        cppbind_err->ptr = new std::invalid_argument(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject _func_CppbindExceptions_ThrowExc_throwsWithReturnValuePtr(CppBindCObject* _Nonnull cppbind_err) {
    try {
        const auto& result = cppbind::exceptions::ThrowExc::throwsWithReturnValuePtr();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TASK);
        auto value_ptr_result = const_cast<cppbind::example::Task*>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::invalid_argument& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDINVALIDARGUMENT);
        cppbind_err->ptr = new std::invalid_argument(e);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExceptions_ThrowExc_prop1(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::exceptions::ThrowExc*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->prop1();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_CppbindExceptions_ThrowExc_prop1(CppBindCObject cself, char* _Nonnull s, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxcself = static_cast<cppbind::exceptions::ThrowExc*>(cself.ptr);
    auto ctocxxs = std::string(s);
    free(s);
    try {
        ctocxxcself->setProp1(ctocxxs);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

