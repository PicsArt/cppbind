/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-08:30.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/exceptions/c_throw_exceptions.h"
#include "cxx/exceptions/exceptions.hpp"
#include "cxx/simple/task.hpp"

using namespace iegen::exceptions;

void release_ThrowExc(CObject cself) {
    delete static_cast<iegen::exceptions::ThrowExc*>(cself.ptr);
}

CObject create_ThrowExc(bool do_throw, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::exceptions::ThrowExc(do_throw);
        return {strdup("iegen::exceptions::ThrowExc"), this_object};
    }catch (const std::invalid_argument& e) {
        err->err_type = 1;
        err->err_ptr = new std::invalid_argument(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _func_ThrowExc_getByKey(CDataMap m, int key, ErrorObj* _Nonnull err){
    std::map<int, int> c_to_cxx_m;

    for (size_t _i_m = 0; _i_m < m.size; ++_i_m) {
        auto ktmp_m = reinterpret_cast<int*>(m.keys)[_i_m];
        auto vtmp_m = reinterpret_cast<int*>(m.values)[_i_m];
        
        
        c_to_cxx_m.insert({ ktmp_m, vtmp_m });
    }
  
    
  
    try {
        const auto& result = iegen::exceptions::ThrowExc::getByKey(c_to_cxx_m, key);
        
        return result;
    }catch (const std::out_of_range& e) {
        err->err_type = 1;
        err->err_ptr = new std::out_of_range(e);
    }catch (const iegen::example::SystemError& e) {
        err->err_type = 2;
        err->err_ptr = new iegen::example::SystemError(e);
    }
    catch (const std::exception& e) {
        err->err_type = 3;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

char* _Nonnull _func_ThrowExc_throwsWithReturnValueString(ErrorObj* _Nonnull err){
    try {
        const auto& result = iegen::exceptions::ThrowExc::throwsWithReturnValueString();
        auto cxx_to_c_result = strdup(result.data());
        return cxx_to_c_result;
    }catch (const std::invalid_argument& e) {
        err->err_type = 1;
        err->err_ptr = new std::invalid_argument(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

CObject _func_ThrowExc_throwsWithReturnValuePtr(ErrorObj* _Nonnull err){
    try {
        const auto& result = iegen::exceptions::ThrowExc::throwsWithReturnValuePtr();
        
        char* type_result = strdup("iegen::example::Task");
        CObject cxx_to_c_result = {type_result, const_cast<iegen::example::Task*>(result)};
        return cxx_to_c_result;
    }catch (const std::invalid_argument& e) {
        err->err_type = 1;
        err->err_ptr = new std::invalid_argument(e);
    }
    catch (const std::exception& e) {
        err->err_type = 2;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _prop_get_ThrowExc_prop(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::exceptions::ThrowExc*>(cself.ptr);
    const auto& result = c_to_cxx_cself->prop();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

void _prop_set_ThrowExc_prop(CObject cself, char* _Nonnull s){
    
    auto c_to_cxx_cself = static_cast<iegen::exceptions::ThrowExc*>(cself.ptr);
    auto c_to_cxx_s = std::string(s);
    free(s);
    c_to_cxx_cself->setProp(c_to_cxx_s);
}
