/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/extra/c_object.h"
#include "cxx/extra/object.hpp"
#include "cxx/extra/object_usage.hpp"

extern const char* CPPBIND_CPPBIND_OBJECTUSAGE;
extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_OBJECT = "cppbind::Object";

using namespace cppbind;

void release_Cppbind_Object(CppBindCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_OBJECT) == 0)
            delete static_cast<std::shared_ptr<cppbind::Object>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_OBJECTUSAGE) == 0)
            delete static_cast<std::shared_ptr<cppbind::ObjectUsage>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<cppbind::Object> recover_obj_from_Cppbind_Object(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_OBJECT) == 0)
            return *static_cast<std::shared_ptr<cppbind::Object>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_OBJECTUSAGE) == 0)
            return *static_cast<std::shared_ptr<cppbind::ObjectUsage>*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

char* _Nonnull _func_Cppbind_Object_toString(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->toString();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_Cppbind_Object_className(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->className();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

bool _func_Cppbind_Object_equals(CppBindCObject cself, CppBindCObject other, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::Object> ctocxxother;
    ctocxxother = recover_obj_from_Cppbind_Object(other);
  
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->equals(ctocxxother);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

unsigned long _func_Cppbind_Object_hash(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->hash();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

char* _Nonnull _func_Cppbind_Object_debugInfo(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->debugInfo();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

unsigned long _func_Cppbind_Object_bytesCount(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::Object> ctocxxcself;
    ctocxxcself = recover_obj_from_Cppbind_Object(cself);
    try {
        const auto& result = ctocxxcself->bytesCount();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

