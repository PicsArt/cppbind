/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/07/2022-12:05.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/extra/c_object.h"
#include "cxx/extra/object.hpp"
#include "cxx/extra/object_usage.hpp"

using namespace iegen;

void release_Object(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::Object>::value, "iegen::Object type must have virtual destructor");
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    }
}

char* _Nonnull _func_Object_toString(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->toString();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_Object_className(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->className();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

bool _func_Object_equals(IEGenCObject cself, IEGenCObject other, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxother;
    if (strcmp(other.type, "iegen::Object") == 0)
        ctocxxother = *static_cast<std::shared_ptr<iegen::Object>*>(other.ptr);
    else if (strcmp(other.type, "iegen::ObjectUsage") == 0)
        ctocxxother = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(other.ptr);
    else {
        std::cerr << "Unexpected object type: " << other.type << std::endl;
        exit(1);
    }
  
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->equals(ctocxxother);
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

unsigned long _func_Object_hash(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->hash();
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

char* _Nonnull _func_Object_debugInfo(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->debugInfo();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

unsigned long _func_Object_bytesCount(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::Object> ctocxxcself;
    if (strcmp(cself.type, "iegen::Object") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::Object>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::ObjectUsage") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::ObjectUsage>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->bytesCount();
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}
