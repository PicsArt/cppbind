/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/21/2022-14:46.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/forward_decl/c_teacher.h"
#include "cxx/forward_decl/teacher.hpp"
#include "cxx/forward_decl/student.hpp"

using namespace iegen::example;

void release_Teacher(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Teacher*>(cself.ptr);
    }
}

CObject create_Teacher(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Teacher();
        return {strdup("iegen::example::Teacher"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_Teacher_addStudent(CObject cself, CObject s, ErrorObj* _Nonnull err){
    
    std::shared_ptr<iegen::example::Student> ctocxxs;
    if (strcmp(s.type, "iegen::example::Student") == 0)
        ctocxxs = *static_cast<std::shared_ptr<iegen::example::Student>*>(s.ptr);
    else {
        std::cerr << "Unexpected object type: " << s.type << std::endl;
        exit(1);
    }
  
    
    iegen::example::Teacher* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Teacher") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Teacher*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->addStudent(ctocxxs);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CDataArray _func_Teacher_students(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Teacher* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Teacher") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Teacher*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->students();
        auto _data_cxxtocresult = new CObject [result.size()];
        CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup("iegen::example::Student");
            void* cxxtocvalue_result_ptr;
            cxxtocvalue_result_ptr = new std::shared_ptr<iegen::example::Student>(value_result);
            CObject cxxtocvalue_result = {type_value_result, cxxtocvalue_result_ptr};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataArray result{};
    return result;
}
