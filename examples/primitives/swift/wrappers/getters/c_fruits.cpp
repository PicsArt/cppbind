/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/getters/c_fruits.h"
#include "cxx/getters/fruits.hpp"

using namespace iegen::example;

void release_Fruit(void* _Nonnull cself) {
    delete static_cast<iegen::example::Fruit*>(cself);
}

unsigned int _prop_get_Fruit_type(void* _Nonnull cself){
    auto ctocxxcself = static_cast<iegen::example::Fruit*>(cself);
    const auto& result = ctocxxcself->type();
    unsigned int cxxtocresult = (unsigned int)result;
    return cxxtocresult;
}
void release_Apple(void* _Nonnull cself) {
    delete static_cast<iegen::example::Fruit*>(cself);
}

void* _Nonnull create_Apple(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Apple();
        return static_cast<iegen::example::Fruit*>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

unsigned int _prop_get_Apple_type(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::Apple*>(static_cast<iegen::example::Fruit*>(cself));
    const auto& result = ctocxxcself->type();
    unsigned int cxxtocresult = (unsigned int)result;
    return cxxtocresult;
}
void release_Pineapple(void* _Nonnull cself) {
    delete static_cast<iegen::example::Fruit*>(cself);
}

void* _Nonnull create_Pineapple(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Pineapple();
        return static_cast<iegen::example::Fruit*>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

unsigned int _prop_get_Pineapple_type(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = dynamic_cast<iegen::example::Pineapple*>(static_cast<iegen::example::Fruit*>(cself));
    const auto& result = ctocxxcself->type();
    unsigned int cxxtocresult = (unsigned int)result;
    return cxxtocresult;
}
void release_Fruits(void* _Nonnull cself) {
    delete static_cast<iegen::example::Fruits*>(cself);
}

void* _Nonnull create_Fruits(CDataArray fruits, ErrorObj* _Nonnull err){
    std::vector<Fruit *> ctocxxfruits;

    auto data_fruits = reinterpret_cast<void**>(fruits.data);

    for (size_t _i_fruits = 0; _i_fruits < fruits.size; ++_i_fruits) {
        auto& value_fruits = data_fruits[_i_fruits];
        
        auto ctocxxvalue_fruits = static_cast<iegen::example::Fruit*>(value_fruits);
        ctocxxfruits.emplace_back(ctocxxvalue_fruits);
    }
    try {
        auto this_object = new iegen::example::Fruits(ctocxxfruits);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

CDataArray _prop_get_Fruits_fruitsApple(void* _Nonnull cself){
    auto ctocxxcself = static_cast<iegen::example::Fruits*>(cself);
    const auto& result = ctocxxcself->fruits<iegen::example::Apple>();
    auto _data_cxxtocresult = new void* [result.size()];
    CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
        auto& value_result = result[_i_result];
        
        auto value_ptr_value_result = const_cast<iegen::example::Apple*>(value_result);
        auto cxxtocvalue_result = static_cast<iegen::example::Fruit*>(value_ptr_value_result);
        _data_cxxtocresult[_i_result] = cxxtocvalue_result;
    }
    return cxxtocresult;
}

CDataArray _prop_get_Fruits_fruitsPineapple(void* _Nonnull cself){
    auto ctocxxcself = static_cast<iegen::example::Fruits*>(cself);
    const auto& result = ctocxxcself->fruits<iegen::example::Pineapple>();
    auto _data_cxxtocresult = new void* [result.size()];
    CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
        auto& value_result = result[_i_result];
        
        auto value_ptr_value_result = const_cast<iegen::example::Pineapple*>(value_result);
        auto cxxtocvalue_result = static_cast<iegen::example::Fruit*>(value_ptr_value_result);
        _data_cxxtocresult[_i_result] = cxxtocvalue_result;
    }
    return cxxtocresult;
}

CDataArray _prop_get_Fruits_allFruitsApplePineapple(void* _Nonnull cself){
    auto ctocxxcself = static_cast<iegen::example::Fruits*>(cself);
    const auto& result = ctocxxcself->allFruits<iegen::example::Apple, iegen::example::Pineapple>();
    auto _data_cxxtocresult = new void* [result.size()];
    CDataArray cxxtocresult = { _data_cxxtocresult, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
        auto& value_result = result[_i_result];
        
        auto cxxtocvalue_result = const_cast<iegen::example::Fruit*>(value_result);
        _data_cxxtocresult[_i_result] = cxxtocvalue_result;
    }
    return cxxtocresult;
}

void _prop_set_Fruits_allFruitsApplePineapple(void* _Nonnull cself, CDataArray arg0){
    
    auto ctocxxcself = static_cast<iegen::example::Fruits*>(cself);
    std::vector<Fruit *> ctocxxarg0;

    auto data_arg0 = reinterpret_cast<void**>(arg0.data);

    for (size_t _i_arg0 = 0; _i_arg0 < arg0.size; ++_i_arg0) {
        auto& value_arg0 = data_arg0[_i_arg0];
        
        auto ctocxxvalue_arg0 = static_cast<iegen::example::Fruit*>(value_arg0);
        ctocxxarg0.emplace_back(ctocxxvalue_arg0);
    }
    ctocxxcself->setAllFruits<iegen::example::Apple, iegen::example::Pineapple>(ctocxxarg0);
}
