/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/getters/c_fruits.h"
#include "cxx/getters/fruits.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_FRUIT = "cppbind::example::Fruit";
const char* CPPBIND_CPPBIND_EXAMPLE_APPLE = "cppbind::example::Apple";
const char* CPPBIND_CPPBIND_EXAMPLE_PINEAPPLE = "cppbind::example::Pineapple";
const char* CPPBIND_CPPBIND_EXAMPLE_FRUITS = "cppbind::example::Fruits";

using namespace cppbind::example;

void release_CppbindExample_Fruit(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::Fruit>::value, "cppbind::example::Fruit type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_FRUIT) == 0)
            delete static_cast<cppbind::example::Fruit*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_APPLE) == 0)
            delete static_cast<cppbind::example::Apple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_PINEAPPLE) == 0)
            delete static_cast<cppbind::example::Pineapple*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Fruit* recover_obj_from_CppbindExample_Fruit(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_FRUIT) == 0)
            return static_cast<cppbind::example::Fruit*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_APPLE) == 0)
            return static_cast<cppbind::example::Apple*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_PINEAPPLE) == 0)
            return static_cast<cppbind::example::Pineapple*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

int _prop_get_CppbindExample_Fruit_type(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Fruit* ctocxxcself = recover_obj_from_CppbindExample_Fruit(cself);
    try {
        const auto& result = ctocxxcself->type();
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCObject create_CppbindExample_Apple(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Apple();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_APPLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_Apple_type(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Apple*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->type();
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCObject create_CppbindExample_Pineapple(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Pineapple();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_PINEAPPLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_Pineapple_type(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Pineapple*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->type();
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

void release_CppbindExample_Fruits(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::Fruits*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Fruits(CppBindCDataArray fruits, CppBindCObject* _Nonnull cppbind_err) {
    std::vector<Fruit *> ctocxxfruits;

    auto data_fruits = reinterpret_cast<CppBindCObject*>(fruits.data);

    for (size_t _i_fruits = 0; _i_fruits < fruits.size; ++_i_fruits) {
        auto& value_fruits = data_fruits[_i_fruits];
        
        cppbind::example::Fruit* ctocxxvalue_fruits = recover_obj_from_CppbindExample_Fruit(value_fruits);
        ctocxxfruits.emplace_back(ctocxxvalue_fruits);
    }
    try {
        auto this_object = new cppbind::example::Fruits(ctocxxfruits);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_FRUITS), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_Fruits_fruitsApple(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Fruits*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->fruits<cppbind::example::Apple>();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup(CPPBIND_CPPBIND_EXAMPLE_APPLE);
            auto value_ptr_value_result = const_cast<cppbind::example::Apple*>(value_result);
            CppBindCObject cxxtocvalue_result = {type_value_result, dynamic_cast<void*>(value_ptr_value_result)};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_Fruits_fruitsPineapple(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Fruits*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->fruits<cppbind::example::Pineapple>();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup(CPPBIND_CPPBIND_EXAMPLE_PINEAPPLE);
            auto value_ptr_value_result = const_cast<cppbind::example::Pineapple*>(value_result);
            CppBindCObject cxxtocvalue_result = {type_value_result, dynamic_cast<void*>(value_ptr_value_result)};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_Fruits_allFruitsApplePineapple(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Fruits*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->allFruits<cppbind::example::Apple, cppbind::example::Pineapple>();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = nullptr;
            const char * name_value_result = typeid(*value_result).name();
            int status = 0;
            char* demangled_value_result = abi::__cxa_demangle(name_value_result, NULL, NULL, &status);
            if (status == 0) {
                type_value_result = demangled_value_result;
            } else {
                type_value_result = strdup(CPPBIND_CPPBIND_EXAMPLE_FRUIT);
            }
            auto value_ptr_value_result = const_cast<cppbind::example::Fruit*>(value_result);
            CppBindCObject cxxtocvalue_result = {type_value_result, dynamic_cast<void*>(value_ptr_value_result)};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void _prop_set_CppbindExample_Fruits_allFruitsApplePineapple(CppBindCObject cself, CppBindCDataArray fruits, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxcself = static_cast<cppbind::example::Fruits*>(cself.ptr);
    std::vector<Fruit *> ctocxxfruits;

    auto data_fruits = reinterpret_cast<CppBindCObject*>(fruits.data);

    for (size_t _i_fruits = 0; _i_fruits < fruits.size; ++_i_fruits) {
        auto& value_fruits = data_fruits[_i_fruits];
        
        cppbind::example::Fruit* ctocxxvalue_fruits = recover_obj_from_CppbindExample_Fruit(value_fruits);
        ctocxxfruits.emplace_back(ctocxxvalue_fruits);
    }
    try {
        ctocxxcself->setAllFruits<cppbind::example::Apple, cppbind::example::Pineapple>(ctocxxfruits);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

