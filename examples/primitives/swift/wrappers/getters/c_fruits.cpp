/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 08/12/2021-08:42.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/getters/c_fruits.h"
#include "cxx/getters/fruits.hpp"

using namespace iegen::example;

void release_Fruit(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Fruit*>(static_cast<iegen::example::Fruit*>(cself));
}

unsigned int _prop_get_Fruit_type(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Fruit*>(static_cast<iegen::example::Fruit*>(cself));
    auto result = c_to_cxx_cself->type();
    unsigned int cxx_to_c_result = (unsigned int)result;
    return cxx_to_c_result;
}
void release_Apple(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Apple*>(static_cast<iegen::example::Fruit*>(cself));
}

void* _Nonnull create_Apple(){
    auto this_object = new iegen::example::Apple();
    return static_cast<iegen::example::Fruit*>(this_object);
}

unsigned int _prop_get_Apple_type(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Apple*>(static_cast<iegen::example::Fruit*>(cself));
    auto result = c_to_cxx_cself->type();
    unsigned int cxx_to_c_result = (unsigned int)result;
    return cxx_to_c_result;
}
void release_Pineapple(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Pineapple*>(static_cast<iegen::example::Fruit*>(cself));
}

void* _Nonnull create_Pineapple(){
    auto this_object = new iegen::example::Pineapple();
    return static_cast<iegen::example::Fruit*>(this_object);
}

unsigned int _prop_get_Pineapple_type(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Pineapple*>(static_cast<iegen::example::Fruit*>(cself));
    auto result = c_to_cxx_cself->type();
    unsigned int cxx_to_c_result = (unsigned int)result;
    return cxx_to_c_result;
}
void release_Fruits(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Fruits*>(static_cast<iegen::example::Fruits*>(cself));
}

void* _Nonnull create_Fruits(CDataArray fruits){
    std::vector<Fruit *> c_to_cxx_fruits;

    auto data_fruits = reinterpret_cast<void**>(fruits.data);

    for (size_t _i_fruits = 0; _i_fruits < fruits.size; ++_i_fruits) {
        auto& value_fruits = data_fruits[_i_fruits];
        
        // we might need to avoid dynamic_cast if there is no multiple inheritance
        auto c_to_cxx_value_fruits = dynamic_cast<iegen::example::Fruit*>(static_cast<iegen::example::Fruit*>(value_fruits));
        c_to_cxx_fruits.emplace_back(c_to_cxx_value_fruits);
    }
    auto this_object = new iegen::example::Fruits(c_to_cxx_fruits);
    return static_cast<iegen::example::Fruits*>(this_object);
}

CDataArray _prop_get_Fruits_fruitsApple(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Fruits*>(static_cast<iegen::example::Fruits*>(cself));
    auto result = c_to_cxx_cself->fruits<iegen::example::Apple>();
    auto _data_cxx_to_c_result = new void* [result.size()];
    CDataArray cxx_to_c_result = { _data_cxx_to_c_result, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
      auto& value_result = result[_i_result];
      auto value_ptr_value_result = const_cast<iegen::example::Apple*>(value_result);
        auto cxx_to_c_value_result = static_cast<iegen::example::Fruit*>(value_ptr_value_result);
      _data_cxx_to_c_result[_i_result] = cxx_to_c_value_result;
    }
    return cxx_to_c_result;
}

CDataArray _prop_get_Fruits_fruitsPineapple(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Fruits*>(static_cast<iegen::example::Fruits*>(cself));
    auto result = c_to_cxx_cself->fruits<iegen::example::Pineapple>();
    auto _data_cxx_to_c_result = new void* [result.size()];
    CDataArray cxx_to_c_result = { _data_cxx_to_c_result, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
      auto& value_result = result[_i_result];
      auto value_ptr_value_result = const_cast<iegen::example::Pineapple*>(value_result);
        auto cxx_to_c_value_result = static_cast<iegen::example::Fruit*>(value_ptr_value_result);
      _data_cxx_to_c_result[_i_result] = cxx_to_c_value_result;
    }
    return cxx_to_c_result;
}

CDataArray _prop_get_Fruits_allFruitsApplePineapple(void* _Nonnull cself){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Fruits*>(static_cast<iegen::example::Fruits*>(cself));
    auto result = c_to_cxx_cself->allFruits<iegen::example::Apple, iegen::example::Pineapple>();
    auto _data_cxx_to_c_result = new void* [result.size()];
    CDataArray cxx_to_c_result = { _data_cxx_to_c_result, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
      auto& value_result = result[_i_result];
      auto value_ptr_value_result = const_cast<iegen::example::Fruit*>(value_result);
        auto cxx_to_c_value_result = static_cast<iegen::example::Fruit*>(value_ptr_value_result);
      _data_cxx_to_c_result[_i_result] = cxx_to_c_value_result;
    }
    return cxx_to_c_result;
}

void _prop_set_Fruits_setAllFruitsApplePineapple(void* _Nonnull cself, CDataArray arg0){
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Fruits*>(static_cast<iegen::example::Fruits*>(cself));
    std::vector<Fruit *> c_to_cxx_arg0;

    auto data_arg0 = reinterpret_cast<void**>(arg0.data);

    for (size_t _i_arg0 = 0; _i_arg0 < arg0.size; ++_i_arg0) {
        auto& value_arg0 = data_arg0[_i_arg0];
        
        // we might need to avoid dynamic_cast if there is no multiple inheritance
        auto c_to_cxx_value_arg0 = dynamic_cast<iegen::example::Fruit*>(static_cast<iegen::example::Fruit*>(value_arg0));
        c_to_cxx_arg0.emplace_back(c_to_cxx_value_arg0);
    }
    c_to_cxx_cself->setAllFruits<iegen::example::Apple, iegen::example::Pineapple>(c_to_cxx_arg0);
}
