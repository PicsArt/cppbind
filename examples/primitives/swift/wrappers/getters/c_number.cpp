/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/26/2022-08:15.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/getters/c_number.h"
#include "cxx/getters/number.hpp"

using namespace iegen::example;

void release_NumberInt(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Number<int>*>(cself.ptr);
    }
}

CObject create_NumberInt(int n, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::Number<int>(n);
        return {strdup("iegen::example::Number<int>"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _func_NumberInt_toInt(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Number<int>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<int>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->toInt();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}
int _prop_get_NumberInt_num(CObject cself){
    iegen::example::Number<int>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<int>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->num;
    
    return result;
}
void _prop_set_NumberInt_num(CObject cself, int num){
    
    iegen::example::Number<int>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<int>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    
    ctocxxcself->num = num;
}

void release_NumberDouble(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Number<double>*>(cself.ptr);
    }
}

CObject create_NumberDouble(double n, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::Number<double>(n);
        return {strdup("iegen::example::Number<double>"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _func_NumberDouble_toInt(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Number<double>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<double>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<double>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->toInt();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}
double _prop_get_NumberDouble_num(CObject cself){
    iegen::example::Number<double>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<double>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<double>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->num;
    
    return result;
}
void _prop_set_NumberDouble_num(CObject cself, double num){
    
    iegen::example::Number<double>* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Number<double>") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Number<double>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    
    ctocxxcself->num = num;
}

