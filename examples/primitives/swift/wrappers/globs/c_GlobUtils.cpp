/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/19/2021-16:39.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/globs/c_GlobUtils.h"
#include "cxx/globs/utils.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"



char* _Nonnull _func_concat(char* _Nonnull str1, char* _Nonnull str2, ErrorObj* _Nonnull err) {
    auto c_to_cxx_str1 = std::string(str1);
    free(str1);
    auto c_to_cxx_str2 = std::string(str2);
    free(str2);
    try {
        const auto& result = ::concat(c_to_cxx_str1, c_to_cxx_str2);
        auto cxx_to_c_result = strdup(result.c_str());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result;
    return result;
}

int _func_maxInt(int arg0, int arg1, ErrorObj* _Nonnull err) {
    
    
    try {
        const auto& result = ::max<int>(arg0, arg1);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

char* _Nonnull _func_maxString(char* _Nonnull arg0, char* _Nonnull arg1, ErrorObj* _Nonnull err) {
    auto c_to_cxx_arg0 = std::string(arg0);
    free(arg0);
    auto c_to_cxx_arg1 = std::string(arg1);
    free(arg1);
    try {
        const auto& result = ::max<std::string>(c_to_cxx_arg0, c_to_cxx_arg1);
        auto cxx_to_c_result = strdup(result.c_str());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result;
    return result;
}

CDataPair _func_makePairProjectProject(void* _Nonnull arg0, void* _Nonnull arg1, ErrorObj* _Nonnull err) {
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_arg0 = dynamic_cast<iegen::example::Project*>(static_cast<iegen::example::Project*>(arg0));
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_arg1 = dynamic_cast<iegen::example::Project*>(static_cast<iegen::example::Project*>(arg1));
    try {
        const auto& result = iegen::example::makePair<iegen::example::Project, iegen::example::Project>(c_to_cxx_arg0, c_to_cxx_arg1);
        auto _first_data_cxx_to_c_result = new void*;
        auto _second_data_cxx_to_c_result = new void*;
        const auto& first_result = result.first;
        const auto& second_result = result.second;
        auto value_ptr_first_result = const_cast<iegen::example::Project*>(first_result);
        auto cxx_to_c_first_result = static_cast<iegen::example::Project*>(value_ptr_first_result);
        auto value_ptr_second_result = const_cast<iegen::example::Project*>(second_result);
        auto cxx_to_c_second_result = static_cast<iegen::example::Project*>(value_ptr_second_result);
        *_first_data_cxx_to_c_result = cxx_to_c_first_result;
        *_second_data_cxx_to_c_result = cxx_to_c_second_result;
        CDataPair cxx_to_c_result = { _first_data_cxx_to_c_result, _second_data_cxx_to_c_result };
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataPair result;
    return result;
}

CDataPair _func_makePairRootProject(void* _Nonnull arg0, void* _Nonnull arg1, ErrorObj* _Nonnull err) {
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_arg0 = dynamic_cast<iegen::example::Root*>(static_cast<iegen::example::Root*>(arg0));
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_arg1 = dynamic_cast<iegen::example::Project*>(static_cast<iegen::example::Project*>(arg1));
    try {
        const auto& result = iegen::example::makePair<iegen::example::Root, iegen::example::Project>(c_to_cxx_arg0, c_to_cxx_arg1);
        auto _first_data_cxx_to_c_result = new void*;
        auto _second_data_cxx_to_c_result = new void*;
        const auto& first_result = result.first;
        const auto& second_result = result.second;
        auto value_ptr_first_result = const_cast<iegen::example::Root*>(first_result);
        auto cxx_to_c_first_result = static_cast<iegen::example::Root*>(value_ptr_first_result);
        auto value_ptr_second_result = const_cast<iegen::example::Project*>(second_result);
        auto cxx_to_c_second_result = static_cast<iegen::example::Project*>(value_ptr_second_result);
        *_first_data_cxx_to_c_result = cxx_to_c_first_result;
        *_second_data_cxx_to_c_result = cxx_to_c_second_result;
        CDataPair cxx_to_c_result = { _first_data_cxx_to_c_result, _second_data_cxx_to_c_result };
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataPair result;
    return result;
}