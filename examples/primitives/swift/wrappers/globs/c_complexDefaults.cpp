/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/10/2022-13:26.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/globs/c_complexDefaults.h"
#include "cxx/globs/utils.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/simple/root.hpp"


IEGenCObject _func__singleComplexDefaultValue_1(IEGenCObject* _Nonnull err) {
    try {
        const auto& result = ::singleComplexDefaultValue();
        
        char* type_result = strdup("iegen::example::Task");
        auto value_ptr_result = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func__singleComplexDefaultValue(IEGenCObject task, IEGenCObject* _Nonnull err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
    try {
        const auto& result = ::singleComplexDefaultValue(ctocxxtask);
        
        char* type_result = strdup("iegen::example::Task");
        auto value_ptr_result = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func__multipleMixedDefaultValues_1(IEGenCObject* _Nonnull err) {
    try {
        const auto& result = ::multipleMixedDefaultValues();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func__multipleMixedDefaultValues_2(IEGenCObject task, int i, IEGenCObject* _Nonnull err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
    
    try {
        const auto& result = ::multipleMixedDefaultValues(ctocxxtask, i);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func__multipleMixedDefaultValues(IEGenCObject task, int i, IEGenCObject r, IEGenCObject* _Nonnull err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
    
    
    auto& ctocxxr = *static_cast<iegen::example::Root*>(r.ptr);
    try {
        const auto& result = ::multipleMixedDefaultValues(ctocxxtask, i, ctocxxr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

