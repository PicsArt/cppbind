/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/06/2022-11:00.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/hashing/c_swift_objects.h"
#include "cxx/hashing/objects.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_OBJECT1 = "cppbind::example::Object1";
const char* CPPBIND_CPPBIND_EXAMPLE_OBJECT2 = "cppbind::example::Object2";
const char* CPPBIND_CPPBIND_EXAMPLE_OBJECT3 = "cppbind::example::Object3";
const char* CPPBIND_CPPBIND_EXAMPLE_OBJECT4 = "cppbind::example::Object4";
const char* CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT1 = "cppbind::example::ExtendedObject1";
const char* CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT2 = "cppbind::example::ExtendedObject2";
const char* CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT3 = "cppbind::example::ExtendedObject3";
const char* CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT4 = "cppbind::example::ExtendedObject4";

using namespace cppbind::example;

void release_CppbindExample_Object1(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::Object1>::value, "cppbind::example::Object1 type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT1) == 0)
            delete static_cast<cppbind::example::Object1*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT1) == 0)
            delete static_cast<cppbind::example::ExtendedObject1*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Object1* recover_obj_from_CppbindExample_Object1(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT1) == 0)
            return static_cast<cppbind::example::Object1*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT1) == 0)
            return static_cast<cppbind::example::ExtendedObject1*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Object1(int value, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Object1(value);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_OBJECT1), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_Object1_value(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Object1* ctocxxcself = recover_obj_from_CppbindExample_Object1(cself);
    try {
        decltype(auto) result = ctocxxcself->value();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

unsigned long _func_CppbindExample_Object1_hash(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Object1* ctocxxcself = recover_obj_from_CppbindExample_Object1(cself);
    try {
        decltype(auto) result = ctocxxcself->hash();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

bool _func_CppbindExample_Object1_equals(CppBindCObject cself, CppBindCObject other, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Object1* ctocxxother = recover_obj_from_CppbindExample_Object1(other);

    cppbind::example::Object1* ctocxxcself = recover_obj_from_CppbindExample_Object1(cself);
    try {
        decltype(auto) result = ctocxxcself->equals(ctocxxother);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

char* _Nonnull _func_CppbindExample_Object1_toString(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Object1* ctocxxcself = recover_obj_from_CppbindExample_Object1(cself);
    try {
        decltype(auto) result = ctocxxcself->toString();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Object2(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::Object2>::value, "cppbind::example::Object2 type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT2) == 0)
            delete static_cast<cppbind::example::Object2*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT2) == 0)
            delete static_cast<cppbind::example::ExtendedObject2*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Object2* recover_obj_from_CppbindExample_Object2(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT2) == 0)
            return static_cast<cppbind::example::Object2*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT2) == 0)
            return static_cast<cppbind::example::ExtendedObject2*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Object2(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Object2();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_OBJECT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_Object3(CppBindCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT3) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Object3>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT3) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::ExtendedObject3>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<cppbind::example::Object3> recover_obj_from_CppbindExample_Object3(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT3) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Object3>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT3) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::ExtendedObject3>*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Object3(int value, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Object3(value);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_OBJECT3), new std::shared_ptr<cppbind::example::Object3>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_Object3_value(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::Object3> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Object3(cself);
    try {
        decltype(auto) result = ctocxxcself->value();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

unsigned long _func_CppbindExample_Object3_hash(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::Object3> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Object3(cself);
    try {
        decltype(auto) result = ctocxxcself->hash();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

bool _func_CppbindExample_Object3_equals(CppBindCObject cself, CppBindCObject other, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::Object3> ctocxxother;
    ctocxxother = recover_obj_from_CppbindExample_Object3(other);

    std::shared_ptr<cppbind::example::Object3> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Object3(cself);
    try {
        decltype(auto) result = ctocxxcself->equals(ctocxxother);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

char* _Nonnull _func_CppbindExample_Object3_toString(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::Object3> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Object3(cself);
    try {
        decltype(auto) result = ctocxxcself->toString();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Object4(CppBindCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT4) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Object4>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT4) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::ExtendedObject4>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<cppbind::example::Object4> recover_obj_from_CppbindExample_Object4(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_OBJECT4) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Object4>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT4) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::ExtendedObject4>*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Object4(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Object4();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_OBJECT4), new std::shared_ptr<cppbind::example::Object4>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ExtendedObject1(int value, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::ExtendedObject1(value);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT1), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

unsigned long _func_CppbindExample_ExtendedObject1_hash(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::ExtendedObject1*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->hash();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    unsigned long result {};
    return result;
}

CppBindCObject create_CppbindExample_ExtendedObject2(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::ExtendedObject2();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ExtendedObject3(int value, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::ExtendedObject3(value);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT3), new std::shared_ptr<cppbind::example::ExtendedObject3>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ExtendedObject4(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::ExtendedObject4();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_EXTENDEDOBJECT4), new std::shared_ptr<cppbind::example::ExtendedObject4>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

