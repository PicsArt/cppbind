/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/05/2022-13:29.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_animal.h"
#include "cxx/inheritance/animal.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_ANIMAL = "iegen::example::Animal";
const char* IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL = "iegen::example::TerrestrialAnimal";
const char* IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL = "iegen::example::AquaticAnimal";
const char* IEGEN_IEGEN_EXAMPLE_FROG = "iegen::example::Frog";
const char* IEGEN_IEGEN_EXAMPLE_LITTLEFROG = "iegen::example::LittleFrog";
const char* IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE = "iegen::example::AnimalUsage";

using namespace iegen::example;

void release_IegenExample_AnimalImpl(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::Animal>::value, "iegen::example::Animal type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_ANIMAL) == 0)
            delete static_cast<iegen::example::Animal*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            delete static_cast<iegen::example::LittleFrog*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            delete static_cast<iegen::example::Frog*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            delete static_cast<iegen::example::AquaticAnimal*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL) == 0)
            delete static_cast<iegen::example::TerrestrialAnimal*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::Animal* recover_obj_from_IegenExample_Animal(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_ANIMAL) == 0)
            return static_cast<iegen::example::Animal*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            return static_cast<iegen::example::AquaticAnimal*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL) == 0)
            return static_cast<iegen::example::TerrestrialAnimal*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_Animal(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::Animal();
        return {strdup(IEGEN_IEGEN_EXAMPLE_ANIMAL), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_Animal_typeName(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    iegen::example::Animal* ctocxxcself = recover_obj_from_IegenExample_Animal(cself);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

bool _func_IegenExample_Animal_equals(IEGenCObject cself, IEGenCObject a, IEGenCObject* _Nonnull iegen_err) {
    
    iegen::example::Animal* ctocxxa = recover_obj_from_IegenExample_Animal(a);
  
    iegen::example::Animal* ctocxxcself = recover_obj_from_IegenExample_Animal(cself);
    try {
        const auto& result = ctocxxcself->equals(ctocxxa);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

void release_IegenExample_TerrestrialAnimalImpl(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::TerrestrialAnimal>::value, "iegen::example::TerrestrialAnimal type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL) == 0)
            delete static_cast<iegen::example::TerrestrialAnimal*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            delete static_cast<iegen::example::LittleFrog*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            delete static_cast<iegen::example::Frog*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::TerrestrialAnimal* recover_obj_from_IegenExample_TerrestrialAnimal(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL) == 0)
            return static_cast<iegen::example::TerrestrialAnimal*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_TerrestrialAnimal(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TerrestrialAnimal();
        return {strdup(IEGEN_IEGEN_EXAMPLE_TERRESTRIALANIMAL), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_TerrestrialAnimal_typeName(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    iegen::example::TerrestrialAnimal* ctocxxcself = recover_obj_from_IegenExample_TerrestrialAnimal(cself);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_IegenExample_AquaticAnimal(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::AquaticAnimal>::value, "iegen::example::AquaticAnimal type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            delete static_cast<iegen::example::AquaticAnimal*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            delete static_cast<iegen::example::LittleFrog*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            delete static_cast<iegen::example::Frog*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::AquaticAnimal* recover_obj_from_IegenExample_AquaticAnimal(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL) == 0)
            return static_cast<iegen::example::AquaticAnimal*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_LITTLEFROG) == 0)
            return static_cast<iegen::example::LittleFrog*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_AquaticAnimal(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::AquaticAnimal();
        return {strdup(IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_AquaticAnimal_typeName(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    iegen::example::AquaticAnimal* ctocxxcself = recover_obj_from_IegenExample_AquaticAnimal(cself);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

iegen::example::Frog* recover_obj_from_IegenExample_Frog(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_FROG) == 0)
            return static_cast<iegen::example::Frog*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_Frog(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::Frog();
        return {strdup(IEGEN_IEGEN_EXAMPLE_FROG), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_Frog_typeName(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::Frog*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject create_IegenExample_LittleFrog(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::LittleFrog();
        return {strdup(IEGEN_IEGEN_EXAMPLE_LITTLEFROG), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void release_IegenExample_AnimalUsage(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::AnimalUsage*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_AnimalUsage(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::AnimalUsage();
        return {strdup(IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_AnimalUsage_1(IEGenCObject little_frog, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxlittle_frog = *static_cast<iegen::example::LittleFrog*>(little_frog.ptr);
    try {
        auto this_object = new iegen::example::AnimalUsage(ctocxxlittle_frog);
        return {strdup(IEGEN_IEGEN_EXAMPLE_ANIMALUSAGE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_AnimalUsage_getAnimalTypeName(IEGenCObject animal, IEGenCObject* _Nonnull iegen_err) {
    
    iegen::example::Animal* ctocxxanimal_ptr = recover_obj_from_IegenExample_Animal(animal);
    auto& ctocxxanimal = *ctocxxanimal_ptr;
  
    try {
        const auto& result = iegen::example::AnimalUsage::getAnimalTypeName(ctocxxanimal);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_IegenExample_AnimalUsage_getAquaticAnimalTypeName(IEGenCObject animal, IEGenCObject* _Nonnull iegen_err) {
    
    iegen::example::AquaticAnimal* ctocxxanimal_ptr = recover_obj_from_IegenExample_AquaticAnimal(animal);
    auto& ctocxxanimal = *ctocxxanimal_ptr;
  
    try {
        const auto& result = iegen::example::AnimalUsage::getAquaticAnimalTypeName(ctocxxanimal);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject _func_IegenExample_AnimalUsage_getAnimal(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::AnimalUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getAnimal();
        
        char* type_result = nullptr;
        const char * name_result = typeid(result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(IEGEN_IEGEN_EXAMPLE_ANIMAL);
        }
        auto value_ptr_result = const_cast<iegen::example::Animal*>(&result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_AnimalUsage_getAquaticAnimal(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::AnimalUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getAquaticAnimal();
        
        char* type_result = nullptr;
        const char * name_result = typeid(result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(IEGEN_IEGEN_EXAMPLE_AQUATICANIMAL);
        }
        auto value_ptr_result = const_cast<iegen::example::AquaticAnimal*>(&result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_AnimalUsage_getFrog(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::AnimalUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getFrog();
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_FROG);
        auto value_ptr_result = const_cast<iegen::example::Frog*>(&result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_AnimalUsage_getLittleFrog(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::AnimalUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getLittleFrog();
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_FROG);
        auto value_ptr_result = const_cast<iegen::example::Frog*>(&result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

