/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/01/2021-14:50.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/inheritance/c_animal.h"
#include "cxx/inheritance/animal.hpp"

using namespace iegen::example;

void release_Mammal(void* _Nonnull cself) {
    delete static_cast<iegen::example::Mammal*>(cself);
}

void* _Nonnull create_Mammal(){
    auto this_object = new iegen::example::Mammal();
    return this_object;
}

char* _Nonnull _func_Mammal_soundType(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_cself = static_cast<iegen::example::Mammal*>(cself);
    try {
        const auto& result = c_to_cxx_cself->soundType();
        auto cxx_to_c_result = strdup(result.data());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result;
    return result;
}
void release_Dog(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Dog*>(static_cast<iegen::example::Mammal*>(cself));
}

void* _Nonnull create_Dog(){
    auto this_object = new iegen::example::Dog();
    return static_cast<iegen::example::Mammal*>(this_object);
}

char* _Nonnull _func_Dog_soundType(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Dog*>(static_cast<iegen::example::Mammal*>(cself));
    try {
        const auto& result = c_to_cxx_cself->soundType();
        auto cxx_to_c_result = strdup(result.data());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result;
    return result;
}