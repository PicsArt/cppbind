/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/21/2022-10:28.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_bicycle.h"
#include "cxx/inheritance/bicycle.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_BICYCLE = "iegen::example::Bicycle";

using namespace iegen::example;

IEGenCObject create_IegenExample_Bicycle(int number_of_seats, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::Bicycle(number_of_seats);
        return {strdup(IEGEN_IEGEN_EXAMPLE_BICYCLE), new std::shared_ptr<iegen::example::Bicycle>(this_object)};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_Bicycle_type(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    std::shared_ptr<iegen::example::Bicycle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Bicycle>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->type();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

