/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/16/2022-10:13.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_datetime.h"
#include "cxx/inheritance/time.hpp"
#include "cxx/inheritance/datetime.hpp"

using namespace iegen::example;

void release_IegenExample_TimeImpl(IEGenCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, "iegen::example::Time") == 0)
            delete static_cast<std::shared_ptr<iegen::example::Time>*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::DateTime") == 0)
            delete static_cast<std::shared_ptr<iegen::example::DateTime>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<iegen::example::Time> downcast_IegenExample_Time(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, "iegen::example::Time") == 0)
            return *static_cast<std::shared_ptr<iegen::example::Time>*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::DateTime") == 0)
            return *static_cast<std::shared_ptr<iegen::example::DateTime>*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_Time(int h, int m, int s, IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::Time(h, m, s);
        return {strdup("iegen::example::Time"), new std::shared_ptr<iegen::example::Time>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_Time_value(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::Time> ctocxxcself;
    ctocxxcself = downcast_IegenExample_Time(cself);
    try {
        const auto& result = ctocxxcself->value();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _prop_get_IegenExample_Time_time(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::Time> ctocxxcself;
    ctocxxcself = downcast_IegenExample_Time(cself);
    try {
        const auto& result = ctocxxcself->time();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject create_IegenExample_DateTime(int d, int mo, int y, int h, int mi, int s, IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::DateTime(d, mo, y, h, mi, s);
        return {strdup("iegen::example::DateTime"), new std::shared_ptr<iegen::example::DateTime>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_DateTime_value(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::DateTime> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::DateTime>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->value();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _prop_get_IegenExample_DateTime_datetime(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::DateTime> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::DateTime>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->datetime();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

