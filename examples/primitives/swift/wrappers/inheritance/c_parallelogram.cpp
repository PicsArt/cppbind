/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/23/2022-10:44.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_parallelogram.h"
#include "cxx/inheritance/parallelogram.hpp"
#include "cxx/inheritance/rectangle.hpp"
#include "cxx/inheritance/rhombus.hpp"
#include "cxx/inheritance/square.hpp"

using namespace iegen::example;

void release_IegenExample_ParallelogramImpl(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::Parallelogram>::value, "iegen::example::Parallelogram type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, "iegen::example::Parallelogram") == 0)
            delete static_cast<iegen::example::Parallelogram*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Rectangle") == 0)
            delete static_cast<iegen::example::Rectangle*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Rhombus") == 0)
            delete static_cast<iegen::example::Rhombus*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Square") == 0)
            delete static_cast<iegen::example::Square*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::Parallelogram* downcast_IegenExample_Parallelogram(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, "iegen::example::Parallelogram") == 0)
            return static_cast<iegen::example::Parallelogram*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Rectangle") == 0)
            return static_cast<iegen::example::Rectangle*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Rhombus") == 0)
            return static_cast<iegen::example::Rhombus*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Square") == 0)
            return static_cast<iegen::example::Square*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

double _prop_get_IegenExample_Parallelogram_area(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    iegen::example::Parallelogram* ctocxxcself = downcast_IegenExample_Parallelogram(cself);
    try {
        const auto& result = ctocxxcself->area();
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

double _func_IegenExample_Parallelogram_perimeter(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    iegen::example::Parallelogram* ctocxxcself = downcast_IegenExample_Parallelogram(cself);
    try {
        const auto& result = ctocxxcself->perimeter();
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

bool _func_IegenExample_Parallelogram_equals(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull err) {
    
    iegen::example::Parallelogram* ctocxxp = downcast_IegenExample_Parallelogram(p);
  
    iegen::example::Parallelogram* ctocxxcself = downcast_IegenExample_Parallelogram(cself);
    try {
        const auto& result = ctocxxcself->equals(ctocxxp);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

