/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/07/2022-09:08.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_swift_doctor.h"
#include "cxx/inheritance/doctor.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_DOCTOR = "cppbind::example::Doctor";
const char* CPPBIND_CPPBIND_EXAMPLE_SURGEON = "cppbind::example::Surgeon";
const char* CPPBIND_CPPBIND_EXAMPLE_GOODVIRTUALDOCTOR = "cppbind::example::GoodVirtualDoctor";
const char* CPPBIND_CPPBIND_EXAMPLE_GOODDOCTOR = "cppbind::example::GoodDoctor";
const char* CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR = "cppbind::example::GoodYoungDoctor";
const char* CPPBIND_CPPBIND_EXAMPLE_GOODOLDDOCTOR = "cppbind::example::GoodOldDoctor";
const char* CPPBIND_CPPBIND_EXAMPLE_DOCTORINFO = "cppbind::example::DoctorInfo";

using namespace cppbind::example;

void release_CppbindExample_Doctor(CppBindCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_DOCTOR) == 0)
            delete static_cast<cppbind::example::Doctor*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_SURGEON) == 0)
            delete static_cast<cppbind::example::Surgeon*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Doctor* recover_obj_from_CppbindExample_Doctor(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_DOCTOR) == 0)
            return static_cast<cppbind::example::Doctor*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_SURGEON) == 0)
            return static_cast<cppbind::example::Surgeon*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Doctor(char* _Nonnull doctor_name, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxdoctor_name = std::string(doctor_name);
    free(doctor_name);
    try {
        auto this_object = new cppbind::example::Doctor(ctocxxdoctor_name);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_DOCTOR), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_Surgeon(char* _Nonnull surgeon_name, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxsurgeon_name = std::string(surgeon_name);
    free(surgeon_name);
    try {
        auto this_object = new cppbind::example::Surgeon(ctocxxsurgeon_name);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SURGEON), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_GoodVirtualDoctorImpl(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::GoodVirtualDoctor>::value, "cppbind::example::GoodVirtualDoctor type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_GOODVIRTUALDOCTOR) == 0)
            delete static_cast<cppbind::example::GoodVirtualDoctor*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR) == 0)
            delete static_cast<cppbind::example::GoodYoungDoctor*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::GoodVirtualDoctor* recover_obj_from_CppbindExample_GoodVirtualDoctor(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_GOODVIRTUALDOCTOR) == 0)
            return static_cast<cppbind::example::GoodVirtualDoctor*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR) == 0)
            return static_cast<cppbind::example::GoodYoungDoctor*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

void release_CppbindExample_GoodDoctor(CppBindCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_GOODDOCTOR) == 0)
            delete static_cast<cppbind::example::GoodDoctor*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_GOODOLDDOCTOR) == 0)
            delete static_cast<cppbind::example::GoodOldDoctor*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR) == 0)
            delete static_cast<cppbind::example::GoodYoungDoctor*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::GoodDoctor* recover_obj_from_CppbindExample_GoodDoctor(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_GOODDOCTOR) == 0)
            return static_cast<cppbind::example::GoodDoctor*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_GOODOLDDOCTOR) == 0)
            return static_cast<cppbind::example::GoodOldDoctor*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR) == 0)
            return static_cast<cppbind::example::GoodYoungDoctor*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_GoodDoctor(char* _Nonnull doctor_name, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxdoctor_name = std::string(doctor_name);
    free(doctor_name);
    try {
        auto this_object = new cppbind::example::GoodDoctor(ctocxxdoctor_name);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_GOODDOCTOR), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_GoodYoungDoctor(char* _Nonnull doctor_name, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxdoctor_name = std::string(doctor_name);
    free(doctor_name);
    try {
        auto this_object = new cppbind::example::GoodYoungDoctor(ctocxxdoctor_name);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_GOODYOUNGDOCTOR), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_GoodOldDoctor(char* _Nonnull doctor_name, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxdoctor_name = std::string(doctor_name);
    free(doctor_name);
    try {
        auto this_object = new cppbind::example::GoodOldDoctor(ctocxxdoctor_name);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_GOODOLDDOCTOR), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_DoctorInfo(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_DoctorInfo(CppBindCObject s, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxs = static_cast<cppbind::example::Surgeon*>(s.ptr);
    try {
        auto this_object = new cppbind::example::DoctorInfo(ctocxxs);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_DOCTORINFO), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_DoctorInfo1(CppBindCObject d, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxd = static_cast<cppbind::example::GoodYoungDoctor*>(d.ptr);
    try {
        auto this_object = new cppbind::example::DoctorInfo(ctocxxd);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_DOCTORINFO), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_DoctorInfo_getDoctorName(CppBindCObject cself, CppBindCObject d, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Doctor* ctocxxd = recover_obj_from_CppbindExample_Doctor(d);

    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getDoctorName(ctocxxd);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_CppbindExample_DoctorInfo_getSurgeonName(CppBindCObject cself, CppBindCObject s, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxs = static_cast<cppbind::example::Surgeon*>(s.ptr);

    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSurgeonName(ctocxxs);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject _func_CppbindExample_DoctorInfo_getDoctor(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getDoctor();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_DOCTOR);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_DoctorInfo_getGoodDoctor(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getGoodDoctor();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_GOODDOCTOR);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_DoctorInfo_getGoodVirtualDoctor(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getGoodVirtualDoctor();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_GOODVIRTUALDOCTOR);
        }
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_DoctorInfo_getGoodDoctorName(CppBindCObject cself, CppBindCObject d, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::GoodDoctor* ctocxxd = recover_obj_from_CppbindExample_GoodDoctor(d);

    auto ctocxxcself = static_cast<cppbind::example::DoctorInfo*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getGoodDoctorName(ctocxxd);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

