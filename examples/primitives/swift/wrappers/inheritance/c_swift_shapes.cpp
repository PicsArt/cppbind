/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/17/2022-16:24.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_swift_shapes.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/inheritance/shapes.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_SHAPE = "cppbind::example::Shape";
const char* CPPBIND_CPPBIND_EXAMPLE_CIRCLE = "cppbind::example::Circle";
const char* CPPBIND_CPPBIND_EXAMPLE_REGULARTRIANGLE = "cppbind::example::RegularTriangle";

void release_CppbindExample_Shape(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_SHAPE) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Shape>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_CIRCLE) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Circle>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<cppbind::example::Shape> recover_obj_from_CppbindExample_Shape(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_SHAPE) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Shape>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_CIRCLE) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Circle>*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

double _func_CppbindExample_Shape_area(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::Shape> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Shape(cself);
    try {
        decltype(auto) result = ctocxxcself->area();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

CppBindCObject _func_CppbindExample_Shape_thisObject(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::Shape> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_Shape(cself);
    try {
        decltype(auto) result = ctocxxcself->thisObject();
        std::shared_ptr<cppbind::example::Shape> result_shared_ptr = result.shared_from_this();
        char* type_result_shared_ptr = nullptr;
        void* cxxtocresult_ptr = nullptr;

        auto& arg_pointee_result_shared_ptr = *result_shared_ptr.get();
        const char * name_result_shared_ptr = typeid(arg_pointee_result_shared_ptr).name();
        int status = 0;
        char* demangled_result_shared_ptr = abi::__cxa_demangle(name_result_shared_ptr, NULL, NULL, &status);
        if (status == 0) {
            type_result_shared_ptr = demangled_result_shared_ptr;
        } else {
            type_result_shared_ptr = strdup(CPPBIND_CPPBIND_EXAMPLE_SHAPE);
        }
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result_shared_ptr));
        CppBindCObject cxxtocresult = {type_result_shared_ptr, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_Circle_create(double r, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;

    try {
        decltype(auto) result = cppbind::example::Circle::create(r);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_CIRCLE);
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result));
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

double _func_CppbindExample_Circle_area(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::Circle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::Circle>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->area();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

CppBindCObject _func_CppbindExample_Circle_incrementRadius(CppBindCObject cself, double value, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;

    std::shared_ptr<cppbind::example::Circle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::Circle>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->incrementRadius(value);
        std::shared_ptr<cppbind::example::Circle> result_shared_ptr = std::dynamic_pointer_cast<cppbind::example::Circle>(result->shared_from_this());
        char* type_result_shared_ptr = strdup(CPPBIND_CPPBIND_EXAMPLE_CIRCLE);
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result_shared_ptr));
        CppBindCObject cxxtocresult = {type_result_shared_ptr, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_RegularTriangle(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::RegularTriangle>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_RegularTriangle(double side, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::RegularTriangle(side);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_REGULARTRIANGLE), new std::shared_ptr<cppbind::example::RegularTriangle>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

double _func_CppbindExample_RegularTriangle_area(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::RegularTriangle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::RegularTriangle>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->area();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

CppBindCObject _func_CppbindExample_RegularTriangle_incrementSide(CppBindCObject cself, double value, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;

    std::shared_ptr<cppbind::example::RegularTriangle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::RegularTriangle>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->incrementSide(value);
        std::shared_ptr<cppbind::example::RegularTriangle> result_shared_ptr = std::dynamic_pointer_cast<cppbind::example::RegularTriangle>(result.shared_from_this());
        char* type_result_shared_ptr = strdup(CPPBIND_CPPBIND_EXAMPLE_REGULARTRIANGLE);
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result_shared_ptr));
        CppBindCObject cxxtocresult = {type_result_shared_ptr, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_RegularTriangle_multiplySide(CppBindCObject cself, double value, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;

    std::shared_ptr<cppbind::example::RegularTriangle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::RegularTriangle>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->multiplySide(value);
        
        std::shared_ptr<cppbind::example::RegularTriangle> result_shared_ptr = std::make_shared<cppbind::example::RegularTriangle>(result);

        char* type_result_shared_ptr = strdup(CPPBIND_CPPBIND_EXAMPLE_REGULARTRIANGLE);
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result_shared_ptr));
        CppBindCObject cxxtocresult = {type_result_shared_ptr, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

