/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 08/17/2022-09:29.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_swift_symbol.h"
#include "cxx/inheritance/symbol.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_SIGN = "cppbind::example::Sign";
const char* CPPBIND_CPPBIND_EXAMPLE_TEXT = "cppbind::example::Text";
const char* CPPBIND_CPPBIND_EXAMPLE_DIGIT = "cppbind::example::Digit";
const char* CPPBIND_CPPBIND_EXAMPLE_SYMBOLUSAGE = "cppbind::example::SymbolUsage";

using namespace cppbind::example;

void release_CppbindExample_SignImpl(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::Sign>::value, "cppbind::example::Sign type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_SIGN) == 0)
            delete static_cast<cppbind::example::Sign*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_DIGIT) == 0)
            delete static_cast<cppbind::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Sign* recover_obj_from_CppbindExample_Sign(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_SIGN) == 0)
            return static_cast<cppbind::example::Sign*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_DIGIT) == 0)
            return static_cast<cppbind::example::Digit*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Sign(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Sign();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SIGN), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_Sign_typeName(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Sign* ctocxxcself = recover_obj_from_CppbindExample_Sign(cself);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Text(CppBindCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<cppbind::example::Text>::value, "cppbind::example::Text type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TEXT) == 0)
            delete static_cast<cppbind::example::Text*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_DIGIT) == 0)
            delete static_cast<cppbind::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Text* recover_obj_from_CppbindExample_Text(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TEXT) == 0)
            return static_cast<cppbind::example::Text*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_DIGIT) == 0)
            return static_cast<cppbind::example::Digit*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_Text(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Text();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TEXT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_Text_typeName(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    cppbind::example::Text* ctocxxcself = recover_obj_from_CppbindExample_Text(cself);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject create_CppbindExample_Digit(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::Digit();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_DIGIT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_Digit_typeName(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Digit*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_SymbolUsage(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_SymbolUsage(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::SymbolUsage();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SYMBOLUSAGE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_SymbolUsage1(CppBindCObject d, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxd = static_cast<cppbind::example::Digit*>(d.ptr);
    try {
        auto this_object = new cppbind::example::SymbolUsage(ctocxxd);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SYMBOLUSAGE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_SymbolUsage_getTextType(CppBindCObject cself, CppBindCObject t, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Text* ctocxxt = recover_obj_from_CppbindExample_Text(t);

    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextType(ctocxxt);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_CppbindExample_SymbolUsage_getSignType(CppBindCObject cself, CppBindCObject s, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Sign* ctocxxs = recover_obj_from_CppbindExample_Sign(s);

    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignType(ctocxxs);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

int _func_CppbindExample_SymbolUsage_getTextId(CppBindCObject cself, CppBindCObject t, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Text* ctocxxt = recover_obj_from_CppbindExample_Text(t);

    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextId(ctocxxt);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_CppbindExample_SymbolUsage_getSignId(CppBindCObject cself, CppBindCObject s, CppBindCObject* _Nonnull cppbind_err) {
    
    cppbind::example::Sign* ctocxxs = recover_obj_from_CppbindExample_Sign(s);

    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignId(ctocxxs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCObject _func_CppbindExample_SymbolUsage_getTextPtr(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TEXT);
        }
        auto value_ptr_result = const_cast<cppbind::example::Text*>(result);
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_SymbolUsage_getSignPtr(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SIGN);
        }
        auto value_ptr_result = const_cast<cppbind::example::Sign*>(result);
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

