/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/14/2022-08:55.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/inheritance/c_symbol.h"
#include "cxx/inheritance/symbol.hpp"

using namespace iegen::example;

//void release_SymbolImpl(CObject cself, bool owner){
//    delete cself.type;
//    if (owner) {
//        delete static_cast<iegen::example::Symbol*>(cself.ptr);
//    }
//}
//
//CObject create_Symbol(ErrorObj* _Nonnull err){
//    try {
//        auto this_object = new iegen::example::Symbol();
//        return {strdup("iegen::example::Symbol"), this_object};
//    }
//    catch (const std::exception& e) {
//        err->err_type = 1;
//        err->err_ptr = new std::exception(e);
//    }
//    catch (...) {
//        err->err_type = -1;
//    }
//    CObject result{};
//    return result;
//}
//
//char* _Nonnull _func_Symbol_typeName(CObject cself, ErrorObj* _Nonnull err){
//
//    auto ctocxxcself = static_cast<iegen::example::Symbol*>(cself.ptr);
//    try {
//        const auto& result = ctocxxcself->typeName();
//        auto cxxtocresult = strdup(result.data());
//        return cxxtocresult;
//    }
//    catch (const std::exception& e) {
//        err->err_type = 1;
//        err->err_ptr = new std::exception(e);
//    }
//    catch (...) {
//        err->err_type = -1;
//    }
//    char* result{};
//    return result;
//}
void release_NumberImpl(CObject cself, bool owner){
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Number*>(cself.ptr);
    }
}

CObject create_Number(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Number();
        return {strdup("iegen::example::Number"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

    char* _Nonnull _func_Number_typeName(CObject cself, ErrorObj* _Nonnull err){

    // we might need to avoid dynamic_cast if there is no multiple inheritance
    iegen::example::Number* ctocxxcself;
    if (strcmp(cself.type, "iegen::example::Digit") == 0)
        ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::example::Number") == 0)
        ctocxxcself = static_cast<iegen::example::Number*>(cself.ptr);
    else {
       std::cerr << "Unexpected object type: " << cself.type << std::endl;
       exit(1);
    }

    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_Text(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Text*>(cself.ptr);
    }
}

CObject create_Text(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Text();
        return {strdup("iegen::example::Text"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_Text_typeName(CObject cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    iegen::example::Text* ctocxxcself;

    if (strcmp(cself.type, "iegen::example::Digit") == 0)
        ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::example::Text") == 0)
        ctocxxcself = static_cast<iegen::example::Text*>(cself.ptr);
    else {
       std::cerr << "Unexpected object type: " << cself.type << std::endl;
       exit(1);
    }

    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_Digit(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Digit*>(cself.ptr);
    }
}

CObject create_Digit(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Digit();
        return {strdup("iegen::example::Digit"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_Digit_typeName(CObject cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_SymbolUsage(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    }
}

CObject create_SymbolUsage(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::SymbolUsage();
        return {strdup("iegen::example::SymbolUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject create_SymbolUsage_1(CObject d, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto ctocxxd = static_cast<iegen::example::Digit*>(d.ptr);
    try {
        auto this_object = new iegen::example::SymbolUsage(ctocxxd);
        return {strdup("iegen::example::SymbolUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_SymbolUsage_getTextType(CObject cself, CObject t, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    iegen::example::Text* ctocxxt;

    if (strcmp(t.type, "iegen::example::Digit") == 0)
        ctocxxt = static_cast<iegen::example::Digit*>(t.ptr);
    else if (strcmp(t.type, "iegen::example::Text") == 0)
        ctocxxt = static_cast<iegen::example::Text*>(t.ptr);
    else {
       std::cerr << "Unexpected object type: " << t.type << std::endl;
       exit(1);
    }

    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextType(ctocxxt);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

char* _Nonnull _func_SymbolUsage_getNumberType(CObject cself, CObject n, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    iegen::example::Number* ctocxxn;

    if (strcmp(n.type, "iegen::example::Digit") == 0)
        ctocxxn = static_cast<iegen::example::Digit*>(n.ptr);
    else if (strcmp(n.type, "iegen::example::Number") == 0)
        ctocxxn = static_cast<iegen::example::Number*>(n.ptr);
    else {
       std::cerr << "Unexpected object type: " << n.type << std::endl;
       exit(1);
    }

    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getNumberType(ctocxxn);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

CObject _func_SymbolUsage_getTextPtr(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Text");
        }
        auto value_ptr_result = const_cast<iegen::example::Text*>(result);
        CObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_SymbolUsage_getNumberPtr(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getNumberPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Number");
        }
        auto value_ptr_result = const_cast<iegen::example::Number*>(result);
        CObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
