/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/04/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_symbol.h"
#include "cxx/inheritance/symbol.hpp"

using namespace iegen::example;

void release_SignImpl(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::Sign>::value, "iegen::example::Sign type must have virtual destructor");
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Sign*>(cself.ptr);
    }
}

IEGenCObject create_Sign(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::Sign();
        return {strdup("iegen::example::Sign"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_Sign_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    iegen::example::Sign* ctocxxcself = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Sign") == 0)
            ctocxxcself = static_cast<iegen::example::Sign*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Digit") == 0)
            ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_Text(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::Text>::value, "iegen::example::Text type must have virtual destructor");
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Text*>(cself.ptr);
    }
}

IEGenCObject create_Text(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::Text();
        return {strdup("iegen::example::Text"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_Text_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    iegen::example::Text* ctocxxcself = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Text") == 0)
            ctocxxcself = static_cast<iegen::example::Text*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Digit") == 0)
            ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject create_Digit(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::Digit();
        return {strdup("iegen::example::Digit"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_Digit_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::example::Digit*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_SymbolUsage(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    }
}

IEGenCObject create_SymbolUsage(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::SymbolUsage();
        return {strdup("iegen::example::SymbolUsage"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_SymbolUsage_1(IEGenCObject d, IEGenCObject* _Nonnull err) {
    
    auto ctocxxd = static_cast<iegen::example::Digit*>(d.ptr);
    try {
        auto this_object = new iegen::example::SymbolUsage(ctocxxd);
        return {strdup("iegen::example::SymbolUsage"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_SymbolUsage_getTextType(IEGenCObject cself, IEGenCObject t, IEGenCObject* _Nonnull err) {
    iegen::example::Text* ctocxxt = nullptr;
    if (t.ptr) {
        if (strcmp(t.type, "iegen::example::Text") == 0)
            ctocxxt = static_cast<iegen::example::Text*>(t.ptr);
        else if (strcmp(t.type, "iegen::example::Digit") == 0)
            ctocxxt = static_cast<iegen::example::Digit*>(t.ptr);
        else {
            std::cerr << "Unexpected object type: " << t.type << std::endl;
            exit(1);
        }
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextType(ctocxxt);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_SymbolUsage_getSignType(IEGenCObject cself, IEGenCObject s, IEGenCObject* _Nonnull err) {
    iegen::example::Sign* ctocxxs = nullptr;
    if (s.ptr) {
        if (strcmp(s.type, "iegen::example::Sign") == 0)
            ctocxxs = static_cast<iegen::example::Sign*>(s.ptr);
        else if (strcmp(s.type, "iegen::example::Digit") == 0)
            ctocxxs = static_cast<iegen::example::Digit*>(s.ptr);
        else {
            std::cerr << "Unexpected object type: " << s.type << std::endl;
            exit(1);
        }
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignType(ctocxxs);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

int _func_SymbolUsage_getTextId(IEGenCObject cself, IEGenCObject t, IEGenCObject* _Nonnull err) {
    iegen::example::Text* ctocxxt = nullptr;
    if (t.ptr) {
        if (strcmp(t.type, "iegen::example::Text") == 0)
            ctocxxt = static_cast<iegen::example::Text*>(t.ptr);
        else if (strcmp(t.type, "iegen::example::Digit") == 0)
            ctocxxt = static_cast<iegen::example::Digit*>(t.ptr);
        else {
            std::cerr << "Unexpected object type: " << t.type << std::endl;
            exit(1);
        }
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextId(ctocxxt);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_SymbolUsage_getSignId(IEGenCObject cself, IEGenCObject s, IEGenCObject* _Nonnull err) {
    iegen::example::Sign* ctocxxs = nullptr;
    if (s.ptr) {
        if (strcmp(s.type, "iegen::example::Sign") == 0)
            ctocxxs = static_cast<iegen::example::Sign*>(s.ptr);
        else if (strcmp(s.type, "iegen::example::Digit") == 0)
            ctocxxs = static_cast<iegen::example::Digit*>(s.ptr);
        else {
            std::cerr << "Unexpected object type: " << s.type << std::endl;
            exit(1);
        }
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignId(ctocxxs);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

IEGenCObject _func_SymbolUsage_getTextPtr(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Text");
        }
        auto value_ptr_result = const_cast<iegen::example::Text*>(result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_SymbolUsage_getSignPtr(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Sign");
        }
        auto value_ptr_result = const_cast<iegen::example::Sign*>(result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

