/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/25/2022-09:02.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/inheritance/c_symbol.h"
#include "cxx/inheritance/symbol.hpp"

using namespace iegen::example;

void release_SignImpl(CObject cself, bool owner){
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Sign*>(cself.ptr);
    }
}

CObject create_Sign(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Sign();
        return {strdup("iegen::example::Sign"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_Sign_typeName(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Sign* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Sign") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Sign*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Digit") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_Text(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Text*>(cself.ptr);
    }
}

CObject create_Text(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Text();
        return {strdup("iegen::example::Text"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_Text_typeName(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Text* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Text") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Text*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Digit") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_Digit(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Digit*>(cself.ptr);
    }
}

CObject create_Digit(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Digit();
        return {strdup("iegen::example::Digit"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_Digit_typeName(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::Digit* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::Digit") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::Digit*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}
void release_SymbolUsage(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::SymbolUsage*>(cself.ptr);
    }
}

CObject create_SymbolUsage(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::SymbolUsage();
        return {strdup("iegen::example::SymbolUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject create_SymbolUsage_1(CObject d, ErrorObj* _Nonnull err){
    
    iegen::example::Digit* ctocxxd_ptr = nullptr;
    if (d.ptr) {
        if (strcmp(d.type, "iegen::example::Digit") == 0)
            ctocxxd_ptr = static_cast<iegen::example::Digit*>(d.ptr);
        else {
            std::cerr << "Unexpected object type: " << d.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxd = ctocxxd_ptr;
    try {
        auto this_object = new iegen::example::SymbolUsage(ctocxxd);
        return {strdup("iegen::example::SymbolUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

char* _Nonnull _func_SymbolUsage_getTextType(CObject cself, CObject t, ErrorObj* _Nonnull err){
    
    iegen::example::Text* ctocxxt_ptr = nullptr;
    if (t.ptr) {
        if (strcmp(t.type, "iegen::example::Text") == 0)
            ctocxxt_ptr = static_cast<iegen::example::Text*>(t.ptr);
        else if (strcmp(t.type, "iegen::example::Digit") == 0)
            ctocxxt_ptr = static_cast<iegen::example::Digit*>(t.ptr);
        else {
            std::cerr << "Unexpected object type: " << t.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxt = ctocxxt_ptr;
  
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getTextType(ctocxxt);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

char* _Nonnull _func_SymbolUsage_getSignType(CObject cself, CObject s, ErrorObj* _Nonnull err){
    
    iegen::example::Sign* ctocxxs_ptr = nullptr;
    if (s.ptr) {
        if (strcmp(s.type, "iegen::example::Sign") == 0)
            ctocxxs_ptr = static_cast<iegen::example::Sign*>(s.ptr);
        else if (strcmp(s.type, "iegen::example::Digit") == 0)
            ctocxxs_ptr = static_cast<iegen::example::Digit*>(s.ptr);
        else {
            std::cerr << "Unexpected object type: " << s.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxs = ctocxxs_ptr;
  
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getSignType(ctocxxs);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

int _func_SymbolUsage_getTextId(CObject cself, CObject t, ErrorObj* _Nonnull err){
    
    iegen::example::Text* ctocxxt_ptr = nullptr;
    if (t.ptr) {
        if (strcmp(t.type, "iegen::example::Text") == 0)
            ctocxxt_ptr = static_cast<iegen::example::Text*>(t.ptr);
        else if (strcmp(t.type, "iegen::example::Digit") == 0)
            ctocxxt_ptr = static_cast<iegen::example::Digit*>(t.ptr);
        else {
            std::cerr << "Unexpected object type: " << t.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxt = ctocxxt_ptr;
  
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getTextId(ctocxxt);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

int _func_SymbolUsage_getSignId(CObject cself, CObject s, ErrorObj* _Nonnull err){
    
    iegen::example::Sign* ctocxxs_ptr = nullptr;
    if (s.ptr) {
        if (strcmp(s.type, "iegen::example::Sign") == 0)
            ctocxxs_ptr = static_cast<iegen::example::Sign*>(s.ptr);
        else if (strcmp(s.type, "iegen::example::Digit") == 0)
            ctocxxs_ptr = static_cast<iegen::example::Digit*>(s.ptr);
        else {
            std::cerr << "Unexpected object type: " << s.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxs = ctocxxs_ptr;
  
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getSignId(ctocxxs);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

CObject _func_SymbolUsage_getTextPtr(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getTextPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Text");
        }
        auto value_ptr_result = const_cast<iegen::example::Text*>(result);
        CObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_SymbolUsage_getSignPtr(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::SymbolUsage* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::SymbolUsage") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::SymbolUsage*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        const auto& result = ctocxxcself->getSignPtr();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Sign");
        }
        auto value_ptr_result = const_cast<iegen::example::Sign*>(result);
        CObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
