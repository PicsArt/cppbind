/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/16/2022-09:09.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_usage.h"
#include "cxx/inheritance/usage.hpp"
#include "cxx/inheritance/parallelogram.hpp"
#include "cxx/inheritance/vehicle.hpp"
#include "cxx/inheritance/bicycle.hpp"
#include "cxx/inheritance/date.hpp"

iegen::example::Parallelogram* downcast_IegenExample_Parallelogram(IEGenCObject);
std::shared_ptr<iegen::example::Vehicle> downcast_IegenExample_Vehicle(IEGenCObject);
std::shared_ptr<iegen::example::Date> downcast_IegenExample_MyDate(IEGenCObject);

using namespace iegen::example;

void release_IegenExample_GeometricFigure(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_GeometricFigure(IEGenCObject p, IEGenCObject* _Nonnull err) {
    
    iegen::example::Parallelogram* ctocxxp = downcast_IegenExample_Parallelogram(p);
    try {
        auto this_object = new iegen::example::GeometricFigure(ctocxxp);
        return {strdup("iegen::example::GeometricFigure"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExample_GeometricFigure_parallelogram(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->parallelogram();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Parallelogram");
        }
        auto value_ptr_result = const_cast<iegen::example::Parallelogram*>(result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExample_GeometricFigure_parallelogram(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    
    iegen::example::Parallelogram* ctocxxp = downcast_IegenExample_Parallelogram(p);
    try {
        ctocxxcself->setParallelogram(ctocxxp);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExample_GeometricFigure_nullableParallelogram(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->nullableParallelogram();
        
        char* type_result = nullptr;
        if (result) {
            const char * name_result = typeid(*result).name();
            int status = 0;
            char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
            if (status == 0) {
                type_result = demangled_result;
            } else {
                type_result = strdup("iegen::example::Parallelogram");
            }
        } else {
            type_result = strdup("iegen::example::Parallelogram");
        }
        auto value_ptr_result = const_cast<iegen::example::Parallelogram*>(result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExample_GeometricFigure_nullableParallelogram(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull err) {
    
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    
    iegen::example::Parallelogram* ctocxxp = downcast_IegenExample_Parallelogram(p);
    try {
        ctocxxcself->setNullableParallelogram(ctocxxp);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

void release_IegenExample_MyVehicle(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_MyVehicle(IEGenCObject v, IEGenCObject cv, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::Vehicle> ctocxxv;
    ctocxxv = downcast_IegenExample_Vehicle(v);
    
    std::shared_ptr<const iegen::example::Vehicle> ctocxxcv;
    ctocxxcv = downcast_IegenExample_Vehicle(cv);
    try {
        auto this_object = new iegen::example::MyVehicle(ctocxxv, ctocxxcv);
        return {strdup("iegen::example::MyVehicle"), new std::shared_ptr<iegen::example::MyVehicle>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExample_MyVehicle_vehicle(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->vehicle();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            
            auto& arg_pointee_result = *result.get();
            const char * name_result = typeid(arg_pointee_result).name();
            int status = 0;
            char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
            if (status == 0) {
                type_result = demangled_result;
            } else {
                type_result = strdup("iegen::example::Vehicle");
            }
            cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<iegen::example::Vehicle>(result)));
        } else {
            type_result = strdup("iegen::example::Vehicle");
        }
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExample_MyVehicle_vehicle(IEGenCObject cself, IEGenCObject v, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    
    std::shared_ptr<iegen::example::Vehicle> ctocxxv = nullptr;
    if (v.ptr) {
        ctocxxv = downcast_IegenExample_Vehicle(v);
    }
    try {
        ctocxxcself->setVehicle(ctocxxv);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExample_MyVehicle_constVehicle(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->constVehicle();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            
            auto& arg_pointee_result = *result.get();
            const char * name_result = typeid(arg_pointee_result).name();
            int status = 0;
            char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
            if (status == 0) {
                type_result = demangled_result;
            } else {
                type_result = strdup("iegen::example::Vehicle");
            }
            cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<iegen::example::Vehicle>(result)));
        } else {
            type_result = strdup("iegen::example::Vehicle");
        }
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExample_MyVehicle_constVehicle(IEGenCObject cself, IEGenCObject v, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    
    std::shared_ptr<const iegen::example::Vehicle> ctocxxv = nullptr;
    if (v.ptr) {
        ctocxxv = downcast_IegenExample_Vehicle(v);
    }
    try {
        ctocxxcself->setConstVehicle(ctocxxv);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

void release_IegenExample_MyBicycle(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_MyBicycle(IEGenCObject b, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::Bicycle> ctocxxb;
    ctocxxb = *static_cast<std::shared_ptr<iegen::example::Bicycle>*>(b.ptr);
    try {
        auto this_object = new iegen::example::MyBicycle(ctocxxb);
        return {strdup("iegen::example::MyBicycle"), new std::shared_ptr<iegen::example::MyBicycle>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExample_MyBicycle_bicycle(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::MyBicycle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->bicycle();
        
        char* type_result = strdup("iegen::example::Bicycle");
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<iegen::example::Bicycle>(result)));
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExample_MyBicycle_bicycle(IEGenCObject cself, IEGenCObject b, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::MyBicycle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    
    std::shared_ptr<const iegen::example::Bicycle> ctocxxb;
    ctocxxb = *static_cast<std::shared_ptr<const iegen::example::Bicycle>*>(b.ptr);
    try {
        ctocxxcself->setBicycle(ctocxxb);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

void release_IegenExample_MyCalendar(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_MyCalendar(IEGenCDataArray events, IEGenCObject* _Nonnull err) {
    std::vector<std::shared_ptr<Date>> ctocxxevents;

    auto data_events = reinterpret_cast<IEGenCObject*>(events.data);

    for (size_t _i_events = 0; _i_events < events.size; ++_i_events) {
        auto& value_events = data_events[_i_events];
        
        std::shared_ptr<iegen::example::Date> ctocxxvalue_events;
        ctocxxvalue_events = downcast_IegenExample_MyDate(value_events);
        ctocxxevents.emplace_back(ctocxxvalue_events);
    }
    try {
        auto this_object = new iegen::example::MyCalendar(ctocxxevents);
        return {strdup("iegen::example::MyCalendar"), new std::shared_ptr<iegen::example::MyCalendar>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_MyCalendar_addEvent(IEGenCObject cself, IEGenCObject e, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::Date> ctocxxe;
    ctocxxe = downcast_IegenExample_MyDate(e);
  
    std::shared_ptr<iegen::example::MyCalendar> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    try {
        ctocxxcself->addEvent(ctocxxe);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCDataArray _prop_get_IegenExample_MyCalendar_events(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::MyCalendar> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->events();
        auto _data_cxxtocresult = new IEGenCObject [result.size()];
        IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = nullptr;
            void* cxxtocvalue_result_ptr = nullptr;

            auto& arg_pointee_value_result = *value_result.get();
            const char * name_value_result = typeid(arg_pointee_value_result).name();
            int status = 0;
            char* demangled_value_result = abi::__cxa_demangle(name_value_result, NULL, NULL, &status);
            if (status == 0) {
                type_value_result = demangled_value_result;
            } else {
                type_value_result = strdup("iegen::example::Date");
            }
            cxxtocvalue_result_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<iegen::example::Date>(value_result)));
            IEGenCObject cxxtocvalue_result = {type_value_result, cxxtocvalue_result_ptr};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCDataArray result {};
    return result;
}

