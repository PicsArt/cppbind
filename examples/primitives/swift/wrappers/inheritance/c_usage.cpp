/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/03/2022-13:55.
 * Please do not change it manually.
 */

#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/inheritance/c_usage.h"
#include "cxx/inheritance/usage.hpp"
#include "cxx/inheritance/parallelogram.hpp"
#include "cxx/inheritance/vehicle.hpp"
#include "cxx/inheritance/bicycle.hpp"
#include "cxx/inheritance/date.hpp"

using namespace iegen::example;

void release_GeometricFigure(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    }
}

IEGenCObject create_GeometricFigure(IEGenCObject p, IEGenCObject* _Nonnull err){
    
    auto ctocxxp = static_cast<iegen::example::Parallelogram*>(p.ptr);
    try {
        auto this_object = new iegen::example::GeometricFigure(ctocxxp);
        return {strdup("iegen::example::GeometricFigure"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_GeometricFigure_parallelogram(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    const auto& result = ctocxxcself->parallelogram();
    
    char* type_result = nullptr;
    const char * name_result = typeid(*result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup("iegen::example::Parallelogram");
    }
    IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::Parallelogram*>(result)};
    return cxxtocresult;
}

void _prop_set_GeometricFigure_parallelogram(IEGenCObject cself, IEGenCObject p){
    
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    
    auto ctocxxp = static_cast<iegen::example::Parallelogram*>(p.ptr);
    ctocxxcself->setParallelogram(ctocxxp);
}


IEGenCObject _prop_get_GeometricFigure_nullableParallelogram(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    const auto& result = ctocxxcself->nullableParallelogram();
    
    char* type_result = nullptr;
    if (result) {
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Parallelogram");
        }
    } else {
        type_result = strdup("iegen::example::Parallelogram");
    }
    IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::Parallelogram*>(result)};
    return cxxtocresult;
}

void _prop_set_GeometricFigure_nullableParallelogram(IEGenCObject cself, IEGenCObject p){
    
    auto ctocxxcself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    
    auto ctocxxp = static_cast<iegen::example::Parallelogram*>(p.ptr);
    ctocxxcself->setNullableParallelogram(ctocxxp);
}

void release_MyVehicle(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    }
}

IEGenCObject create_MyVehicle(IEGenCObject v, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::Vehicle> ctocxxv;
    ctocxxv = *static_cast<std::shared_ptr<iegen::example::Vehicle>*>(v.ptr);
    try {
        auto this_object = new iegen::example::MyVehicle(ctocxxv);
        return {strdup("iegen::example::MyVehicle"), new std::shared_ptr<iegen::example::MyVehicle>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_MyVehicle_vehicle(IEGenCObject cself){
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    const auto& result = ctocxxcself->vehicle();
    
    char* type_result = nullptr;
    void* cxxtocresult_ptr = nullptr;
    if (result) {
        
        auto& arg_pointee_result = *result.get();
        const char * name_result = typeid(arg_pointee_result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Vehicle");
        }
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::Vehicle>(result);
    } else {
        type_result = strdup("iegen::example::Vehicle");
    }
    IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

void _prop_set_MyVehicle_vehicle(IEGenCObject cself, IEGenCObject v){
    
    std::shared_ptr<iegen::example::MyVehicle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    
    std::shared_ptr<iegen::example::Vehicle> ctocxxv = nullptr;
    if (v.ptr) {
        ctocxxv = *static_cast<std::shared_ptr<iegen::example::Vehicle>*>(v.ptr);
    }
    ctocxxcself->setVehicle(ctocxxv);
}

void release_MyBicycle(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    }
}

IEGenCObject create_MyBicycle(IEGenCObject b, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::Bicycle> ctocxxb;
    ctocxxb = std::dynamic_pointer_cast<iegen::example::Bicycle>(*static_cast<std::shared_ptr<iegen::example::Vehicle>*>(b.ptr));
    try {
        auto this_object = new iegen::example::MyBicycle(ctocxxb);
        return {strdup("iegen::example::MyBicycle"), new std::shared_ptr<iegen::example::MyBicycle>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_MyBicycle_bicycle(IEGenCObject cself){
    std::shared_ptr<iegen::example::MyBicycle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    const auto& result = ctocxxcself->bicycle();
    
    char* type_result = strdup("iegen::example::Bicycle");
    void* cxxtocresult_ptr;
    cxxtocresult_ptr = new std::shared_ptr<const iegen::example::Vehicle>(std::static_pointer_cast<const iegen::example::Vehicle>(result));
    IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

void _prop_set_MyBicycle_bicycle(IEGenCObject cself, IEGenCObject b){
    
    std::shared_ptr<iegen::example::MyBicycle> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    
    std::shared_ptr<const iegen::example::Bicycle> ctocxxb;
    ctocxxb = std::dynamic_pointer_cast<const iegen::example::Bicycle>(*static_cast<std::shared_ptr<const iegen::example::Vehicle>*>(b.ptr));
    ctocxxcself->setBicycle(ctocxxb);
}

void release_MyCalendar(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    }
}

IEGenCObject create_MyCalendar(IEGenCDataArray events, IEGenCObject* _Nonnull err){
    std::vector<std::shared_ptr<Date>> ctocxxevents;

    auto data_events = reinterpret_cast<IEGenCObject*>(events.data);

    for (size_t _i_events = 0; _i_events < events.size; ++_i_events) {
        auto& value_events = data_events[_i_events];
        
        std::shared_ptr<iegen::example::Date> ctocxxvalue_events;
        ctocxxvalue_events = std::dynamic_pointer_cast<iegen::example::Date>(*static_cast<std::shared_ptr<iegen::example::Base>*>(value_events.ptr));
        ctocxxevents.emplace_back(ctocxxvalue_events);
    }
    try {
        auto this_object = new iegen::example::MyCalendar(ctocxxevents);
        return {strdup("iegen::example::MyCalendar"), new std::shared_ptr<iegen::example::MyCalendar>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_MyCalendar_addEvent(IEGenCObject cself, IEGenCObject e, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::Date> ctocxxe;
    ctocxxe = std::dynamic_pointer_cast<iegen::example::Date>(*static_cast<std::shared_ptr<iegen::example::Base>*>(e.ptr));
  
    
    std::shared_ptr<iegen::example::MyCalendar> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    try {
        ctocxxcself->addEvent(ctocxxe);
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCDataArray _prop_get_MyCalendar_events(IEGenCObject cself){
    std::shared_ptr<iegen::example::MyCalendar> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    const auto& result = ctocxxcself->events();
    auto _data_cxxtocresult = new IEGenCObject [result.size()];
    IEGenCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
        auto& value_result = result[_i_result];
        
        char* type_value_result = nullptr;
        void* cxxtocvalue_result_ptr;

        auto& arg_pointee_value_result = *value_result.get();
        const char * name_value_result = typeid(arg_pointee_value_result).name();
        int status = 0;
        char* demangled_value_result = abi::__cxa_demangle(name_value_result, NULL, NULL, &status);
        if (status == 0) {
            type_value_result = demangled_value_result;
        } else {
            type_value_result = strdup("iegen::example::Date");
        }
        cxxtocvalue_result_ptr = new std::shared_ptr<iegen::example::Base>(std::static_pointer_cast<iegen::example::Base>(value_result));
        IEGenCObject cxxtocvalue_result = {type_value_result, cxxtocvalue_result_ptr};
        _data_cxxtocresult[_i_result] = cxxtocvalue_result;
    }
    return cxxtocresult;
}
