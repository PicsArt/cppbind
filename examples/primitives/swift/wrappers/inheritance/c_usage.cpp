/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/30/2021-09:16.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/inheritance/c_usage.h"
#include "cxx/inheritance/usage.hpp"
#include "cxx/inheritance/parallelogram.hpp"
#include "cxx/inheritance/vehicle.hpp"
#include "cxx/inheritance/bicycle.hpp"
#include "cxx/inheritance/date.hpp"

using namespace iegen::example;

void release_GeometricFigure(CDataObj cself) {
    delete static_cast<iegen::example::GeometricFigure*>(cself.ptr);
}

CDataObj create_GeometricFigure(CDataObj p){
    
    auto c_to_cxx_p = static_cast<iegen::example::Parallelogram*>(p.ptr);
    auto this_object = new iegen::example::GeometricFigure(c_to_cxx_p);
    return {0, this_object};
}

CDataObj _prop_get_GeometricFigure_parallelogram(CDataObj cself){
    auto c_to_cxx_cself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    const auto& result = c_to_cxx_cself->parallelogram();
    
    int code_result = 0;
    int status = 0;
    const char * name = typeid(*result).name();
    char* res = abi::__cxa_demangle(name, NULL, NULL, &status);
    std::string demangled_result = (status==0) ? res : name;
    free(res);
    if (demangled_result == "iegen::example::Rectangle") {
        code_result = 1;
    } else if (demangled_result == "iegen::example::Rhombus") {
        code_result = 2;
    } else if (demangled_result == "iegen::example::Square") {
        code_result = 3;
    } 
    CDataObj cxx_to_c_result = {code_result, const_cast<iegen::example::Parallelogram*>(result)};
    return cxx_to_c_result;
}

void _prop_set_GeometricFigure_parallelogram(CDataObj cself, CDataObj p){
    
    auto c_to_cxx_cself = static_cast<iegen::example::GeometricFigure*>(cself.ptr);
    
    auto c_to_cxx_p = static_cast<iegen::example::Parallelogram*>(p.ptr);
    c_to_cxx_cself->setParallelogram(c_to_cxx_p);
}

void release_MyVehicle(CDataObj cself) {
    delete static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
}

CDataObj create_MyVehicle(CDataObj v){
    
    std::shared_ptr<iegen::example::Vehicle> c_to_cxx_v;
    c_to_cxx_v = *static_cast<std::shared_ptr<iegen::example::Vehicle>*>(v.ptr);
    auto this_object = new iegen::example::MyVehicle(c_to_cxx_v);
    return {0, new std::shared_ptr<iegen::example::MyVehicle>(this_object)};
}

CDataObj _prop_get_MyVehicle_vehicle(CDataObj cself){
    std::shared_ptr<iegen::example::MyVehicle> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->vehicle();
    
    int code_result = 0;
    void* cxx_to_c_result_ptr;
    cxx_to_c_result_ptr = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Vehicle>(result));
    CDataObj cxx_to_c_result = {code_result, cxx_to_c_result_ptr};
    return cxx_to_c_result;
}

void _prop_set_MyVehicle_vehicle(CDataObj cself, CDataObj v){
    
    std::shared_ptr<iegen::example::MyVehicle> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyVehicle>*>(cself.ptr);
    
    std::shared_ptr<iegen::example::Vehicle> c_to_cxx_v;
    c_to_cxx_v = *static_cast<std::shared_ptr<iegen::example::Vehicle>*>(v.ptr);
    c_to_cxx_cself->setVehicle(c_to_cxx_v);
}

void release_MyBicycle(CDataObj cself) {
    delete static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
}

CDataObj create_MyBicycle(CDataObj b){
    
    std::shared_ptr<iegen::example::Bicycle> c_to_cxx_b;
    c_to_cxx_b = std::dynamic_pointer_cast<iegen::example::Bicycle>(*static_cast<std::shared_ptr<iegen::example::Vehicle>*>(b.ptr));
    auto this_object = new iegen::example::MyBicycle(c_to_cxx_b);
    return {0, new std::shared_ptr<iegen::example::MyBicycle>(this_object)};
}

CDataObj _prop_get_MyBicycle_bicycle(CDataObj cself){
    std::shared_ptr<iegen::example::MyBicycle> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->bicycle();
    
    int code_result = 0;
    void* cxx_to_c_result_ptr;
    cxx_to_c_result_ptr = reinterpret_cast<void*>(new std::shared_ptr<const iegen::example::Vehicle>(std::static_pointer_cast<const iegen::example::Vehicle>(result)));
    CDataObj cxx_to_c_result = {code_result, cxx_to_c_result_ptr};
    return cxx_to_c_result;
}

void _prop_set_MyBicycle_bicycle(CDataObj cself, CDataObj b){
    
    std::shared_ptr<iegen::example::MyBicycle> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyBicycle>*>(cself.ptr);
    
    std::shared_ptr<const iegen::example::Bicycle> c_to_cxx_b;
    c_to_cxx_b = std::dynamic_pointer_cast<const iegen::example::Bicycle>(*static_cast<std::shared_ptr<const iegen::example::Vehicle>*>(b.ptr));
    c_to_cxx_cself->setBicycle(c_to_cxx_b);
}

void release_MyCalendar(CDataObj cself) {
    delete static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
}

CDataObj create_MyCalendar(CDataArray events){
    std::vector<std::shared_ptr<Date>> c_to_cxx_events;

    auto data_events = reinterpret_cast<CDataObj*>(events.data);

    for (size_t _i_events = 0; _i_events < events.size; ++_i_events) {
        auto& value_events = data_events[_i_events];
        
        std::shared_ptr<iegen::example::Date> c_to_cxx_value_events;
        c_to_cxx_value_events = std::dynamic_pointer_cast<iegen::example::Date>(*static_cast<std::shared_ptr<iegen::example::Base>*>(value_events.ptr));
        c_to_cxx_events.emplace_back(c_to_cxx_value_events);
    }
    auto this_object = new iegen::example::MyCalendar(c_to_cxx_events);
    return {0, new std::shared_ptr<iegen::example::MyCalendar>(this_object)};
}

void _func_MyCalendar_addEvent(CDataObj cself, CDataObj e, ErrorObj* _Nonnull err){
    
    std::shared_ptr<iegen::example::Date> c_to_cxx_e;
    c_to_cxx_e = std::dynamic_pointer_cast<iegen::example::Date>(*static_cast<std::shared_ptr<iegen::example::Base>*>(e.ptr));
  
    
    std::shared_ptr<iegen::example::MyCalendar> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    try {
        c_to_cxx_cself->addEvent(c_to_cxx_e);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CDataArray _prop_get_MyCalendar_events(CDataObj cself){
    std::shared_ptr<iegen::example::MyCalendar> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::MyCalendar>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->events();
    auto _data_cxx_to_c_result = new CDataObj [result.size()];
    CDataArray cxx_to_c_result = { _data_cxx_to_c_result, (long long)result.size() };
    for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
        auto& value_result = result[_i_result];
        
        int code_value_result = 0;
        auto& arg_pointee_value_result = *value_result.get();
        int status = 0;
        const char * name = typeid(arg_pointee_value_result).name();
        char* res = abi::__cxa_demangle(name, NULL, NULL, &status);
        std::string demangled_value_result = (status==0) ? res : name;
        free(res);
        if (demangled_value_result == "iegen::example::DateTime") {
            code_value_result = 1;
        } 
        void* cxx_to_c_value_result_ptr;
        cxx_to_c_value_result_ptr = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Base>(std::static_pointer_cast<iegen::example::Base>(value_result)));
        CDataObj cxx_to_c_value_result = {code_value_result, cxx_to_c_value_result_ptr};
        _data_cxx_to_c_result[_i_result] = cxx_to_c_value_result;
    }
    return cxx_to_c_result;
}