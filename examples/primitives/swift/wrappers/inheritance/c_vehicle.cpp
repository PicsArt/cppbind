/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-09:35.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/inheritance/c_vehicle.h"
#include "cxx/inheritance/vehicle.hpp"
#include "cxx/inheritance/bicycle.hpp"

extern const char* IEGEN_IEGEN_EXAMPLE_BICYCLE;
extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_VEHICLE = "iegen::example::Vehicle";

using namespace iegen::example;

void release_IegenExample_Vehicle(IEGenCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_VEHICLE) == 0)
            delete static_cast<std::shared_ptr<iegen::example::Vehicle>*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_IEGEN_EXAMPLE_BICYCLE) == 0)
            delete static_cast<std::shared_ptr<iegen::example::Bicycle>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<iegen::example::Vehicle> downcast_IegenExample_Vehicle(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_VEHICLE) == 0)
            return *static_cast<std::shared_ptr<iegen::example::Vehicle>*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_IEGEN_EXAMPLE_BICYCLE) == 0)
            return *static_cast<std::shared_ptr<iegen::example::Bicycle>*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

int _prop_get_IegenExample_Vehicle_numberOfSeats(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    std::shared_ptr<iegen::example::Vehicle> ctocxxcself;
    ctocxxcself = downcast_IegenExample_Vehicle(cself);
    try {
        const auto& result = ctocxxcself->numberOfSeats();
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

char* _Nonnull _func_IegenExample_Vehicle_type(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    std::shared_ptr<iegen::example::Vehicle> ctocxxcself;
    ctocxxcself = downcast_IegenExample_Vehicle(cself);
    try {
        const auto& result = ctocxxcself->type();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

