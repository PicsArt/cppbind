/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/25/2022-14:10.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/nested_types/c_list.h"
#include "cxx/nested_types/list.hpp"


#include "cxx/nested_types/list.hpp"


using namespace iegen::example;

void release_List(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::List*>(cself.ptr);
    }
}
void release_Item(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::List::Item*>(cself.ptr);
    }
}
void release_Value(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::List::Item::Value*>(cself.ptr);
    }
}
int _prop_get_Value_value(CObject cself){
    iegen::example::List::Item::Value* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List::Item::Value") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List::Item::Value*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->value;
    
    return result;
}
void _prop_set_Value_value(CObject cself, int value){
    
    iegen::example::List::Item::Value* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List::Item::Value") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List::Item::Value*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    
    ctocxxcself->value = value;
}


CObject create_Value(int _value, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::List::Item::Value(_value);
        return {strdup("iegen::example::List::Item::Value"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
CObject _prop_get_Item_value(CObject cself){
    iegen::example::List::Item* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List::Item") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List::Item*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->value;
    
    char* type_result = strdup("iegen::example::List::Item::Value");
    auto value_ptr_result = const_cast<iegen::example::List::Item::Value*>(result);
    CObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}
void _prop_set_Item_value(CObject cself, CObject value){
    
    iegen::example::List::Item* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List::Item") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List::Item*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    
    iegen::example::List::Item::Value* ctocxxvalue_ptr = nullptr;
    if (value.ptr) {
        if (strcmp(value.type, "iegen::example::List::Item::Value") == 0)
            ctocxxvalue_ptr = static_cast<iegen::example::List::Item::Value*>(value.ptr);
        else {
            std::cerr << "Unexpected object type: " << value.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxvalue = ctocxxvalue_ptr;
    ctocxxcself->value = ctocxxvalue;
}


CObject create_Item(CObject v, ErrorObj* _Nonnull err){
    
    iegen::example::List::Item::Value* ctocxxv_ptr = nullptr;
    if (v.ptr) {
        if (strcmp(v.type, "iegen::example::List::Item::Value") == 0)
            ctocxxv_ptr = static_cast<iegen::example::List::Item::Value*>(v.ptr);
        else {
            std::cerr << "Unexpected object type: " << v.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxv = ctocxxv_ptr;
    try {
        auto this_object = new iegen::example::List::Item(ctocxxv);
        return {strdup("iegen::example::List::Item"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject create_List(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::List();
        return {strdup("iegen::example::List"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_List_push_back(CObject cself, CObject item, ErrorObj* _Nonnull err){
    
    iegen::example::List::Item* ctocxxitem_ptr = nullptr;
    if (item.ptr) {
        if (strcmp(item.type, "iegen::example::List::Item") == 0)
            ctocxxitem_ptr = static_cast<iegen::example::List::Item*>(item.ptr);
        else {
            std::cerr << "Unexpected object type: " << item.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxitem = ctocxxitem_ptr;
  
    
    iegen::example::List* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->push_back(ctocxxitem);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_List_pop_back(CObject cself, ErrorObj* _Nonnull err){
    
    iegen::example::List* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    try {
        ctocxxcself->pop_back();
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CObject _prop_get_List_back(CObject cself){
    iegen::example::List* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::List") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::List*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->back();
    
    char* type_result = strdup("iegen::example::List::Item");
    auto value_ptr_result = const_cast<iegen::example::List::Item*>(result);
    CObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}
