/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/nested_types/c_list.h"
#include "cxx/nested_types/list.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_LIST = "iegen::example::List";
const char* IEGEN_LIST_ITEM = "iegen::example::List::Item";
const char* IEGEN_LIST_ITEM_VALUE = "iegen::example::List::Item::Value";

using namespace iegen::example;

void release_IegenExample_List(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::List*>(cself.ptr);
    }
    free(cself.type);
}

void release_List_Item(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::List::Item*>(cself.ptr);
    }
    free(cself.type);
}

void release_List_Item_Value(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::List::Item::Value*>(cself.ptr);
    }
    free(cself.type);
}

int _prop_get_List_Item_Value_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::List::Item::Value*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void _prop_set_List_Item_Value_value(IEGenCObject cself, int value) {
    
    auto ctocxxcself = static_cast<iegen::example::List::Item::Value*>(cself.ptr);
    
    ctocxxcself->value = value;
}

IEGenCObject create_List_Item_Value(int _value, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::List::Item::Value(_value);
        return {strdup(IEGEN_LIST_ITEM_VALUE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_List_Item_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::List::Item*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    char* type_result = strdup(IEGEN_LIST_ITEM_VALUE);
    auto value_ptr_result = const_cast<iegen::example::List::Item::Value*>(result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

void _prop_set_List_Item_value(IEGenCObject cself, IEGenCObject value) {
    
    auto ctocxxcself = static_cast<iegen::example::List::Item*>(cself.ptr);
    
    auto ctocxxvalue = static_cast<iegen::example::List::Item::Value*>(value.ptr);
    ctocxxcself->value = ctocxxvalue;
}

IEGenCObject create_List_Item(IEGenCObject v, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxv = static_cast<iegen::example::List::Item::Value*>(v.ptr);
    try {
        auto this_object = new iegen::example::List::Item(ctocxxv);
        return {strdup(IEGEN_LIST_ITEM), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_List(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::List();
        return {strdup(IEGEN_IEGEN_EXAMPLE_LIST), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_List_push_back(IEGenCObject cself, IEGenCObject item, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxitem = static_cast<iegen::example::List::Item*>(item.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::List*>(cself.ptr);
    try {
        ctocxxcself->push_back(ctocxxitem);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

void _func_IegenExample_List_pop_back(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::List*>(cself.ptr);
    try {
        ctocxxcself->pop_back();
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExample_List_back(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::List*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->back();
        
        char* type_result = strdup(IEGEN_LIST_ITEM);
        auto value_ptr_result = const_cast<iegen::example::List::Item*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

