/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/29/2022-15:31.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/nested_types/c_template_list.h"
#include "cxx/nested_types/template_list.hpp"

using namespace iegen::example;

void release_IegenExample_TemplateListInt(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateList<int>*>(cself.ptr);
    }
    free(cself.type);
}

void release_TemplateListInt_Item(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateList<int>::Item*>(cself.ptr);
    }
    free(cself.type);
}

int _prop_get_TemplateListInt_Item_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::TemplateList<int>::Item*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void _prop_set_TemplateListInt_Item_value(IEGenCObject cself, int value) {
    
    auto ctocxxcself = static_cast<iegen::example::TemplateList<int>::Item*>(cself.ptr);
    
    ctocxxcself->value = value;
}

IEGenCObject create_TemplateListInt_Item(int v, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TemplateList<int>::Item(v);
        return {strdup("iegen::example::TemplateList<int>::Item"), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_TemplateListInt(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TemplateList<int>();
        return {strdup("iegen::example::TemplateList<int>"), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void release_IegenExample_TemplateListDouble(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateList<double>*>(cself.ptr);
    }
    free(cself.type);
}

void release_TemplateListDouble_Item(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateList<double>::Item*>(cself.ptr);
    }
    free(cself.type);
}

double _prop_get_TemplateListDouble_Item_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::TemplateList<double>::Item*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void _prop_set_TemplateListDouble_Item_value(IEGenCObject cself, double value) {
    
    auto ctocxxcself = static_cast<iegen::example::TemplateList<double>::Item*>(cself.ptr);
    
    ctocxxcself->value = value;
}

IEGenCObject create_TemplateListDouble_Item(double v, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TemplateList<double>::Item(v);
        return {strdup("iegen::example::TemplateList<double>::Item"), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_TemplateListDouble(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TemplateList<double>();
        return {strdup("iegen::example::TemplateList<double>"), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

