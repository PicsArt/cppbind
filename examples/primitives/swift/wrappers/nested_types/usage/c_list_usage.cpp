/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:19.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/nested_types/usage/c_list_usage.h"
#include "cxx/nested_types/list_usage.hpp"
#include "cxx/nested_types/list.hpp"
#include "cxx/nested_types/template_list.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;
extern const char* IEGEN_LIST_ITEM;
extern const char* IEGEN_TEMPLATELISTINT_ITEM;

const char* IEGEN_IEGEN_EXAMPLE_LISTWRAPPER = "iegen::example::ListWrapper";
const char* IEGEN_IEGEN_EXAMPLE_INTLISTITEMWRAPPER = "iegen::example::IntListItemWrapper";

using namespace iegen::example;

void release_IegenExample_ListWrapper(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::ListWrapper*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_ListWrapper(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::ListWrapper();
        return {strdup(IEGEN_IEGEN_EXAMPLE_LISTWRAPPER), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_ListWrapper_push_back(IEGenCObject cself, IEGenCObject item, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxitem = static_cast<List::Item*>(item.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::ListWrapper*>(cself.ptr);
    try {
        ctocxxcself->push_back(ctocxxitem);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExample_ListWrapper_back(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::ListWrapper*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->back();
        
        char* type_result = strdup(IEGEN_LIST_ITEM);
        auto value_ptr_result = const_cast<List::Item*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void release_IegenExample_IntListItemWrapper(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::IntListItemWrapper*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_IntListItemWrapper(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::IntListItemWrapper();
        return {strdup(IEGEN_IEGEN_EXAMPLE_INTLISTITEMWRAPPER), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_IntListItemWrapper_set(IEGenCObject cself, IEGenCObject item, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxitem = static_cast<TemplateList<int>::Item*>(item.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::IntListItemWrapper*>(cself.ptr);
    try {
        ctocxxcself->set(ctocxxitem);
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _func_IegenExample_IntListItemWrapper_get(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::IntListItemWrapper*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->get();
        
        char* type_result = strdup(IEGEN_TEMPLATELISTINT_ITEM);
        auto value_ptr_result = const_cast<TemplateList<int>::Item*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

