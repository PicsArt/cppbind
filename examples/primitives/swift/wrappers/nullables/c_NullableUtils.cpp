/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/10/2022-14:09.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/nullables/c_NullableUtils.h"
#include "cxx/nullables/nullable_utils.hpp"

using namespace iegen::example::nullable;

void release_IegenExampleNullable_NumInt(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::nullable::NumberInt>*>(cself.ptr);
    }
}

IEGenCObject create_IegenExampleNullable_NumInt(int val_, IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::nullable::NumberInt(val_);
        return {strdup("iegen::example::nullable::NumberInt"), new std::shared_ptr<iegen::example::nullable::NumberInt>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _prop_get_IegenExampleNullable_NumInt_value(IEGenCObject cself) {
    std::shared_ptr<iegen::example::nullable::NumberInt> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::NumberInt>*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void release_IegenExampleNullable_NumDouble(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::nullable::NumberDouble*>(cself.ptr);
    }
}

IEGenCObject create_IegenExampleNullable_NumDouble(double val_, IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::nullable::NumberDouble(val_);
        return {strdup("iegen::example::nullable::NumberDouble"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

double _prop_get_IegenExampleNullable_NumDouble_value(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::nullable::NumberDouble*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void release_IegenExampleNullable_NullableUtils(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    }
}

IEGenCObject create_IegenExampleNullable_NullableUtils(IEGenCObject num, IEGenCObject* _Nonnull err) {
    
    auto ctocxxnum = static_cast<iegen::example::nullable::NumberDouble*>(num.ptr);
    try {
        auto this_object = new iegen::example::nullable::Utils(ctocxxnum);
        return {strdup("iegen::example::nullable::Utils"), new std::shared_ptr<iegen::example::nullable::Utils>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExampleNullable_NullableUtils_max(IEGenCObject first, IEGenCObject second, IEGenCObject* _Nonnull err) {
    
    auto ctocxxfirst = static_cast<iegen::example::nullable::NumberDouble*>(first.ptr);
  
    
    auto ctocxxsecond = static_cast<iegen::example::nullable::NumberDouble*>(second.ptr);
  
    try {
        const auto& result = iegen::example::nullable::Utils::max(ctocxxfirst, ctocxxsecond);
        
        char* type_result = strdup("iegen::example::nullable::NumberDouble");
        auto value_ptr_result = const_cast<iegen::example::nullable::NumberDouble*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExampleNullable_NullableUtils_max_1(IEGenCObject first, IEGenCObject second, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::nullable::NumberInt> ctocxxfirst = nullptr;
    if (first.ptr) {
        ctocxxfirst = *static_cast<std::shared_ptr<iegen::example::nullable::NumberInt>*>(first.ptr);
    }
  
    
    std::shared_ptr<iegen::example::nullable::NumberInt> ctocxxsecond = nullptr;
    if (second.ptr) {
        ctocxxsecond = *static_cast<std::shared_ptr<iegen::example::nullable::NumberInt>*>(second.ptr);
    }
  
    try {
        const auto& result = iegen::example::nullable::Utils::max(ctocxxfirst, ctocxxsecond);
        
        char* type_result = strdup("iegen::example::nullable::NumberInt");
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            cxxtocresult_ptr = new std::shared_ptr<iegen::example::nullable::NumberInt>(result);
        } else {
            type_result = strdup("iegen::example::nullable::NumberInt");
        }
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExampleNullable_NullableUtils_checkNonnullArg(IEGenCObject number, IEGenCObject* _Nonnull err) {
    
    auto ctocxxnumber = static_cast<iegen::example::nullable::NumberDouble*>(number.ptr);
  
    try {
        iegen::example::nullable::Utils::checkNonnullArg(ctocxxnumber);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _func_IegenExampleNullable_NullableUtils_checkNonnullReturn(IEGenCObject* _Nonnull err) {
    try {
        const auto& result = iegen::example::nullable::Utils::checkNonnullReturn();
        
        char* type_result = strdup("iegen::example::nullable::NumberDouble");
        auto value_ptr_result = const_cast<iegen::example::nullable::NumberDouble*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExampleNullable_NullableUtils_nullable(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->nullable();
        
        char* type_result = strdup("iegen::example::nullable::NumberDouble");
        auto value_ptr_result = const_cast<iegen::example::nullable::NumberDouble*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExampleNullable_NullableUtils_nullable(IEGenCObject cself, IEGenCObject num, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnum = static_cast<iegen::example::nullable::NumberDouble*>(num.ptr);
    try {
        ctocxxcself->setNullable(ctocxxnum);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExampleNullable_NullableUtils_nonNull(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->nonNull();
        
        char* type_result = strdup("iegen::example::nullable::NumberDouble");
        auto value_ptr_result = const_cast<iegen::example::nullable::NumberDouble*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _prop_set_IegenExampleNullable_NullableUtils_nonNull(IEGenCObject cself, IEGenCObject num, IEGenCObject* _Nonnull err) {
    
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnum = static_cast<iegen::example::nullable::NumberDouble*>(num.ptr);
    try {
        ctocxxcself->setNonNull(ctocxxnum);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

IEGenCObject _prop_get_IegenExampleNullable_NullableUtils_numDouble(IEGenCObject cself) {
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    const auto& result = ctocxxcself->numDouble;
    
    char* type_result = strdup("iegen::example::nullable::NumberDouble");
    auto value_ptr_result = const_cast<iegen::example::nullable::NumberDouble*>(result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

void _prop_set_IegenExampleNullable_NullableUtils_numDouble(IEGenCObject cself, IEGenCObject numDouble) {
    
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnumDouble = static_cast<iegen::example::nullable::NumberDouble*>(numDouble.ptr);
    ctocxxcself->numDouble = ctocxxnumDouble;
}

IEGenCObject _prop_get_IegenExampleNullable_NullableUtils_numInt(IEGenCObject cself) {
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    const auto& result = ctocxxcself->numInt;
    
    char* type_result = strdup("iegen::example::nullable::NumberInt");
    void* cxxtocresult_ptr = nullptr;
    cxxtocresult_ptr = new std::shared_ptr<iegen::example::nullable::NumberInt>(result);
    IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

void _prop_set_IegenExampleNullable_NullableUtils_numInt(IEGenCObject cself, IEGenCObject numInt) {
    
    std::shared_ptr<iegen::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::nullable::Utils>*>(cself.ptr);
    
    std::shared_ptr<iegen::example::nullable::NumberInt> ctocxxnumInt;
    ctocxxnumInt = *static_cast<std::shared_ptr<iegen::example::nullable::NumberInt>*>(numInt.ptr);
    ctocxxcself->numInt = ctocxxnumInt;
}

