/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/nullables/c_NullableUtils.h"
#include "cxx/nullables/nullable_utils.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMINT = "cppbind::example::nullable::NumberInt";
const char* CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE = "cppbind::example::nullable::NumberDouble";
const char* CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NULLABLEUTILS = "cppbind::example::nullable::Utils";

using namespace cppbind::example::nullable;

void release_CppbindExampleNullable_NumInt(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::nullable::NumberInt>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExampleNullable_NumInt(int val_, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::nullable::NumberInt(val_);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMINT), new std::shared_ptr<cppbind::example::nullable::NumberInt>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExampleNullable_NumInt_value(CppBindCObject cself) {
    std::shared_ptr<cppbind::example::nullable::NumberInt> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::NumberInt>*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void release_CppbindExampleNullable_NumDouble(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::nullable::NumberDouble*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExampleNullable_NumDouble(double val_, CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::nullable::NumberDouble(val_);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

double _prop_get_CppbindExampleNullable_NumDouble_value(CppBindCObject cself) {
    auto ctocxxcself = static_cast<cppbind::example::nullable::NumberDouble*>(cself.ptr);
    const auto& result = ctocxxcself->value;
    
    return result;
}

void release_CppbindExampleNullable_NullableUtils(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExampleNullable_NullableUtils(CppBindCObject num, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxnum = static_cast<cppbind::example::nullable::NumberDouble*>(num.ptr);
    try {
        auto this_object = new cppbind::example::nullable::Utils(ctocxxnum);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NULLABLEUTILS), new std::shared_ptr<cppbind::example::nullable::Utils>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExampleNullable_NullableUtils_max(CppBindCObject first, CppBindCObject second, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxfirst = static_cast<cppbind::example::nullable::NumberDouble*>(first.ptr);
  
    
    auto ctocxxsecond = static_cast<cppbind::example::nullable::NumberDouble*>(second.ptr);
  
    try {
        const auto& result = cppbind::example::nullable::Utils::max(ctocxxfirst, ctocxxsecond);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE);
        auto value_ptr_result = const_cast<cppbind::example::nullable::NumberDouble*>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExampleNullable_NullableUtils_max_1(CppBindCObject first, CppBindCObject second, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::nullable::NumberInt> ctocxxfirst = nullptr;
    if (first.ptr) {
        ctocxxfirst = *static_cast<std::shared_ptr<cppbind::example::nullable::NumberInt>*>(first.ptr);
    }
  
    
    std::shared_ptr<cppbind::example::nullable::NumberInt> ctocxxsecond = nullptr;
    if (second.ptr) {
        ctocxxsecond = *static_cast<std::shared_ptr<cppbind::example::nullable::NumberInt>*>(second.ptr);
    }
  
    try {
        const auto& result = cppbind::example::nullable::Utils::max(ctocxxfirst, ctocxxsecond);
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            cxxtocresult_ptr = new std::shared_ptr<cppbind::example::nullable::NumberInt>(std::const_pointer_cast<cppbind::example::nullable::NumberInt>(result));
        } else {
            type_result = strdup("cppbind::example::nullable::NumberInt");
        }
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExampleNullable_NullableUtils_checkNonnullArg(CppBindCObject number, CppBindCObject* _Nonnull cppbind_err) {
    
    auto ctocxxnumber = static_cast<cppbind::example::nullable::NumberDouble*>(number.ptr);
  
    try {
        cppbind::example::nullable::Utils::checkNonnullArg(ctocxxnumber);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCObject _func_CppbindExampleNullable_NullableUtils_checkNonnullReturn(CppBindCObject* _Nonnull cppbind_err) {
    try {
        const auto& result = cppbind::example::nullable::Utils::checkNonnullReturn();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE);
        auto value_ptr_result = const_cast<cppbind::example::nullable::NumberDouble*>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExampleNullable_NullableUtils_nullable(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->nullable();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE);
        auto value_ptr_result = const_cast<cppbind::example::nullable::NumberDouble*>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _prop_set_CppbindExampleNullable_NullableUtils_nullable(CppBindCObject cself, CppBindCObject num, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnum = static_cast<cppbind::example::nullable::NumberDouble*>(num.ptr);
    try {
        ctocxxcself->setNullable(ctocxxnum);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCObject _prop_get_CppbindExampleNullable_NullableUtils_nonNull(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->nonNull();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE);
        auto value_ptr_result = const_cast<cppbind::example::nullable::NumberDouble*>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _prop_set_CppbindExampleNullable_NullableUtils_nonNull(CppBindCObject cself, CppBindCObject num, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnum = static_cast<cppbind::example::nullable::NumberDouble*>(num.ptr);
    try {
        ctocxxcself->setNonNull(ctocxxnum);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCObject _prop_get_CppbindExampleNullable_NullableUtils_numDouble(CppBindCObject cself) {
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    const auto& result = ctocxxcself->numDouble;
    
    char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_NULLABLE_NUMDOUBLE);
    auto value_ptr_result = const_cast<cppbind::example::nullable::NumberDouble*>(result);
    CppBindCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

void _prop_set_CppbindExampleNullable_NullableUtils_numDouble(CppBindCObject cself, CppBindCObject numDouble) {
    
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    
    auto ctocxxnumDouble = static_cast<cppbind::example::nullable::NumberDouble*>(numDouble.ptr);
    ctocxxcself->numDouble = ctocxxnumDouble;
}

CppBindCObject _prop_get_CppbindExampleNullable_NullableUtils_numInt(CppBindCObject cself) {
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    const auto& result = ctocxxcself->numInt;
    
    char* type_result = nullptr;
    void* cxxtocresult_ptr = nullptr;
    cxxtocresult_ptr = new std::shared_ptr<cppbind::example::nullable::NumberInt>(std::const_pointer_cast<cppbind::example::nullable::NumberInt>(result));
    CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

void _prop_set_CppbindExampleNullable_NullableUtils_numInt(CppBindCObject cself, CppBindCObject numInt) {
    
    std::shared_ptr<cppbind::example::nullable::Utils> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::nullable::Utils>*>(cself.ptr);
    
    std::shared_ptr<cppbind::example::nullable::NumberInt> ctocxxnumInt;
    ctocxxnumInt = *static_cast<std::shared_ptr<cppbind::example::nullable::NumberInt>*>(numInt.ptr);
    ctocxxcself->numInt = ctocxxnumInt;
}

const char * _Nullable _func_CppbindExampleNullable_reverseString(const char * _Nullable s, CppBindCObject* _Nonnull cppbind_err) {
    
    try {
        const auto& result = cppbind::example::nullable::reverseString(s);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

