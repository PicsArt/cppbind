/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/31/2022-08:51.
 * Please do not change it manually.
 */

#ifndef _C_NullableUtils_WRAPPER_
#define _C_NullableUtils_WRAPPER_

#include "swift/wrappers/c_helpers.h"

#include <stdbool.h>

#if __cplusplus
extern "C" {
#endif
    void release_NumInt(IEGenCObject cself, bool owner);

    IEGenCObject create_NumInt(int val_, IEGenCErrorObj* _Nonnull err);
    int _prop_get_NumInt_value(IEGenCObject cself);
    void release_NumDouble(IEGenCObject cself, bool owner);

    IEGenCObject create_NumDouble(double val_, IEGenCErrorObj* _Nonnull err);
    double _prop_get_NumDouble_value(IEGenCObject cself);
    void release_NullableUtils(IEGenCObject cself, bool owner);

    IEGenCObject create_NullableUtils(IEGenCObject num, IEGenCErrorObj* _Nonnull err);
    IEGenCObject _func_NullableUtils_max(IEGenCObject  first, IEGenCObject  second, IEGenCErrorObj* _Nonnull err);
    IEGenCObject _func_NullableUtils_max_1(IEGenCObject  first, IEGenCObject  second, IEGenCErrorObj* _Nonnull err);
    void _func_NullableUtils_checkNonnullArg(IEGenCObject  number, IEGenCErrorObj* _Nonnull err);
    IEGenCObject _func_NullableUtils_checkNonnullReturn(IEGenCErrorObj* _Nonnull err);
    IEGenCObject _prop_get_NullableUtils_nullable(IEGenCObject cself);

    void _prop_set_NullableUtils_nullable(IEGenCObject cself, IEGenCObject num);

    IEGenCObject _prop_get_NullableUtils_nonNull(IEGenCObject cself);

    void _prop_set_NullableUtils_nonNull(IEGenCObject cself, IEGenCObject num);

    IEGenCObject _prop_get_NullableUtils_numDouble(IEGenCObject cself);
    void _prop_set_NullableUtils_numDouble(IEGenCObject cself, IEGenCObject numDouble);

    IEGenCObject _prop_get_NullableUtils_numInt(IEGenCObject cself);
    void _prop_set_NullableUtils_numInt(IEGenCObject cself, IEGenCObject numInt);

#if __cplusplus
}
#endif
#endif /* ifndef _C_NullableUtils_WRAPPER_ */
