/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 11/30/2021-09:10.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/operators/c_counter.h"
#include "cxx/operators/counter.hpp"

using namespace iegen::example;

void release_Counter(CDataObj cself) {
    delete static_cast<iegen::example::Counter*>(cself.ptr);
}

CDataObj create_Counter(int count){
    
    auto this_object = new iegen::example::Counter(count);
    return {0, this_object};
}

int _prop_get_Counter_count(CDataObj cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Counter*>(cself.ptr);
    const auto& result = c_to_cxx_cself->count();
    
    return result;
}

CDataObj _func_Counter_operator_add_(CDataObj cself, CDataObj counter, ErrorObj* _Nonnull err){
    
    auto& c_to_cxx_counter = *static_cast<iegen::example::Counter*>(counter.ptr);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::Counter*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->operator+(c_to_cxx_counter);
        
        int code_result = 0;
        CDataObj cxx_to_c_result = {code_result, const_cast<iegen::example::Counter*>( new iegen::example::Counter(result) )};
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataObj result;
    return result;
}

int _func_Counter_compareTo(CDataObj cself, CDataObj counter, ErrorObj* _Nonnull err){
    
    auto& c_to_cxx_counter = *static_cast<iegen::example::Counter*>(counter.ptr);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::Counter*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->compareTo(c_to_cxx_counter);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

bool _func_Counter_operator_gt_(CDataObj cself, CDataObj counter, ErrorObj* _Nonnull err){
    
    auto& c_to_cxx_counter = *static_cast<iegen::example::Counter*>(counter.ptr);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::Counter*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->operator>(c_to_cxx_counter);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}

CDataObj _func_Counter_operator_iadd_(CDataObj cself, CDataObj counter, ErrorObj* _Nonnull err){
    
    auto& c_to_cxx_counter = *static_cast<iegen::example::Counter*>(counter.ptr);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::Counter*>(cself.ptr);
    try {
        const auto& result = c_to_cxx_cself->operator+=(c_to_cxx_counter);
        
        int code_result = 0;
        CDataObj cxx_to_c_result = {code_result, const_cast<iegen::example::Counter*>( &result )};
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataObj result;
    return result;
}