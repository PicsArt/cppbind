/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/operators/c_counter.h"
#include "cxx/operators/counter.hpp"

using namespace iegen::example;

void release_Counter(void* _Nonnull cself) {
    delete static_cast<iegen::example::Counter*>(cself);
}

void* _Nonnull create_Counter(int count, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new iegen::example::Counter(count);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

int _prop_get_Counter_count(void* _Nonnull cself){
    auto ctocxxcself = static_cast<iegen::example::Counter*>(cself);
    const auto& result = ctocxxcself->count();
    
    return result;
}

void* _Nonnull _func_Counter_operator_add_(void* _Nonnull cself, void* _Nonnull counter, ErrorObj* _Nonnull err){
    
    auto& ctocxxcounter = *static_cast<iegen::example::Counter*>(counter);
  
    
    auto ctocxxcself = static_cast<iegen::example::Counter*>(cself);
    try {
        const auto& result = ctocxxcself->operator+(ctocxxcounter);
        
        auto cxxtocresult = const_cast<iegen::example::Counter*>( new iegen::example::Counter(result) );
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

int _func_Counter_compareTo(void* _Nonnull cself, void* _Nonnull counter, ErrorObj* _Nonnull err){
    
    auto& ctocxxcounter = *static_cast<iegen::example::Counter*>(counter);
  
    
    auto ctocxxcself = static_cast<iegen::example::Counter*>(cself);
    try {
        const auto& result = ctocxxcself->compareTo(ctocxxcounter);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

bool _func_Counter_operator_gt_(void* _Nonnull cself, void* _Nonnull counter, ErrorObj* _Nonnull err){
    
    auto& ctocxxcounter = *static_cast<iegen::example::Counter*>(counter);
  
    
    auto ctocxxcself = static_cast<iegen::example::Counter*>(cself);
    try {
        const auto& result = ctocxxcself->operator>(ctocxxcounter);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}

void* _Nonnull _func_Counter_operator_iadd_(void* _Nonnull cself, void* _Nonnull counter, ErrorObj* _Nonnull err){
    
    auto& ctocxxcounter = *static_cast<iegen::example::Counter*>(counter);
  
    
    auto ctocxxcself = static_cast<iegen::example::Counter*>(cself);
    try {
        const auto& result = ctocxxcself->operator+=(ctocxxcounter);
        
        auto cxxtocresult = const_cast<iegen::example::Counter*>( &result );
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}