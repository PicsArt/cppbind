/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 05/02/2022-08:40.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/optionals/c_optionals.h"
#include "cxx/optionals/optionals.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/enums/color.hpp"
#include "cxx/simple/root.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/getters/person.hpp"

extern const char* IEGEN_IEGEN_EXAMPLE_TASK;
extern const char* IEGEN_STD_STDEXCEPTION;
extern const char* IEGEN_IEGEN_EXAMPLE_PROJECT;
extern const char* IEGEN_IEGEN_EXAMPLE_PERSON;

const char* IEGEN_IEGEN_EXAMPLE_OPTIONALS = "iegen::example::Optionals";

using namespace iegen::example;

void release_IegenExample_Optionals(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::Optionals*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject _func_IegenExample_Optionals_optionalPtrWithNullptrDefault(IEGenCObject cself, IEGenCObject task, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullptrDefault(ctocxxtask);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        auto value_ptr_result = const_cast<iegen::example::Task*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_Optionals_optionalPtrWithNullDefault(IEGenCObject cself, IEGenCObject task, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullDefault(ctocxxtask);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        auto value_ptr_result = const_cast<iegen::example::Task*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_Optionals_optionalIntWithDefault(IEGenCObject cself, int value, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalIntWithDefault(value);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

long _func_IegenExample_Optionals_optionalLongWithDefault(IEGenCObject cself, long value, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalLongWithDefault(value);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    long result {};
    return result;
}

double _func_IegenExample_Optionals_optionalDoubleWithDefault(IEGenCObject cself, double value, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalDoubleWithDefault(value);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    double result {};
    return result;
}

float _func_IegenExample_Optionals_optionalFloatWithDefault(IEGenCObject cself, float value, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalFloatWithDefault(value);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    float result {};
    return result;
}

bool _func_IegenExample_Optionals_optionalBoolWithDefault(IEGenCObject cself, bool value, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalBoolWithDefault(value);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

char* _Nonnull _func_IegenExample_Optionals_optionalStringWithDefault(IEGenCObject cself, char* _Nonnull optional_str, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxoptional_str = std::string(optional_str);
    free(optional_str);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalStringWithDefault(ctocxxoptional_str);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char _func_IegenExample_Optionals_optionalCharWithDefault(IEGenCObject cself, char symbol, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalCharWithDefault(symbol);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char result {};
    return result;
}

unsigned char _func_IegenExample_Optionals_optionalUnsignedCharWithDefault(IEGenCObject cself, unsigned char num, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalUnsignedCharWithDefault(num);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    unsigned char result {};
    return result;
}

const char * _Nonnull _func_IegenExample_Optionals_optionalCharPointerWithDefault(IEGenCObject cself, const char * _Nonnull optional_str, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalCharPointerWithDefault(optional_str);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

int _func_IegenExample_Optionals_optionalEnumWithDefault(IEGenCObject cself, int c, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxc = static_cast<iegen::example::Color>(c);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefault(ctocxxc);
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

IEGenCObject _func_IegenExample_Optionals_singleComplexDefaultValue_1(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->singleComplexDefaultValue();
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        auto value_ptr_result = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_Optionals_singleComplexDefaultValue(IEGenCObject cself, IEGenCObject task, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->singleComplexDefaultValue(ctocxxtask);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_TASK);
        auto value_ptr_result = const_cast<iegen::example::Task*>(new iegen::example::Task(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_Optionals_multipleMixedDefaultValues_1(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->multipleMixedDefaultValues();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_IegenExample_Optionals_multipleMixedDefaultValues_2(IEGenCObject cself, IEGenCObject task, int i, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
  
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->multipleMixedDefaultValues(ctocxxtask, i);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_IegenExample_Optionals_multipleMixedDefaultValues(IEGenCObject cself, IEGenCObject task, int i, IEGenCObject r, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
  
  
    
    auto& ctocxxr = *static_cast<iegen::example::Root*>(r.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->multipleMixedDefaultValues(ctocxxtask, i, ctocxxr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject create_IegenExample_Optionals_1(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::Optionals();
        return {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_Optionals_2(IEGenCObject task, int i, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
    try {
        auto this_object = new iegen::example::Optionals(ctocxxtask, i);
        return {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_Optionals(IEGenCObject task, int i, IEGenCObject r, IEGenCObject* _Nonnull iegen_err) {
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
    
    auto& ctocxxr = *static_cast<iegen::example::Root*>(r.ptr);
    try {
        auto this_object = new iegen::example::Optionals(ctocxxtask, i, ctocxxr);
        return {strdup(IEGEN_IEGEN_EXAMPLE_OPTIONALS), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_Optionals_optionalEnumWithDefaultAndFieldPrefix(IEGenCObject cself, int c, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxc = static_cast<iegen::example::ColorShade>(c);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefaultAndFieldPrefix(ctocxxc);
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_IegenExample_Optionals_optionalEnumWithInternalDefault(IEGenCObject cself, int c, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxc = static_cast<iegen::example::ColorShade>(c);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithInternalDefault(ctocxxc);
        int cxxtocresult = static_cast<int>(result);
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

char* _Nonnull _func_IegenExample_Optionals_optionalStringViewWithDefault(IEGenCObject cself, char* _Nonnull optional_str, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxoptional_str = std::string(optional_str);
    free(optional_str);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalStringViewWithDefault(ctocxxoptional_str);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject _func_IegenExample_Optionals_optionalFDPtrWithNullptrDefault(IEGenCObject cself, IEGenCObject project, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxproject = static_cast<iegen::example::Project*>(project.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalFDPtrWithNullptrDefault(ctocxxproject);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PROJECT);
        auto value_ptr_result = const_cast<iegen::example::Project*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_Optionals_optionalSharedPtrWithNullptrDefault(IEGenCObject cself, IEGenCObject person, IEGenCObject* _Nonnull iegen_err) {
    
    std::shared_ptr<iegen::example::Person> ctocxxperson = nullptr;
    if (person.ptr) {
        ctocxxperson = *static_cast<std::shared_ptr<iegen::example::Person>*>(person.ptr);
    }
  
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalSharedPtrWithNullptrDefault(ctocxxperson);
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            cxxtocresult_ptr = new std::shared_ptr<iegen::example::Person>(std::const_pointer_cast<iegen::example::Person>(result));
        } else {
            type_result = strdup("iegen::example::Person");
        }
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

