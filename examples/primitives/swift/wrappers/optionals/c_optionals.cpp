/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/08/2021-11:54.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/optionals/c_optionals.h"
#include "cxx/optionals/optionals.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/getters/person.hpp"
#include "cxx/enums/color.hpp"

using namespace iegen::example;

void release_Optionals(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Optionals*>(cself.ptr);
    }
}

CObject create_Optionals(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Optionals();
        return {strdup("iegen::example::Optionals"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_Optionals_optionalPtrWithNullptrDefault(CObject cself, CObject task, ErrorObj* _Nonnull err){
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullptrDefault(ctocxxtask);
        
        char* type_result = strdup("iegen::example::Task");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::Task*>(result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_Optionals_optionalPtrWithNullDefault(CObject cself, CObject task, ErrorObj* _Nonnull err){
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullDefault(ctocxxtask);
        
        char* type_result = strdup("iegen::example::Task");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::Task*>(result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_Optionals_optionalFDPtrWithNullptrDefault(CObject cself, CObject project, ErrorObj* _Nonnull err){
    
    auto ctocxxproject = static_cast<iegen::example::Project*>(project.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalFDPtrWithNullptrDefault(ctocxxproject);
        
        char* type_result = strdup("iegen::example::Project");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::Project*>(result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_Optionals_optionalSharedPtrWithNullptrDefault(CObject cself, CObject person, ErrorObj* _Nonnull err){
    
    std::shared_ptr<iegen::example::Person> ctocxxperson = nullptr;
    if (person.ptr) {
        ctocxxperson = *static_cast<std::shared_ptr<iegen::example::Person>*>(person.ptr);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalSharedPtrWithNullptrDefault(ctocxxperson);
        
        char* type_result = strdup("iegen::example::Person");
        void* cxxtocresult_ptr = nullptr;
        if (result) {
            cxxtocresult_ptr = new std::shared_ptr<iegen::example::Person>(result);
        } else {
            type_result = strdup("iegen::example::Person");
        }
        CObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _func_Optionals_optionalIntWithDefault(CObject cself, int value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalIntWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

long _func_Optionals_optionalLongWithDefault(CObject cself, long value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalLongWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    long result{};
    return result;
}

double _func_Optionals_optionalDoubleWithDefault(CObject cself, double value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalDoubleWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    double result{};
    return result;
}

float _func_Optionals_optionalFloatWithDefault(CObject cself, float value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalFloatWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    float result{};
    return result;
}

bool _func_Optionals_optionalBoolWithDefault(CObject cself, bool value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalBoolWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result{};
    return result;
}

char* _Nonnull _func_Optionals_optionalStringWithDefault(CObject cself, char* _Nonnull optionalStr, ErrorObj* _Nonnull err){
    auto ctocxxoptionalStr = std::string(optionalStr);
    free(optionalStr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalStringWithDefault(ctocxxoptionalStr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

char* _Nonnull _func_Optionals_optionalStringViewWithDefault(CObject cself, char* _Nonnull optionalStr, ErrorObj* _Nonnull err){
    auto ctocxxoptionalStr = std::string(optionalStr);
    free(optionalStr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalStringViewWithDefault(ctocxxoptionalStr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result{};
    return result;
}

const char * _Nonnull _func_Optionals_optionalCharPointerWithDefault(CObject cself, const char * _Nonnull optionalStr, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalCharPointerWithDefault(optionalStr);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result{};
    return result;
}

unsigned int _func_Optionals_optionalEnumWithDefault(CObject cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::Color)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefault(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result{};
    return result;
}

unsigned int _func_Optionals_optionalEnumWithDefaultAndFieldPrefix(CObject cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::ColorShade)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefaultAndFieldPrefix(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result{};
    return result;
}

unsigned int _func_Optionals_optionalEnumWithInternalDefault(CObject cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::ColorShade)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalEnumWithInternalDefault(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result{};
    return result;
}

CObject _func_Optionals_optionalRefWithDefaultComplexValue(CObject cself, CObject task, ErrorObj* _Nonnull err){
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalRefWithDefaultComplexValue(ctocxxtask);
        
        char* type_result = strdup("iegen::example::Task");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::Task*>( &result )};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_Optionals_optionalByValWithDefaultComplexValue(CObject cself, CObject task, ErrorObj* _Nonnull err){
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->optionalByValWithDefaultComplexValue(ctocxxtask);
        
        char* type_result = strdup("iegen::example::Task");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::Task*>( new iegen::example::Task(result) )};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}