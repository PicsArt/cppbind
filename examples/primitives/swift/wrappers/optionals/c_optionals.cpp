/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/optionals/c_optionals.h"
#include "cxx/optionals/optionals.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/getters/person.hpp"
#include "cxx/enums/color.hpp"

using namespace iegen::example;

void release_Optionals(void* _Nonnull cself) {
    delete static_cast<iegen::example::Optionals*>(cself);
}

void* _Nonnull create_Optionals(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Optionals();
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nullable _func_Optionals_optionalPtrWithNullptrDefault(void* _Nonnull cself, void* _Nullable task, ErrorObj* _Nonnull err){
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullptrDefault(ctocxxtask);
        
        auto cxxtocresult = const_cast<iegen::example::Task*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nullable _func_Optionals_optionalPtrWithNullDefault(void* _Nonnull cself, void* _Nullable task, ErrorObj* _Nonnull err){
    
    auto ctocxxtask = static_cast<iegen::example::Task*>(task);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalPtrWithNullDefault(ctocxxtask);
        
        auto cxxtocresult = const_cast<iegen::example::Task*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nullable _func_Optionals_optionalFDPtrWithNullptrDefault(void* _Nonnull cself, void* _Nullable project, ErrorObj* _Nonnull err){
    
    auto ctocxxproject = static_cast<iegen::example::Project*>(project);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalFDPtrWithNullptrDefault(ctocxxproject);
        
        auto cxxtocresult = const_cast<iegen::example::Project*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nullable _func_Optionals_optionalSharedPtrWithNullptrDefault(void* _Nonnull cself, void* _Nullable person, ErrorObj* _Nonnull err){
    
    std::shared_ptr<iegen::example::Person> ctocxxperson = nullptr;
    if (person) {
        ctocxxperson = *static_cast<std::shared_ptr<iegen::example::Person>*>(person);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalSharedPtrWithNullptrDefault(ctocxxperson);
        
        void* cxxtocresult = nullptr;
        if (result) {
            cxxtocresult = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Person>(result));
        }
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

int _func_Optionals_optionalIntWithDefault(void* _Nonnull cself, int value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalIntWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

long _func_Optionals_optionalLongWithDefault(void* _Nonnull cself, long value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalLongWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    long result;
    return result;
}

double _func_Optionals_optionalDoubleWithDefault(void* _Nonnull cself, double value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalDoubleWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    double result;
    return result;
}

float _func_Optionals_optionalFloatWithDefault(void* _Nonnull cself, float value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalFloatWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    float result;
    return result;
}

bool _func_Optionals_optionalBoolWithDefault(void* _Nonnull cself, bool value, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalBoolWithDefault(value);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}

char* _Nonnull _func_Optionals_optionalStringWithDefault(void* _Nonnull cself, char* _Nonnull optionalStr, ErrorObj* _Nonnull err){
    auto ctocxxoptionalStr = std::string(optionalStr);
    free(optionalStr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalStringWithDefault(ctocxxoptionalStr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result = nullptr;
    return result;
}

char* _Nonnull _func_Optionals_optionalStringViewWithDefault(void* _Nonnull cself, char* _Nonnull optionalStr, ErrorObj* _Nonnull err){
    auto ctocxxoptionalStr = std::string(optionalStr);
    free(optionalStr);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalStringViewWithDefault(ctocxxoptionalStr);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result = nullptr;
    return result;
}

const char * _Nonnull _func_Optionals_optionalCharPointerWithDefault(void* _Nonnull cself, const char * _Nonnull optionalStr, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalCharPointerWithDefault(optionalStr);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result = nullptr;
    return result;
}

unsigned int _func_Optionals_optionalEnumWithDefault(void* _Nonnull cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::Color)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefault(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result;
    return result;
}

unsigned int _func_Optionals_optionalEnumWithDefaultAndFieldPrefix(void* _Nonnull cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::ColorShade)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalEnumWithDefaultAndFieldPrefix(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result;
    return result;
}

unsigned int _func_Optionals_optionalEnumWithInternalDefault(void* _Nonnull cself, unsigned int c, ErrorObj* _Nonnull err){
    auto ctocxxc = (iegen::example::ColorShade)c;
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalEnumWithInternalDefault(ctocxxc);
        unsigned int cxxtocresult = (unsigned int)result;
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    unsigned int result;
    return result;
}

void* _Nonnull _func_Optionals_optionalRefWithDefaultComplexValue(void* _Nonnull cself, void* _Nonnull task, ErrorObj* _Nonnull err){
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalRefWithDefaultComplexValue(ctocxxtask);
        
        auto cxxtocresult = const_cast<iegen::example::Task*>( &result );
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull _func_Optionals_optionalByValWithDefaultComplexValue(void* _Nonnull cself, void* _Nonnull task, ErrorObj* _Nonnull err){
    
    auto& ctocxxtask = *static_cast<iegen::example::Task*>(task);
  
    
    auto ctocxxcself = static_cast<iegen::example::Optionals*>(cself);
    try {
        const auto& result = ctocxxcself->optionalByValWithDefaultComplexValue(ctocxxtask);
        
        auto cxxtocresult = const_cast<iegen::example::Task*>( new iegen::example::Task(result) );
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}