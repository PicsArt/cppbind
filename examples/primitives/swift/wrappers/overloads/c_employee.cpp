/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/02/2021-15:46.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/overloads/c_employee.h"
#include "cxx/overloads/employee.hpp"

using namespace iegen::example;

void release_Employee(CObject cself) {
    delete static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
}

CObject create_Employee(char* _Nonnull name){
    auto c_to_cxx_name = std::string(name);
    free(name);
    auto this_object = new iegen::example::Employee(c_to_cxx_name);
    return {strdup("iegen::example::Employee"), new std::shared_ptr<iegen::example::Employee>(this_object)};
}

CObject create_Employee_1(int age, char* _Nonnull email){
    
    auto c_to_cxx_email = std::string(email);
    free(email);
    auto this_object = new iegen::example::Employee(age, c_to_cxx_email);
    return {strdup("iegen::example::Employee"), new std::shared_ptr<iegen::example::Employee>(this_object)};
}

void _func_Employee_setData(CObject cself, char* _Nonnull name, int age, char* _Nonnull email, ErrorObj* _Nonnull err){
    auto c_to_cxx_name = std::string(name);
    free(name);
  
    
  
    auto c_to_cxx_email = std::string(email);
    free(email);
  
    
    std::shared_ptr<iegen::example::Employee> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
    try {
        c_to_cxx_cself->setData(c_to_cxx_name, age, c_to_cxx_email);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Employee_setData_1(CObject cself, int age, ErrorObj* _Nonnull err){
    
  
    
    std::shared_ptr<iegen::example::Employee> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
    try {
        c_to_cxx_cself->setData(age);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

char* _Nonnull _prop_get_Employee_name(CObject cself){
    std::shared_ptr<iegen::example::Employee> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->name();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

char* _Nonnull _prop_get_Employee_email(CObject cself){
    std::shared_ptr<iegen::example::Employee> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->email();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

int _prop_get_Employee_age(CObject cself){
    std::shared_ptr<iegen::example::Employee> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->age();
    
    return result;
}