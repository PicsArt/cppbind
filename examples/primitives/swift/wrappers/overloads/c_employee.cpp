/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/overloads/c_employee.h"
#include "cxx/overloads/employee.hpp"

using namespace iegen::example;

void release_Employee(void* _Nonnull cself) {
    delete static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
}

void* _Nonnull create_Employee(char* _Nonnull name, ErrorObj* _Nonnull err){
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new iegen::example::Employee(ctocxxname);
        return new std::shared_ptr<iegen::example::Employee>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull create_Employee_1(int age, char* _Nonnull email, ErrorObj* _Nonnull err){
    
    auto ctocxxemail = std::string(email);
    free(email);
    try {
        auto this_object = new iegen::example::Employee(age, ctocxxemail);
        return new std::shared_ptr<iegen::example::Employee>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void _func_Employee_setData(void* _Nonnull cself, char* _Nonnull name, int age, char* _Nonnull email, ErrorObj* _Nonnull err){
    auto ctocxxname = std::string(name);
    free(name);
  
    
  
    auto ctocxxemail = std::string(email);
    free(email);
  
    
    std::shared_ptr<iegen::example::Employee> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
    try {
        ctocxxcself->setData(ctocxxname, age, ctocxxemail);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Employee_setData_1(void* _Nonnull cself, int age, ErrorObj* _Nonnull err){
    
  
    
    std::shared_ptr<iegen::example::Employee> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
    try {
        ctocxxcself->setData(age);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

char* _Nonnull _prop_get_Employee_name(void* _Nonnull cself){
    std::shared_ptr<iegen::example::Employee> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
    const auto& result = ctocxxcself->name();
    auto cxxtocresult = strdup(result.data());
    return cxxtocresult;
}

char* _Nonnull _prop_get_Employee_email(void* _Nonnull cself){
    std::shared_ptr<iegen::example::Employee> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
    const auto& result = ctocxxcself->email();
    auto cxxtocresult = strdup(result.data());
    return cxxtocresult;
}

int _prop_get_Employee_age(void* _Nonnull cself){
    std::shared_ptr<iegen::example::Employee> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::Employee>*>(cself);
    const auto& result = ctocxxcself->age();
    
    return result;
}