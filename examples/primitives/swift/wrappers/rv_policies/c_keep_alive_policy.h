/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#ifndef _C_keep_alive_policy_WRAPPER_
#define _C_keep_alive_policy_WRAPPER_

#include "swift/wrappers/c_helpers.h"

#include <stdbool.h>

#if __cplusplus
extern "C" {
#endif
    void release_CppbindExample_Child1(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_Child1(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err);
    char* _Nonnull _prop_get_CppbindExample_Child1_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    void release_CppbindExample_Child3Impl(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_Child3(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err);
    char* _Nonnull _prop_get_CppbindExample_Child3_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    void release_CppbindExample_Child2(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_Child2(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err);
    char* _Nonnull _prop_get_CppbindExample_Child2_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    void release_CppbindExample_Parent1(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_Parent1(char* _Nonnull name, CppBindCObject child1, CppBindCObject child2, CppBindCObject _child3, CppBindCObject* _Nonnull cppbind_err);
    char* _Nonnull _prop_get_CppbindExample_Parent1_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    CppBindCObject _prop_get_CppbindExample_Parent1_child1(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);

    void _prop_set_CppbindExample_Parent1_child1(CppBindCObject cself, CppBindCObject child1, CppBindCObject* _Nonnull cppbind_err);

    CppBindCObject _prop_get_CppbindExample_Parent1_child2(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    CppBindCObject _prop_get_CppbindExample_Parent1_child3(CppBindCObject cself);
    void _prop_set_CppbindExample_Parent1_child3(CppBindCObject cself, CppBindCObject child3);

    void release_CppbindExample_Parent2(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_Parent2(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err);
    char* _Nonnull _prop_get_CppbindExample_Parent2_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    CppBindCDataArray _prop_get_CppbindExample_Parent2_children1(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
    void _func_CppbindExample_Parent2_addChild1(CppBindCObject cself, CppBindCObject  c, CppBindCObject* _Nonnull cppbind_err);
    void _func_CppbindExample_Parent2_addChildren1(CppBindCObject cself, CppBindCDataArray  c, CppBindCObject* _Nonnull cppbind_err);
    void _func_CppbindExample_Parent2_addChild2(CppBindCObject cself, CppBindCObject  c, CppBindCObject* _Nonnull cppbind_err);
    void _func_CppbindExample_Parent2_addChildren2(CppBindCObject cself, CppBindCDataArray  c, CppBindCObject* _Nonnull cppbind_err);
    CppBindCDataArray _prop_get_CppbindExample_Parent2_children2(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err);
#if __cplusplus
}
#endif
#endif /* ifndef _C_keep_alive_policy_WRAPPER_ */
