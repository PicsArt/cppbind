/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/16/2022-05:31.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/rv_policies/c_return_value_policies.h"
#include "cxx/rv_policies/return_value_policies.hpp"

using namespace iegen::example;

void release_SwValue(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Value*>(cself.ptr);
    }
}

IEGenCObject create_SwValue(char* _Nonnull name, IEGenCObject* _Nonnull err){
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new iegen::example::Value(ctocxxname);
        return {strdup("iegen::example::Value"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _prop_get_SwValue_name(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::Value*>(cself.ptr);
    const auto& result = ctocxxcself->name();
    auto cxxtocresult = strdup(result.data());
    return cxxtocresult;
}

void _prop_set_SwValue_name(IEGenCObject cself, char* _Nonnull name){
    
    auto ctocxxcself = static_cast<iegen::example::Value*>(cself.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    ctocxxcself->setName(ctocxxname);
}

void release_ValueSharedRef(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::ValueSharedRef>*>(cself.ptr);
    }
}

IEGenCObject create_ValueSharedRef(char* _Nonnull name, IEGenCObject* _Nonnull err){
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new iegen::example::ValueSharedRef(ctocxxname);
        return {strdup("iegen::example::ValueSharedRef"), new std::shared_ptr<iegen::example::ValueSharedRef>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _prop_get_ValueSharedRef_name(IEGenCObject cself){
    std::shared_ptr<iegen::example::ValueSharedRef> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::ValueSharedRef>*>(cself.ptr);
    const auto& result = ctocxxcself->name();
    auto cxxtocresult = strdup(result.data());
    return cxxtocresult;
}

void _prop_set_ValueSharedRef_name(IEGenCObject cself, char* _Nonnull name){
    
    std::shared_ptr<iegen::example::ValueSharedRef> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::ValueSharedRef>*>(cself.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    ctocxxcself->setName(ctocxxname);
}

void release_ValuesHolder(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    }
}

IEGenCObject create_ValuesHolder(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::ValuesHolder();
        return {strdup("iegen::example::ValuesHolder"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_ValuesHolder_1(IEGenCObject valuePtr, IEGenCObject valueRef, IEGenCObject* _Nonnull err){
    
    auto ctocxxvaluePtr = static_cast<iegen::example::Value*>(valuePtr.ptr);
    
    std::shared_ptr<iegen::example::ValueSharedRef> ctocxxvalueRef;
    ctocxxvalueRef = *static_cast<std::shared_ptr<iegen::example::ValueSharedRef>*>(valueRef.ptr);
    try {
        auto this_object = new iegen::example::ValuesHolder(ctocxxvaluePtr, ctocxxvalueRef);
        return {strdup("iegen::example::ValuesHolder"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrDefault(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrDefault();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrCopy(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrCopy();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(*result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrMove(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrMove();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(std::move(*result)));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrAutomatic(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrAutomatic();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrAutomaticReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrAutomaticReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getPtrTakeOwnership(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getPtrTakeOwnership();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueDefault(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueDefault();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueCopy(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueCopy();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueMove(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueMove();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueAutomatic(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueAutomatic();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueAutomaticReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueAutomaticReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getValueTakeOwnership(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getValueTakeOwnership();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefCopy(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefCopy();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefDefault(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefDefault();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefMove(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefMove();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(std::move(result)));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(&result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefAutomatic(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefAutomatic();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefAutomaticReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefAutomaticReference();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(new iegen::example::Value(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getRefTakeOwnership(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getRefTakeOwnership();
        
        char* type_result = strdup("iegen::example::Value");
        auto value_ptr_result = const_cast<iegen::example::Value*>(&result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefDefault(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefDefault();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefCopy(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefCopy();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefMove(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefMove();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefReference();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefAutomatic(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefAutomatic();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefAutomaticReference(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefAutomaticReference();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_ValuesHolder_getSharedRefTakeOwnership(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSharedRefTakeOwnership();
        
        char* type_result = strdup("iegen::example::ValueSharedRef");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_ValuesHolder_clean(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::ValuesHolder*>(cself.ptr);
    try {
        ctocxxcself->clean();
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}
void release_AnotherValueHolder(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::AnotherValueHolder*>(cself.ptr);
    }
}

IEGenCObject create_AnotherValueHolder(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::AnotherValueHolder();
        return {strdup("iegen::example::AnotherValueHolder"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_AnotherValueHolder_value(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::AnotherValueHolder*>(cself.ptr);
    const auto& result = ctocxxcself->value();
    
    char* type_result = strdup("iegen::example::Value");
    auto value_ptr_result = const_cast<iegen::example::Value*>(result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

IEGenCObject _prop_get_AnotherValueHolder_valueReference(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::AnotherValueHolder*>(cself.ptr);
    const auto& result = ctocxxcself->valueReference();
    
    char* type_result = strdup("iegen::example::Value");
    auto value_ptr_result = const_cast<iegen::example::Value*>(result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

IEGenCObject _prop_get_AnotherValueHolder_sharedValue(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::AnotherValueHolder*>(cself.ptr);
    const auto& result = ctocxxcself->sharedValue();
    
    char* type_result = strdup("iegen::example::ValueSharedRef");
    void* cxxtocresult_ptr;
    cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
    IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

IEGenCObject _prop_get_AnotherValueHolder_sharedValueReference(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::AnotherValueHolder*>(cself.ptr);
    const auto& result = ctocxxcself->sharedValueReference();
    
    char* type_result = strdup("iegen::example::ValueSharedRef");
    void* cxxtocresult_ptr;
    cxxtocresult_ptr = new std::shared_ptr<iegen::example::ValueSharedRef>(result);
    IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}
