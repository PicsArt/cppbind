/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/13/2022-14:16.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/rv_policies/c_swift_keep_alive_policy.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/rv_policies/keep_alive_policy.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_CHILD1 = "cppbind::example::Child1";
const char* CPPBIND_CPPBIND_EXAMPLE_CHILD3 = "cppbind::example::Child3";
const char* CPPBIND_CPPBIND_EXAMPLE_CHILD2 = "cppbind::example::Child2";
const char* CPPBIND_CPPBIND_EXAMPLE_PARENT1 = "cppbind::example::Parent1";
const char* CPPBIND_CPPBIND_EXAMPLE_PARENT2 = "cppbind::example::Parent2";

void release_CppbindExample_Child1(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Child1*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Child1(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Child1(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD1), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_Child1_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Child1*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Child3Impl(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Child3*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Child3(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Child3(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD3), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_Child3_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Child3*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Child2(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::Child2>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Child2(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Child2(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD2), new std::shared_ptr<cppbind::example::Child2>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_Child2_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::Child2> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::Child2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void release_CppbindExample_Parent1(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Parent1*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Parent1(char* _Nonnull name, CppBindCObject child1, CppBindCObject child2, CppBindCObject _child3, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    
    auto ctocxxchild1 = static_cast<cppbind::example::Child1*>(child1.ptr);
    
    std::shared_ptr<cppbind::example::Child2> ctocxxchild2;
    ctocxxchild2 = *static_cast<std::shared_ptr<cppbind::example::Child2>*>(child2.ptr);
    
    auto ctocxx_child3 = static_cast<cppbind::example::Child3*>(_child3.ptr);
    try {
        auto this_object = new cppbind::example::Parent1(ctocxxname, ctocxxchild1, ctocxxchild2, ctocxx_child3);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_PARENT1), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_Parent1_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_Parent1_child1(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->child1();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD1);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _prop_set_CppbindExample_Parent1_child1(CppBindCObject cself, CppBindCObject child1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    
    auto ctocxxchild1 = static_cast<cppbind::example::Child1*>(child1.ptr);
    try {
        ctocxxcself->setChild1(ctocxxchild1);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCObject _prop_get_CppbindExample_Parent1_child2(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->child2();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::Child2>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_Parent1_child3(CppBindCObject cself) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    decltype(auto) result = ctocxxcself->child3;
    
    char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD3);
    auto value_ptr_result = result;
    CppBindCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

void _prop_set_CppbindExample_Parent1_child3(CppBindCObject cself, CppBindCObject child3) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Parent1*>(cself.ptr);
    
    auto ctocxxchild3 = static_cast<cppbind::example::Child3*>(child3.ptr);
    ctocxxcself->child3 = ctocxxchild3;
}

void release_CppbindExample_Parent2(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Parent2*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Parent2(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Parent2(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_PARENT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_Parent2_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_Parent2_children1(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->children1();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = strdup(CPPBIND_CPPBIND_EXAMPLE_CHILD1);
            auto value_ptr_value_result = value_result;
            CppBindCObject cxxtocvalue_result = {type_value_result, value_ptr_value_result};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void _func_CppbindExample_Parent2_addChild1(CppBindCObject cself, CppBindCObject c, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto ctocxxc = static_cast<cppbind::example::Child1*>(c.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        ctocxxcself->addChild1(ctocxxc);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void _func_CppbindExample_Parent2_addChildren1(CppBindCObject cself, CppBindCDataArray c, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<Child1 *> ctocxxc;

    auto data_c = reinterpret_cast<CppBindCObject*>(c.data);

    for (size_t _i_c = 0; _i_c < c.size; ++_i_c) {
        auto& value_c = data_c[_i_c];
        
        auto ctocxxvalue_c = static_cast<cppbind::example::Child1*>(value_c.ptr);
        ctocxxc.emplace_back(ctocxxvalue_c);
    }

    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        ctocxxcself->addChildren1(ctocxxc);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void _func_CppbindExample_Parent2_addChild2(CppBindCObject cself, CppBindCObject c, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    std::shared_ptr<cppbind::example::Child2> ctocxxc;
    ctocxxc = *static_cast<std::shared_ptr<cppbind::example::Child2>*>(c.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        ctocxxcself->addChild2(ctocxxc);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void _func_CppbindExample_Parent2_addChildren2(CppBindCObject cself, CppBindCDataArray c, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<std::shared_ptr<Child2>> ctocxxc;

    auto data_c = reinterpret_cast<CppBindCObject*>(c.data);

    for (size_t _i_c = 0; _i_c < c.size; ++_i_c) {
        auto& value_c = data_c[_i_c];
        
        std::shared_ptr<cppbind::example::Child2> ctocxxvalue_c;
        ctocxxvalue_c = *static_cast<std::shared_ptr<cppbind::example::Child2>*>(value_c.ptr);
        ctocxxc.emplace_back(ctocxxvalue_c);
    }

    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        ctocxxcself->addChildren2(ctocxxc);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

CppBindCDataArray _prop_get_CppbindExample_Parent2_children2(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Parent2*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->children2();
        auto _data_cxxtocresult = new CppBindCObject [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            char* type_value_result = nullptr;
            void* cxxtocvalue_result_ptr = nullptr;
            cxxtocvalue_result_ptr = new std::shared_ptr<cppbind::example::Child2>(value_result);
            CppBindCObject cxxtocvalue_result = {type_value_result, cxxtocvalue_result_ptr};
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

