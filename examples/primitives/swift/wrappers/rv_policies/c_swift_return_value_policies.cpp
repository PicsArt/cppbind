/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:36.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/rv_policies/c_swift_return_value_policies.h"
#include "cxx/rv_policies/return_value_policies.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_SWVALUE = "cppbind::example::Value";
const char* CPPBIND_CPPBIND_EXAMPLE_SWMOVABLEVALUE = "cppbind::example::MovableValue";
const char* CPPBIND_CPPBIND_EXAMPLE_VALUESHAREDREF = "cppbind::example::ValueSharedRef";
const char* CPPBIND_CPPBIND_EXAMPLE_VALUESHOLDER = "cppbind::example::ValuesHolder";
const char* CPPBIND_CPPBIND_EXAMPLE_ANOTHERVALUEHOLDER = "cppbind::example::AnotherValueHolder";

void release_CppbindExample_SwValue(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Value*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_SwValue(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Value(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_SwValue_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Value*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_CppbindExample_SwValue_name(CppBindCObject cself, char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Value*>(cself.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    try {
        ctocxxcself->setName(ctocxxname);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void release_CppbindExample_SwMovableValue(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::MovableValue*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_SwMovableValue(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::MovableValue(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_SWMOVABLEVALUE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_SwMovableValue_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::MovableValue*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_CppbindExample_SwMovableValue_name(CppBindCObject cself, char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::MovableValue*>(cself.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    try {
        ctocxxcself->setName(ctocxxname);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void release_CppbindExample_ValueSharedRef(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::ValueSharedRef>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ValueSharedRef(char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::ValueSharedRef(ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_VALUESHAREDREF), new std::shared_ptr<cppbind::example::ValueSharedRef>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_ValueSharedRef_name(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::ValueSharedRef> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::ValueSharedRef>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->name();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

void _prop_set_CppbindExample_ValueSharedRef_name(CppBindCObject cself, char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    std::shared_ptr<cppbind::example::ValueSharedRef> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::ValueSharedRef>*>(cself.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    try {
        ctocxxcself->setName(ctocxxname);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void release_CppbindExample_ValuesHolder(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ValuesHolder(CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::ValuesHolder();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_VALUESHOLDER), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ValuesHolder1(CppBindCObject value_ptr, CppBindCObject value_ref, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto ctocxxvalue_ptr = static_cast<cppbind::example::Value*>(value_ptr.ptr);
    
    std::shared_ptr<cppbind::example::ValueSharedRef> ctocxxvalue_ref;
    ctocxxvalue_ref = *static_cast<std::shared_ptr<cppbind::example::ValueSharedRef>*>(value_ref.ptr);
    try {
        auto this_object = new cppbind::example::ValuesHolder(ctocxxvalue_ptr, ctocxxvalue_ref);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_VALUESHOLDER), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrDefault(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrDefault();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrCopy(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrCopy();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(*result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrMove(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrMove();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(std::move(*result));
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrAutomatic(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrAutomatic();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrAutomaticReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrAutomaticReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getPtrTakeOwnership(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getPtrTakeOwnership();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueDefault(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueDefault();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueCopy(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueCopy();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueMove(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueMove();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(std::move(result));
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getMovableValue(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getMovableValue();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWMOVABLEVALUE);
        auto value_ptr_result = new cppbind::example::MovableValue(std::move(result));
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueAutomatic(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueAutomatic();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueAutomaticReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueAutomaticReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getValueTakeOwnership(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getValueTakeOwnership();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefCopy(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefCopy();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefDefault(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefDefault();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefMove(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefMove();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(std::move(result));
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = &result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefAutomatic(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefAutomatic();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefAutomaticReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefAutomaticReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = new cppbind::example::Value(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getRefTakeOwnership(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getRefTakeOwnership();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = &result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefDefault(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefDefault();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefCopy(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefCopy();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefMove(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefMove();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefReference();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefAutomatic(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefAutomatic();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefAutomaticReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefAutomaticReference();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ValuesHolder_getSharedRefTakeOwnership(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->getSharedRefTakeOwnership();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExample_ValuesHolder_clean(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ValuesHolder*>(cself.ptr);
    try {
        ctocxxcself->clean();
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

void release_CppbindExample_AnotherValueHolder(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::AnotherValueHolder*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_AnotherValueHolder(CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::AnotherValueHolder();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ANOTHERVALUEHOLDER), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_AnotherValueHolder_value(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::AnotherValueHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->value();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_AnotherValueHolder_valueReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::AnotherValueHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->valueReference();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_SWVALUE);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_AnotherValueHolder_sharedValue(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::AnotherValueHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->sharedValue();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_AnotherValueHolder_sharedValueReference(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::AnotherValueHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->sharedValueReference();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::ValueSharedRef>(result);
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

