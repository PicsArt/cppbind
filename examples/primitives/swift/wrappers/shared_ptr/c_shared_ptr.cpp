/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/02/2022-10:55.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/shared_ptr/c_shared_ptr.h"
#include "cxx/shared_ptr/shared_ptr.hpp"

using namespace Example;

void release_Car(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    }
}

CObject create_Car(int cost, ErrorObj* _Nonnull err){
    
    try {
        auto this_object = new Example::Car(cost);
        return {strdup("Example::Car"), new std::shared_ptr<Example::Car>(this_object)};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _prop_get_Car_cost(CObject cself){
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    const auto& result = ctocxxcself->cost();
    
    return result;
}

void _func_Car_setCostWithCarSharedPtr(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxsp;
    ctocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(sp.ptr);
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        ctocxxcself->setCostWithCarSharedPtr(ctocxxsp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCar(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxsp_shared_ptr;
    ctocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(sp.ptr);
    auto& ctocxxsp = *ctocxxsp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        ctocxxcself->setCostWithCar(ctocxxsp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCarConstSharedPtr(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<const Example::Car> ctocxxsp;
    ctocxxsp = *static_cast<std::shared_ptr<const Example::Car>*>(sp.ptr);
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        ctocxxcself->setCostWithCarConstSharedPtr(ctocxxsp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CObject _func_Car_makeConstSharedPtr(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxsp;
    ctocxxsp = *static_cast<std::shared_ptr<Example::Car>*>(sp.ptr);
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->makeConstSharedPtr(ctocxxsp);
        
        char* type_result = strdup("Example::Car");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<const Example::Car>(result);
        CObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_Car_setCostWithCarRef(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxsp_shared_ptr;
    ctocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(sp.ptr);
    auto& ctocxxsp = *ctocxxsp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        ctocxxcself->setCostWithCarRef(ctocxxsp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCarPtr(CObject cself, CObject sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxsp_shared_ptr;
    ctocxxsp_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(sp.ptr);
    auto ctocxxsp = ctocxxsp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        ctocxxcself->setCostWithCarPtr(ctocxxsp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

CObject _func_Car_getNewCarSharedPtr(CObject cself, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<Example::Car>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getNewCarSharedPtr();
        
        char* type_result = strdup("Example::Car");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<Example::Car>(result);
        CObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
void release_CarUsage(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<Example::CarUsage*>(cself.ptr);
    }
}

CObject create_CarUsage(CObject car, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> ctocxxcar_shared_ptr;
    ctocxxcar_shared_ptr = *static_cast<std::shared_ptr<Example::Car>*>(car.ptr);
    auto ctocxxcar = ctocxxcar_shared_ptr.get();
    try {
        auto this_object = new Example::CarUsage(ctocxxcar);
        return {strdup("Example::CarUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_CarUsage_getCar(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<Example::CarUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getCar();
        
        std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        char* type_result_shared_ptr = strdup("Example::Car");
        void* cxxtocresult_ptr;
        cxxtocresult_ptr = new std::shared_ptr<Example::Car>(result_shared_ptr);
        CObject cxxtocresult = {type_result_shared_ptr, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
