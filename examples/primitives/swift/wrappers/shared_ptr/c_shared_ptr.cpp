/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/29/2021-12:00.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/shared_ptr/c_shared_ptr.h"
#include "cxx/shared_ptr/shared_ptr.hpp"

using namespace Example;

void release_Car(void* _Nonnull cself) {
    delete static_cast<std::shared_ptr<Example::Car>*>(cself);
}

void* _Nonnull create_Car(int cost){
    
    auto this_object = new Example::Car(cost);
    return new std::shared_ptr<Example::Car>(this_object);
}

int _prop_get_Car_cost(void* _Nonnull cself){
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    auto result = c_to_cxx_cself->cost();
    
    return result;
}

void _func_Car_setCostWithCarSharedPtr(void* _Nonnull cself, void* _Nonnull sp, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> c_to_cxx_sp;
    c_to_cxx_sp = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(sp));
  
    
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    try {
        c_to_cxx_cself->setCostWithCarSharedPtr(c_to_cxx_sp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCar(void* _Nonnull cself, void* _Nonnull sp, ErrorObj* _Nonnull err){
    std::shared_ptr<Example::Car> c_to_cxx_sp_shared_ptr;
    c_to_cxx_sp_shared_ptr = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(sp));
    auto& c_to_cxx_sp = *c_to_cxx_sp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    try {
        c_to_cxx_cself->setCostWithCar(c_to_cxx_sp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCarRef(void* _Nonnull cself, void* _Nonnull sp, ErrorObj* _Nonnull err){
    std::shared_ptr<Example::Car> c_to_cxx_sp_shared_ptr;
    c_to_cxx_sp_shared_ptr = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(sp));
    auto& c_to_cxx_sp = *c_to_cxx_sp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    try {
        c_to_cxx_cself->setCostWithCarRef(c_to_cxx_sp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_Car_setCostWithCarPtr(void* _Nonnull cself, void* _Nonnull sp, ErrorObj* _Nonnull err){
    std::shared_ptr<Example::Car> c_to_cxx_sp_shared_ptr;
    c_to_cxx_sp_shared_ptr = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(sp));
    auto c_to_cxx_sp = c_to_cxx_sp_shared_ptr.get();
  
    
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    try {
        c_to_cxx_cself->setCostWithCarPtr(c_to_cxx_sp);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void* _Nonnull _func_Car_getNewCarSharedPtr(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    std::shared_ptr<Example::Car> c_to_cxx_cself;
    c_to_cxx_cself = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getNewCarSharedPtr();
        
        void* cxx_to_c_result;
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Car>(std::static_pointer_cast<Example::Car>(result)));
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}
void release_CarUsage(void* _Nonnull cself) {
    delete dynamic_cast<Example::CarUsage*>(static_cast<Example::CarUsage*>(cself));
}

void* _Nonnull create_CarUsage(void* _Nonnull car){
    std::shared_ptr<Example::Car> c_to_cxx_car_shared_ptr;
    c_to_cxx_car_shared_ptr = std::dynamic_pointer_cast<Example::Car>(*static_cast<std::shared_ptr<Example::Car>*>(car));
    auto c_to_cxx_car = c_to_cxx_car_shared_ptr.get();
    auto this_object = new Example::CarUsage(c_to_cxx_car);
    return static_cast<Example::CarUsage*>(this_object);
}

void* _Nonnull _func_CarUsage_getCar(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::CarUsage*>(static_cast<Example::CarUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getCar();

        // manually added
        void* cxx_to_c_result;
        std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Car>(std::static_pointer_cast<Example::Car>(result_shared_ptr)));
        return cxx_to_c_result;

        //auto value_ptr_result = const_cast<Example::Car*>( new Example::Car(result) );
        //auto cxx_to_c_result = static_cast<Example::Car*>(value_ptr_result);
        //return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}

void* _Nonnull _func_CarUsage_getCarPtr(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::CarUsage*>(static_cast<Example::CarUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getCarPtr();

        /// manually added
        void* cxx_to_c_result;
        // std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(*result);
        std::shared_ptr<Example::Car> result_shared_ptr {const_cast<Example::Car*>(result), [](Example::Car* p) {}};
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Car>(std::static_pointer_cast<Example::Car>(result_shared_ptr)));
        return cxx_to_c_result;

//        auto value_ptr_result = const_cast<Example::Car*>(result);
//        auto cxx_to_c_result = static_cast<Example::Car*>(value_ptr_result);
//        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}

void* _Nonnull _func_CarUsage_getCarRef(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::CarUsage*>(static_cast<Example::CarUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getCarRef();

        /// manually added
        void* cxx_to_c_result;
        // std::shared_ptr<Example::Car> result_shared_ptr = std::make_shared<Example::Car>(result);
        std::shared_ptr<Example::Car> result_shared_ptr {const_cast<Example::Car*>(&result), [](Example::Car* p) {}};
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Car>(std::static_pointer_cast<Example::Car>(result_shared_ptr)));
        return cxx_to_c_result;

//        auto value_ptr_result = const_cast<Example::Car*>( &result );
//        auto cxx_to_c_result = static_cast<Example::Car*>(value_ptr_result);
//        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}
void release_Plane(void* _Nonnull cself) {
    delete static_cast<std::shared_ptr<std::enable_shared_from_this<Example::Plane>>*>(cself);
}

void* _Nonnull create_Plane(int seats){
    
    auto this_object = new Example::Plane(seats);
    return new std::shared_ptr<Example::Plane>(this_object);
}

int _prop_get_Plane_seats(void* _Nonnull cself){
    std::shared_ptr<Example::Plane> c_to_cxx_cself;
    /// changed to static_pointer_cast
    c_to_cxx_cself = std::static_pointer_cast<Example::Plane>(*static_cast<std::shared_ptr<std::enable_shared_from_this<Example::Plane>>*>(cself));
    auto result = c_to_cxx_cself->seats();
    
    return result;
}
void release_PlaneUsage(void* _Nonnull cself) {
    delete dynamic_cast<Example::PlaneUsage*>(static_cast<Example::PlaneUsage*>(cself));
}

void* _Nonnull create_PlaneUsage(void* _Nonnull plane){
    std::shared_ptr<Example::Plane> c_to_cxx_plane_shared_ptr;
    /// changed to static_pointer_cast
    c_to_cxx_plane_shared_ptr = std::static_pointer_cast<Example::Plane>(*static_cast<std::shared_ptr<std::enable_shared_from_this<Example::Plane>>*>(plane));
    auto c_to_cxx_plane = c_to_cxx_plane_shared_ptr.get();
    auto this_object = new Example::PlaneUsage(c_to_cxx_plane);
    return static_cast<Example::PlaneUsage*>(this_object);
}

void* _Nonnull _func_PlaneUsage_getPlane(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::PlaneUsage*>(static_cast<Example::PlaneUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getPlane();

        /// manually added
        void* cxx_to_c_result;
        std::shared_ptr<Example::Plane> result_shared_ptr = std::make_shared<Example::Plane>(result);
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Plane>(std::static_pointer_cast<Example::Plane>(result_shared_ptr)));
        return cxx_to_c_result;

//        auto value_ptr_result = const_cast<Example::Plane*>( new Example::Plane(result) );
//        auto cxx_to_c_result = static_cast<std::enable_shared_from_this<Example::Plane>*>(value_ptr_result);
//        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}

void* _Nonnull _func_PlaneUsage_getPlanePtr(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::PlaneUsage*>(static_cast<Example::PlaneUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getPlanePtr();

        /// manually added
        void* cxx_to_c_result;
        std::shared_ptr<Example::Plane> result_shared_ptr = const_cast<Example::Plane&>(*result).shared_from_this();
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Plane>(std::static_pointer_cast<Example::Plane>(result_shared_ptr)));
        return cxx_to_c_result;

//        auto value_ptr_result = const_cast<Example::Plane*>(result);
//        auto cxx_to_c_result = static_cast<std::enable_shared_from_this<Example::Plane>*>(value_ptr_result);
//        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}

void* _Nonnull _func_PlaneUsage_getPlaneRef(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<Example::PlaneUsage*>(static_cast<Example::PlaneUsage*>(cself));
    try {
        const auto& result = c_to_cxx_cself->getPlaneRef();

        /// manually added
        void* cxx_to_c_result;
        std::shared_ptr<Example::Plane> result_shared_ptr = const_cast<Example::Plane&>(result).shared_from_this();
        cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<Example::Plane>(std::static_pointer_cast<Example::Plane>(result_shared_ptr)));
        return cxx_to_c_result;

//        auto value_ptr_result = const_cast<Example::Plane*>( &result );
//        auto cxx_to_c_result = static_cast<std::enable_shared_from_this<Example::Plane>*>(value_ptr_result);
//        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result;
    return result;
}