/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/17/2022-11:13.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/shared_ptr/c_shared_ptr_symbol.h"
#include "cxx/shared_ptr/shared_ptr_symbol.hpp"

using namespace iegen::example;

void release_SignSharedImpl(IEGenCObject cself, bool owner){
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::SignShared>*>(cself.ptr);
    }
}

IEGenCObject create_SignShared(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::SignShared();
        return {strdup("iegen::example::SignShared"), new std::shared_ptr<iegen::example::SignShared>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_SignShared_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::SignShared> ctocxxcself;
    if (strcmp(cself.type, "iegen::example::SignShared") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::example::DigitShared") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}
void release_TextShared(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<std::shared_ptr<iegen::example::TextShared>*>(cself.ptr);
    }
}

IEGenCObject create_TextShared(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::TextShared();
        return {strdup("iegen::example::TextShared"), new std::shared_ptr<iegen::example::TextShared>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_TextShared_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::TextShared> ctocxxcself;
    if (strcmp(cself.type, "iegen::example::TextShared") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(cself.ptr);
    else if (strcmp(cself.type, "iegen::example::DigitShared") == 0)
        ctocxxcself = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(cself.ptr);
    else {
        std::cerr << "Unexpected object type: " << cself.type << std::endl;
        exit(1);
    }
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCObject create_DigitShared(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::DigitShared();
        return {strdup("iegen::example::DigitShared"), new std::shared_ptr<iegen::example::DigitShared>(this_object)};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_DigitShared_typeName(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::DigitShared> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->typeName();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}
void release_SymbolUsageShared(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    }
}

IEGenCObject create_SymbolUsageShared(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::SymbolUsageShared();
        return {strdup("iegen::example::SymbolUsageShared"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_SymbolUsageShared_1(IEGenCObject d, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::DigitShared> ctocxxd;
    ctocxxd = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(d.ptr);
    try {
        auto this_object = new iegen::example::SymbolUsageShared(ctocxxd);
        return {strdup("iegen::example::SymbolUsageShared"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_SymbolUsageShared_getTextType(IEGenCObject cself, IEGenCObject t, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::TextShared> ctocxxt;
    if (strcmp(t.type, "iegen::example::TextShared") == 0)
        ctocxxt = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(t.ptr);
    else if (strcmp(t.type, "iegen::example::DigitShared") == 0)
        ctocxxt = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(t.ptr);
    else {
        std::cerr << "Unexpected object type: " << t.type << std::endl;
        exit(1);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextType(ctocxxt);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

char* _Nonnull _func_SymbolUsageShared_getSignType(IEGenCObject cself, IEGenCObject s, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::SignShared> ctocxxs;
    if (strcmp(s.type, "iegen::example::SignShared") == 0)
        ctocxxs = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(s.ptr);
    else if (strcmp(s.type, "iegen::example::DigitShared") == 0)
        ctocxxs = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(s.ptr);
    else {
        std::cerr << "Unexpected object type: " << s.type << std::endl;
        exit(1);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignType(ctocxxs);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

int _func_SymbolUsageShared_getTextId(IEGenCObject cself, IEGenCObject t, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::TextShared> ctocxxt;
    if (strcmp(t.type, "iegen::example::TextShared") == 0)
        ctocxxt = *static_cast<std::shared_ptr<iegen::example::TextShared>*>(t.ptr);
    else if (strcmp(t.type, "iegen::example::DigitShared") == 0)
        ctocxxt = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(t.ptr);
    else {
        std::cerr << "Unexpected object type: " << t.type << std::endl;
        exit(1);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextId(ctocxxt);
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_SymbolUsageShared_getSignId(IEGenCObject cself, IEGenCObject s, IEGenCObject* _Nonnull err){
    
    std::shared_ptr<iegen::example::SignShared> ctocxxs;
    if (strcmp(s.type, "iegen::example::SignShared") == 0)
        ctocxxs = *static_cast<std::shared_ptr<iegen::example::SignShared>*>(s.ptr);
    else if (strcmp(s.type, "iegen::example::DigitShared") == 0)
        ctocxxs = *static_cast<std::shared_ptr<iegen::example::DigitShared>*>(s.ptr);
    else {
        std::cerr << "Unexpected object type: " << s.type << std::endl;
        exit(1);
    }
  
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignId(ctocxxs);
        
        return result;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

IEGenCObject _func_SymbolUsageShared_getTextPtr(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getTextPtr();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr;

        auto& arg_pointee_result = *result.get();
        const char * name_result = typeid(arg_pointee_result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::TextShared");
        }
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result));
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_SymbolUsageShared_getSignPtr(IEGenCObject cself, IEGenCObject* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::SymbolUsageShared*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSignPtr();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr;

        auto& arg_pointee_result = *result.get();
        const char * name_result = typeid(arg_pointee_result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::SignShared");
        }
        cxxtocresult_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(result));
        IEGenCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}
