/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/07/2022-16:23.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/simple/c_holder.h"
#include "cxx/simple/holder.hpp"
#include "cxx/simple/task.hpp"

using namespace iegen::example;

void release_Holder(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Holder*>(cself.ptr);
    }
}

IEGenCObject create_Holder(IEGenCObject* _Nonnull err){
    try {
        auto this_object = new iegen::example::Holder();
        return {strdup("iegen::example::Holder"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_Holder_task(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::Holder*>(cself.ptr);
    const auto& result = ctocxxcself->task();
    
    char* type_result = strdup("iegen::example::Task");
    auto value_ptr_result = const_cast<iegen::example::Task*>(&result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}
