/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/07/2022-12:05.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/simple/c_task.h"
#include "cxx/simple/task.hpp"

using namespace iegen::example;

void release_Task(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Task*>(cself.ptr);
    }
}

IEGenCObject create_Task(char* _Nonnull title, IEGenCObject* _Nonnull err){
    auto ctocxxtitle = std::string(title);
    free(title);
    try {
        auto this_object = new iegen::example::Task(ctocxxtitle);
        return {strdup("iegen::example::Task"), this_object};
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _prop_get_Task_title(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::Task*>(cself.ptr);
    const auto& result = ctocxxcself->title();
    auto cxxtocresult = strdup(result.data());
    return cxxtocresult;
}

void _func_Task_setTitle(IEGenCObject cself, char* _Nonnull title, IEGenCObject* _Nonnull err){
    auto ctocxxtitle = std::string(title);
    free(title);
  
    
    auto ctocxxcself = static_cast<iegen::example::Task*>(cself.ptr);
    try {
        ctocxxcself->setTitle(ctocxxtitle);
    }
    catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    }
    catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}
