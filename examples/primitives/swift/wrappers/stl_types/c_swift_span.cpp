/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/20/2022-14:22.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/stl_types/c_swift_span.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/stl_types/span.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

int _func_CppbindExample_sumSpan(CppBindCDataArray items, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<int> ctocxxitemsVector;

    auto data_items = reinterpret_cast<int*>(items.data);

    for (size_t _i_items = 0; _i_items < items.size; ++_i_items) {
        auto& value_items = data_items[_i_items];
        
        ctocxxitemsVector.emplace_back(value_items);
    }
    std::span<int> ctocxxitems(ctocxxitemsVector);
    try {
        decltype(auto) result = cppbind::example::sumSpan(ctocxxitems);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_getSpan(CppBindCDataArray items, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<int> ctocxxitemsVector;

    auto data_items = reinterpret_cast<int*>(items.data);

    for (size_t _i_items = 0; _i_items < items.size; ++_i_items) {
        auto& value_items = data_items[_i_items];
        
        ctocxxitemsVector.emplace_back(value_items);
    }
    std::span<int> ctocxxitems(ctocxxitemsVector);
    try {
        decltype(auto) result = cppbind::example::getSpan(ctocxxitems);
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_getSpan2(CppBindCDataArray items, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::vector<int> ctocxxitemsVector;

    auto data_items = reinterpret_cast<int*>(items.data);

    for (size_t _i_items = 0; _i_items < items.size; ++_i_items) {
        auto& value_items = data_items[_i_items];
        
        ctocxxitemsVector.emplace_back(value_items);
    }
    std::span<int, 2> ctocxxitems(ctocxxitemsVector);
    try {
        decltype(auto) result = cppbind::example::getSpan2(ctocxxitems);
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

