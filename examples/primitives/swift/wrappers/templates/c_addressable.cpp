/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/06/2021-09:12.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_addressable.h"
#include "cxx/templates/addressable.hpp"
#include "cxx/simple/root.hpp"

using namespace iegen::example;

void release_AddressableImplRoot(void* _Nonnull cself){
    delete static_cast<std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>*>(cself);
}

void* _Nonnull create_AddressableRoot(void* _Nonnull parent, char* _Nonnull name, ErrorObj* _Nonnull err){
    
    auto& c_to_cxx_parent = *static_cast<iegen::example::Root*>(parent);
    auto c_to_cxx_name = std::string(name);
    free(name);
    try {
        auto this_object = new iegen::example::Addressable<iegen::example::Root>(c_to_cxx_parent, c_to_cxx_name);
        return new std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>(this_object);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

char* _Nonnull _func_AddressableRoot_absPath(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    std::shared_ptr<iegen::example::Addressable<iegen::example::Root>> c_to_cxx_cself;
    c_to_cxx_cself = *static_cast<std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>*>(cself);
    try {
        const auto& result = c_to_cxx_cself->absPath();
        auto cxx_to_c_result = strdup(result.data());
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result = nullptr;
    return result;
}