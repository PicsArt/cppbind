/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/23/2022-10:47.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_addressable.h"
#include "cxx/templates/addressable.hpp"
#include "cxx/simple/root.hpp"
#include "cxx/templates/component.hpp"

using namespace iegen::example;

void release_IegenExample_AddressableImplRoot(IEGenCObject cself, bool owner) {
    if (owner) {
        if (strcmp(cself.type, "iegen::example::Addressable<iegen::example::Root>") == 0)
            delete static_cast<std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Component") == 0)
            delete static_cast<std::shared_ptr<iegen::example::Component>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<iegen::example::Addressable<iegen::example::Root>> downcast_IegenExample_AddressableRoot(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, "iegen::example::Addressable<iegen::example::Root>") == 0)
            return *static_cast<std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Component") == 0)
            return *static_cast<std::shared_ptr<iegen::example::Component>*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

IEGenCObject create_IegenExample_AddressableRoot(IEGenCObject parent, char* _Nonnull name, IEGenCObject* _Nonnull err) {
    
    auto& ctocxxparent = *static_cast<iegen::example::Root*>(parent.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new iegen::example::Addressable<iegen::example::Root>(ctocxxparent, ctocxxname);
        return {strdup("iegen::example::Addressable<iegen::example::Root>"), new std::shared_ptr<iegen::example::Addressable<iegen::example::Root>>(this_object)};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

char* _Nonnull _func_IegenExample_AddressableRoot_absPath(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    std::shared_ptr<iegen::example::Addressable<iegen::example::Root>> ctocxxcself;
    ctocxxcself = downcast_IegenExample_AddressableRoot(cself);
    try {
        const auto& result = ctocxxcself->absPath();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

