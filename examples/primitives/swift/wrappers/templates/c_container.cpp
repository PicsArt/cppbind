/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/26/2022-08:15.
 * Please do not change it manually.
 */

#include <iostream>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/templates/c_container.h"
#include "cxx/templates/container.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

using namespace iegen::example;

void release_ContainerImpl(CObject cself, bool owner){
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::Container*>(cself.ptr);
    }
}
void release_ContainerHolder(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::ContainerHolder*>(cself.ptr);
    }
}

CObject create_ContainerHolder(CObject container, ErrorObj* _Nonnull err){
    
    iegen::example::Container* ctocxxcontainer_ptr = nullptr;
    if (container.ptr) {
        if (strcmp(container.type, "iegen::example::Container") == 0)
            ctocxxcontainer_ptr = static_cast<iegen::example::Container*>(container.ptr);
        else if (strcmp(container.type, "iegen::example::Stack<iegen::example::Project>") == 0)
            ctocxxcontainer_ptr = static_cast<iegen::example::Stack<iegen::example::Project>*>(container.ptr);
        else if (strcmp(container.type, "iegen::example::Stack<iegen::example::Task>") == 0)
            ctocxxcontainer_ptr = static_cast<iegen::example::Stack<iegen::example::Task>*>(container.ptr);
        else if (strcmp(container.type, "iegen::example::Stack<iegen::example::Number<int>>") == 0)
            ctocxxcontainer_ptr = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(container.ptr);
        else {
            std::cerr << "Unexpected object type: " << container.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcontainer = ctocxxcontainer_ptr;
    try {
        auto this_object = new iegen::example::ContainerHolder(ctocxxcontainer);
        return {strdup("iegen::example::ContainerHolder"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _prop_get_ContainerHolder_container(CObject cself){
    iegen::example::ContainerHolder* ctocxxcself_ptr = nullptr;
    if (cself.ptr) {
        if (strcmp(cself.type, "iegen::example::ContainerHolder") == 0)
            ctocxxcself_ptr = static_cast<iegen::example::ContainerHolder*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    auto ctocxxcself = ctocxxcself_ptr;
    const auto& result = ctocxxcself->container();
    
    char* type_result = nullptr;
    const char * name_result = typeid(*result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup("iegen::example::Container");
    }
    auto value_ptr_result = const_cast<iegen::example::Container*>(result);
    CObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}
