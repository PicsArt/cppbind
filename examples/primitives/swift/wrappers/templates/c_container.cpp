/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/29/2022-15:31.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_container.h"
#include "cxx/templates/container.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

using namespace iegen::example;

void release_IegenExample_ContainerImpl(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<iegen::example::Container>::value, "iegen::example::Container type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, "iegen::example::Container") == 0)
            delete static_cast<iegen::example::Container*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Stack<iegen::example::Project>") == 0)
            delete static_cast<iegen::example::Stack<iegen::example::Project>*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Stack<iegen::example::Task>") == 0)
            delete static_cast<iegen::example::Stack<iegen::example::Task>*>(cself.ptr);
        else if (strcmp(cself.type, "iegen::example::Stack<iegen::example::Number<int>>") == 0)
            delete static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

iegen::example::Container* downcast_IegenExample_Container(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, "iegen::example::Container") == 0)
            return static_cast<iegen::example::Container*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Stack<iegen::example::Project>") == 0)
            return static_cast<iegen::example::Stack<iegen::example::Project>*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Stack<iegen::example::Task>") == 0)
            return static_cast<iegen::example::Stack<iegen::example::Task>*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, "iegen::example::Stack<iegen::example::Number<int>>") == 0)
            return static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

void release_IegenExample_ContainerHolder(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::ContainerHolder*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_ContainerHolder(IEGenCObject container, IEGenCObject* _Nonnull iegen_err) {
    
    iegen::example::Container* ctocxxcontainer = downcast_IegenExample_Container(container);
    try {
        auto this_object = new iegen::example::ContainerHolder(ctocxxcontainer);
        return {strdup("iegen::example::ContainerHolder"), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExample_ContainerHolder_container(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxcself = static_cast<iegen::example::ContainerHolder*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->container();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup("iegen::example::Container");
        }
        auto value_ptr_result = const_cast<iegen::example::Container*>(result);
        IEGenCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup("std::exception");
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

