/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 10/15/2021-18:09.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_pair.h"
#include "cxx/templates/pair.hpp"
#include "cxx/overloads/employee.hpp"
#include "cxx/forward_decl/student.hpp"

using namespace iegen::example;

void release_PairEmployee(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself));
}

void* _Nonnull create_PairEmployee(char* _Nonnull first, void* _Nonnull second){
    auto c_to_cxx_first = std::string(first);
    free(first);
    
    std::shared_ptr<iegen::example::Employee> c_to_cxx_second;
    c_to_cxx_second = std::dynamic_pointer_cast<iegen::example::Employee>(*static_cast<std::shared_ptr<iegen::example::Employee>*>(second));
    auto this_object = new iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>(c_to_cxx_first, c_to_cxx_second);
    return static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(this_object);
}

char* _Nonnull _prop_get_PairEmployee_first(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself));
    auto result = c_to_cxx_cself->first();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

void* _Nonnull _prop_get_PairEmployee_second(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself));
    auto result = c_to_cxx_cself->second();
    
    void* cxx_to_c_result;
    cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Employee>(std::static_pointer_cast<iegen::example::Employee>(result)));
    return cxx_to_c_result;
}
void release_PairStudent(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself));
}

void* _Nonnull create_PairStudent(char* _Nonnull first, void* _Nonnull second){
    auto c_to_cxx_first = std::string(first);
    free(first);
    
    std::shared_ptr<iegen::example::Student> c_to_cxx_second;
    c_to_cxx_second = std::dynamic_pointer_cast<iegen::example::Student>(*static_cast<std::shared_ptr<iegen::example::Student>*>(second));
    auto this_object = new iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>(c_to_cxx_first, c_to_cxx_second);
    return static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(this_object);
}

char* _Nonnull _prop_get_PairStudent_first(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself));
    auto result = c_to_cxx_cself->first();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

void* _Nonnull _prop_get_PairStudent_second(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself));
    auto result = c_to_cxx_cself->second();
    
    void* cxx_to_c_result;
    cxx_to_c_result = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Student>(std::static_pointer_cast<iegen::example::Student>(result)));
    return cxx_to_c_result;
}