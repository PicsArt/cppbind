/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/05/2021-13:00.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/templates/c_pair.h"
#include "cxx/templates/pair.hpp"
#include "cxx/overloads/employee.hpp"
#include "cxx/forward_decl/student.hpp"

using namespace iegen::example;

void release_PairEmployee(CObject cself) {
    delete static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself.ptr);
}

CObject create_PairEmployee(char* _Nonnull first, CObject second){
    auto c_to_cxx_first = std::string(first);
    free(first);
    
    std::shared_ptr<iegen::example::Employee> c_to_cxx_second;
    c_to_cxx_second = *static_cast<std::shared_ptr<iegen::example::Employee>*>(second.ptr);
    auto this_object = new iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>(c_to_cxx_first, c_to_cxx_second);
    return {strdup("iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>"), this_object};
}

char* _Nonnull _prop_get_PairEmployee_first(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->first();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

CObject _prop_get_PairEmployee_second(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Employee>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->second();
    
    char* type_result = strdup("iegen::example::Employee");
    void* cxx_to_c_result_ptr;
    cxx_to_c_result_ptr = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Employee>(result));
    CObject cxx_to_c_result = {type_result, cxx_to_c_result_ptr};
    return cxx_to_c_result;
}
void release_PairStudent(CObject cself) {
    delete static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself.ptr);
}

CObject create_PairStudent(char* _Nonnull first, CObject second){
    auto c_to_cxx_first = std::string(first);
    free(first);
    
    std::shared_ptr<iegen::example::Student> c_to_cxx_second;
    c_to_cxx_second = *static_cast<std::shared_ptr<iegen::example::Student>*>(second.ptr);
    auto this_object = new iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>(c_to_cxx_first, c_to_cxx_second);
    return {strdup("iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>"), this_object};
}

char* _Nonnull _prop_get_PairStudent_first(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->first();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

CObject _prop_get_PairStudent_second(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Pair<std::string, std::shared_ptr<iegen::example::Student>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->second();
    
    char* type_result = strdup("iegen::example::Student");
    void* cxx_to_c_result_ptr;
    cxx_to_c_result_ptr = reinterpret_cast<void*>(new std::shared_ptr<iegen::example::Student>(result));
    CObject cxx_to_c_result = {type_result, cxx_to_c_result_ptr};
    return cxx_to_c_result;
}