/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_stack.h"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/getters/number.hpp"

using namespace iegen::example;

void release_StackPrj(void* _Nonnull cself) {
    delete static_cast<iegen::example::Stack<iegen::example::Project>*>(cself);
}

void* _Nonnull create_StackPrj(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Project>();
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull create_StackPrj_1(void* _Nonnull st, ErrorObj* _Nonnull err){
    
    auto& ctocxxst = *static_cast<iegen::example::Project*>(st);
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Project>(ctocxxst);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void _func_StackPrj_push(void* _Nonnull cself, void* _Nonnull item, ErrorObj* _Nonnull err){
    
    auto ctocxxitem = static_cast<iegen::example::Project*>(item);
  
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Project>*>(cself);
    try {
        ctocxxcself->push(ctocxxitem);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_StackPrj_pop(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Project>*>(cself);
    try {
        ctocxxcself->pop();
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void* _Nonnull _func_StackPrj_top(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Project>*>(cself);
    try {
        const auto& result = ctocxxcself->top();
        
        auto cxxtocresult = const_cast<iegen::example::Project*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

bool _func_StackPrj_empty(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Project>*>(cself);
    try {
        const auto& result = ctocxxcself->empty();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}
void release_StackTask(void* _Nonnull cself) {
    delete static_cast<iegen::example::Stack<iegen::example::Task>*>(cself);
}

void* _Nonnull create_StackTask(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Task>();
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull create_StackTask_1(void* _Nonnull st, ErrorObj* _Nonnull err){
    
    auto& ctocxxst = *static_cast<iegen::example::Task*>(st);
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Task>(ctocxxst);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void _func_StackTask_push(void* _Nonnull cself, void* _Nonnull item, ErrorObj* _Nonnull err){
    
    auto ctocxxitem = static_cast<iegen::example::Task*>(item);
  
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Task>*>(cself);
    try {
        ctocxxcself->push(ctocxxitem);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_StackTask_pop(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Task>*>(cself);
    try {
        ctocxxcself->pop();
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void* _Nonnull _func_StackTask_top(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Task>*>(cself);
    try {
        const auto& result = ctocxxcself->top();
        
        auto cxxtocresult = const_cast<iegen::example::Task*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

bool _func_StackTask_empty(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Task>*>(cself);
    try {
        const auto& result = ctocxxcself->empty();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}
void release_StackNumInt(void* _Nonnull cself) {
    delete static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself);
}

void* _Nonnull create_StackNumInt(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Number<int>>();
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull create_StackNumInt_1(void* _Nonnull st, ErrorObj* _Nonnull err){
    
    auto& ctocxxst = *static_cast<iegen::example::Number<int>*>(st);
    try {
        auto this_object = new iegen::example::Stack<iegen::example::Number<int>>(ctocxxst);
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void _func_StackNumInt_push(void* _Nonnull cself, void* _Nonnull item, ErrorObj* _Nonnull err){
    
    auto ctocxxitem = static_cast<iegen::example::Number<int>*>(item);
  
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself);
    try {
        ctocxxcself->push(ctocxxitem);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void _func_StackNumInt_pop(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself);
    try {
        ctocxxcself->pop();
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

void* _Nonnull _func_StackNumInt_top(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself);
    try {
        const auto& result = ctocxxcself->top();
        
        auto cxxtocresult = const_cast<iegen::example::Number<int>*>(result);
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

bool _func_StackNumInt_empty(void* _Nonnull cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Stack<iegen::example::Number<int>>*>(cself);
    try {
        const auto& result = ctocxxcself->empty();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    bool result;
    return result;
}