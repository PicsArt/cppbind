/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/25/2022-05:34.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_stack_usage.h"
#include "cxx/templates/stack_usage.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;
extern const char* IEGEN_IEGEN_EXAMPLE_PROJECT;

const char* IEGEN_IEGEN_EXAMPLE_STACKUSAGE = "iegen::example::StackUsage";

using namespace iegen::example;

void release_IegenExample_StackUsage(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::StackUsage*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_StackUsage(IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::StackUsage();
        return {strdup(IEGEN_IEGEN_EXAMPLE_STACKUSAGE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_StackUsage_firstItemOfSpecializedStack(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxp = static_cast<Stack<iegen::example::Project>*>(p.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::StackUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->firstItemOfSpecializedStack(ctocxxp);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PROJECT);
        auto value_ptr_result = const_cast<iegen::example::Project*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_StackUsage_firstItemOfTemplateStackProject(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxp = static_cast<iegen::example::Stack<iegen::example::Project>*>(p.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::StackUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->firstItemOfTemplateStack<iegen::example::Project>(ctocxxp);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PROJECT);
        auto value_ptr_result = const_cast<iegen::example::Project*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_StackUsage_firstItemOfSpecializedStackWithTypedefArg(IEGenCObject cself, IEGenCObject p, IEGenCObject* _Nonnull iegen_err) {
    
    auto ctocxxp = static_cast<StackProjectType*>(p.ptr);
  
    auto ctocxxcself = static_cast<iegen::example::StackUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->firstItemOfSpecializedStackWithTypedefArg(ctocxxp);
        
        char* type_result = strdup(IEGEN_IEGEN_EXAMPLE_PROJECT);
        auto value_ptr_result = const_cast<iegen::example::Project*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

