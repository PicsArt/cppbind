/**
 * ,--.,------. ,----.   ,------.,--.  ,--.
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  |
 * |  ||  `--, |  | .---.|  `--, |  |' '  |
 * |  ||  `---.'  '--'  ||  `---.|  | `   |
 * `--'`------' `------' `------'`--'  `--'
 * 
 * This file is generated by iegen on 12/04/2021-11:54.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_stack_usage.h"
#include "cxx/templates/stack_usage.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/simple/project.hpp"

using namespace iegen::example;

void release_StackUsage(void* _Nonnull cself) {
    delete static_cast<iegen::example::StackUsage*>(cself);
}

void* _Nonnull create_StackUsage(){
    auto this_object = new iegen::example::StackUsage();
    return this_object;
}

void* _Nonnull _func_StackUsage_firstItemOfSpecializedStack(void* _Nonnull cself, void* _Nonnull p, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_p = static_cast<iegen::example::Stack<Project>*>(p);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::StackUsage*>(cself);
    try {
        const auto& result = c_to_cxx_cself->firstItemOfSpecializedStack(c_to_cxx_p);
        
        auto cxx_to_c_result = const_cast<iegen::example::Project*>(result);
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

void* _Nonnull _func_StackUsage_firstItemOfTemplateStackProject(void* _Nonnull cself, void* _Nonnull arg0, ErrorObj* _Nonnull err){
    
    auto c_to_cxx_arg0 = static_cast<iegen::example::Stack<iegen::example::Project>*>(arg0);
  
    
    auto c_to_cxx_cself = static_cast<iegen::example::StackUsage*>(cself);
    try {
        const auto& result = c_to_cxx_cself->firstItemOfTemplateStack<iegen::example::Project>(c_to_cxx_arg0);
        
        auto cxx_to_c_result = const_cast<iegen::example::Project*>(result);
        return cxx_to_c_result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}