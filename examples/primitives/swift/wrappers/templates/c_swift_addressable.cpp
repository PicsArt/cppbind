/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 09/22/2022-09:36.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_addressable.h"
#include "cxx/templates/addressable.hpp"
#include "cxx/simple/root.hpp"
#include "cxx/templates/component.hpp"

extern const char* CPPBIND_CPPBIND_EXAMPLE_COMPONENT;
extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_ADDRESSABLEROOT = "cppbind::example::Addressable<cppbind::example::Root>";

void release_CppbindExample_AddressableImplRoot(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_ADDRESSABLEROOT) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Addressable<cppbind::example::Root>>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_COMPONENT) == 0)
            delete static_cast<std::shared_ptr<cppbind::example::Component>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::shared_ptr<cppbind::example::Addressable<cppbind::example::Root>> recover_obj_from_CppbindExample_AddressableRoot(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_ADDRESSABLEROOT) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Addressable<cppbind::example::Root>>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_COMPONENT) == 0)
            return *static_cast<std::shared_ptr<cppbind::example::Component>*>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_AddressableRoot(CppBindCObject parent, char* _Nonnull name, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxparent = *static_cast<cppbind::example::Root*>(parent.ptr);
    auto ctocxxname = std::string(name);
    free(name);
    try {
        auto this_object = new cppbind::example::Addressable<cppbind::example::Root>(ctocxxparent, ctocxxname);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ADDRESSABLEROOT), new std::shared_ptr<cppbind::example::Addressable<cppbind::example::Root>>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _func_CppbindExample_AddressableRoot_absPath(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::shared_ptr<cppbind::example::Addressable<cppbind::example::Root>> ctocxxcself;
    ctocxxcself = recover_obj_from_CppbindExample_AddressableRoot(cself);
    try {
        decltype(auto) result = ctocxxcself->absPath();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

