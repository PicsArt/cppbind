/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/13/2022-14:16.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_array.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/array.hpp"
#include <algorithm>

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2 = "cppbind::example::Array<float, 2>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3 = "cppbind::example::Array<float, 3>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2 = "cppbind::example::Array<int, 2>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3 = "cppbind::example::Array<int, 3>";
const char* CPPBIND_CPPBIND_EXAMPLE_ARRAY3 = "cppbind::example::Array3";

void release_CppbindExample_ArrayFloat2(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ArrayFloat2(CppBindCObject array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxarray = *static_cast<cppbind::example::Array<float, 2>*>(array.ptr);
    try {
        auto this_object = new cppbind::example::Array<float, 2>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ArrayFloat21(CppBindCDataArray array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::array<float, 2> ctocxxarray {};
    auto data_array = reinterpret_cast<float*>(array.data);
    std::copy_n(data_array, 2, ctocxxarray.begin());
    try {
        auto this_object = new cppbind::example::Array<float, 2>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}


float _func_CppbindExample_ArrayFloat2__getitem_(CppBindCObject cself,int idx) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    decltype(auto) result = ctocxxcself->operator[](idx);
    
    return result;
}

void _func_CppbindExample_ArrayFloat2__setitem_(CppBindCObject cself, int idx, float value) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    ctocxxcself->operator[](idx) = value;
}
CppBindCObject _func_CppbindExample_ArrayFloat2__add_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator+(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        auto value_ptr_result = new cppbind::example::Array<float, 2>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ArrayFloat2__sub_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator-(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        auto value_ptr_result = new cppbind::example::Array<float, 2>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

bool _func_CppbindExample_ArrayFloat2__eq_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator==(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

bool _func_CppbindExample_ArrayFloat2__ne_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator!=(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_ArrayFloat2_data(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->data();
        auto _data_cxxtocresult = new float [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void release_CppbindExample_ArrayFloat3(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ArrayFloat3(CppBindCObject array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxarray = *static_cast<cppbind::example::Array<float, 3>*>(array.ptr);
    try {
        auto this_object = new cppbind::example::Array<float, 3>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ArrayFloat31(CppBindCDataArray array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::array<float, 3> ctocxxarray {};
    auto data_array = reinterpret_cast<float*>(array.data);
    std::copy_n(data_array, 3, ctocxxarray.begin());
    try {
        auto this_object = new cppbind::example::Array<float, 3>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}


float _func_CppbindExample_ArrayFloat3__getitem_(CppBindCObject cself,int idx) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    decltype(auto) result = ctocxxcself->operator[](idx);
    
    return result;
}

void _func_CppbindExample_ArrayFloat3__setitem_(CppBindCObject cself, int idx, float value) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    ctocxxcself->operator[](idx) = value;
}
CppBindCObject _func_CppbindExample_ArrayFloat3__add_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator+(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3);
        auto value_ptr_result = new cppbind::example::Array<float, 3>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ArrayFloat3__sub_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator-(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT3);
        auto value_ptr_result = new cppbind::example::Array<float, 3>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

bool _func_CppbindExample_ArrayFloat3__eq_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator==(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

bool _func_CppbindExample_ArrayFloat3__ne_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<float, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator!=(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_ArrayFloat3_data(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<float, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->data();
        auto _data_cxxtocresult = new float [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void release_CppbindExample_ArrayInt2(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ArrayInt2(CppBindCObject array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxarray = *static_cast<cppbind::example::Array<int, 2>*>(array.ptr);
    try {
        auto this_object = new cppbind::example::Array<int, 2>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ArrayInt21(CppBindCDataArray array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::array<int, 2> ctocxxarray {};
    auto data_array = reinterpret_cast<int*>(array.data);
    std::copy_n(data_array, 2, ctocxxarray.begin());
    try {
        auto this_object = new cppbind::example::Array<int, 2>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}


int _func_CppbindExample_ArrayInt2__getitem_(CppBindCObject cself,int idx) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    decltype(auto) result = ctocxxcself->operator[](idx);
    
    return result;
}

void _func_CppbindExample_ArrayInt2__setitem_(CppBindCObject cself, int idx, int value) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    ctocxxcself->operator[](idx) = value;
}
CppBindCObject _func_CppbindExample_ArrayInt2__add_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator+(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        auto value_ptr_result = new cppbind::example::Array<int, 2>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ArrayInt2__sub_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator-(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        auto value_ptr_result = new cppbind::example::Array<int, 2>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

bool _func_CppbindExample_ArrayInt2__eq_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator==(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

bool _func_CppbindExample_ArrayInt2__ne_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 2>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator!=(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_ArrayInt2_data(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 2>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->data();
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void release_CppbindExample_ArrayInt3(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ArrayInt3(CppBindCObject array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxarray = *static_cast<cppbind::example::Array<int, 3>*>(array.ptr);
    try {
        auto this_object = new cppbind::example::Array<int, 3>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_ArrayInt31(CppBindCDataArray array, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::array<int, 3> ctocxxarray {};
    auto data_array = reinterpret_cast<int*>(array.data);
    std::copy_n(data_array, 3, ctocxxarray.begin());
    try {
        auto this_object = new cppbind::example::Array<int, 3>(ctocxxarray);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}


int _func_CppbindExample_ArrayInt3__getitem_(CppBindCObject cself,int idx) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    decltype(auto) result = ctocxxcself->operator[](idx);
    
    return result;
}

void _func_CppbindExample_ArrayInt3__setitem_(CppBindCObject cself, int idx, int value) {
    using namespace cppbind::example;
    
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    ctocxxcself->operator[](idx) = value;
}
CppBindCObject _func_CppbindExample_ArrayInt3__add_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator+(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3);
        auto value_ptr_result = new cppbind::example::Array<int, 3>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_ArrayInt3__sub_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator-(ctocxxrhs);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT3);
        auto value_ptr_result = new cppbind::example::Array<int, 3>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

bool _func_CppbindExample_ArrayInt3__eq_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator==(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

bool _func_CppbindExample_ArrayInt3__ne_(CppBindCObject cself, CppBindCObject rhs, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxrhs = *static_cast<cppbind::example::Array<int, 3>*>(rhs.ptr);

    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->operator!=(ctocxxrhs);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    bool result {};
    return result;
}

CppBindCDataArray _func_CppbindExample_ArrayInt3_data(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::Array<int, 3>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->data();
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

float _func_CppbindExample_getFirstElementFloat(CppBindCObject a, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxa = *static_cast<cppbind::example::Array<float, 2>*>(a.ptr);
    try {
        decltype(auto) result = cppbind::example::getFirstElement<float>(ctocxxa);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    float result {};
    return result;
}

int _func_CppbindExample_getFirstElementInt(CppBindCObject a, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxa = *static_cast<cppbind::example::Array<int, 2>*>(a.ptr);
    try {
        decltype(auto) result = cppbind::example::getFirstElement<int>(ctocxxa);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCObject _func_CppbindExample_multiplyElements(CppBindCObject a, int num, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxa = *static_cast<cppbind::example::Array<int, 2>*>(a.ptr);
    
    try {
        decltype(auto) result = cppbind::example::multiplyElements(ctocxxa, num);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        auto value_ptr_result = new cppbind::example::Array<int, 2>(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_addToElements(CppBindCObject a, int num, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxa = *static_cast<cppbind::example::ArrayFloat*>(a.ptr);
    
    try {
        decltype(auto) result = cppbind::example::addToElements(ctocxxa, num);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYFLOAT2);
        auto value_ptr_result = new cppbind::example::ArrayFloat(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_addToElements1(CppBindCObject a, int num, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    auto& ctocxxa = *static_cast<cppbind::example::ArrayInt*>(a.ptr);
    
    try {
        decltype(auto) result = cppbind::example::addToElements(ctocxxa, num);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAYINT2);
        auto value_ptr_result = new cppbind::example::ArrayInt(result);
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_Array3(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::Array3>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_Array3(CppBindCDataArray arr, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    std::array<float, LENGTH3> ctocxxarr {};
    auto data_arr = reinterpret_cast<float*>(arr.data);
    std::copy_n(data_arr, 9, ctocxxarr.begin());
    try {
        auto this_object = new cppbind::example::Array3(ctocxxarr);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_ARRAY3), new std::shared_ptr<cppbind::example::Array3>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

