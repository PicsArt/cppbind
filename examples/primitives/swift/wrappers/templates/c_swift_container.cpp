/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/24/2022-14:00.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_container.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/container.hpp"
#include "cxx/templates/stack_usage.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/task.hpp"
#include "cxx/templates/stack.hpp"
#include "cxx/getters/number.hpp"
#include "cxx/simple/root.hpp"

extern const char* CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_PROJECT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK;
extern const char* CPPBIND_CPPBIND_EXAMPLE_TASK;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYSTACKROOT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_STACKPRJ;
extern const char* CPPBIND_CPPBIND_EXAMPLE_STACKTASK;
extern const char* CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_NUMBERINT;
extern const char* CPPBIND_CPPBIND_EXAMPLE_ROOTSSTACK;
extern const char* CPPBIND_CPPBIND_EXAMPLE_ROOT;
extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_CONTAINER = "cppbind::example::Container";
const char* CPPBIND_CPPBIND_EXAMPLE_CONTAINERHOLDER = "cppbind::example::ContainerHolder";

void release_CppbindExample_ContainerImpl(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::Container>::value, "cppbind::example::Container type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_CONTAINER) == 0)
            delete static_cast<cppbind::example::Container*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
            delete static_cast<cppbind::example::MyStack<cppbind::example::Project>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
            delete static_cast<cppbind::example::MyStack<cppbind::example::Task>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKROOT) == 0)
            delete static_cast<cppbind::example::MyStackRoot*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_STACKPRJ) == 0)
            delete static_cast<cppbind::example::Stack<cppbind::example::Project>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_STACKTASK) == 0)
            delete static_cast<cppbind::example::Stack<cppbind::example::Task>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT) == 0)
            delete static_cast<cppbind::example::Stack<cppbind::example::Number<int>>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_ROOTSSTACK) == 0)
            delete static_cast<cppbind::example::Stack<cppbind::example::Root>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::Container* recover_obj_from_CppbindExample_Container(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_CONTAINER) == 0)
            return static_cast<cppbind::example::Container*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKPROJECT) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Project>, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKTASK) == 0)
            return cppbind::safe_cast<cppbind::example::MyStack<cppbind::example::Task>, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYSTACKROOT) == 0)
            return cppbind::safe_cast<cppbind::example::MyStackRoot, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_STACKPRJ) == 0)
            return cppbind::safe_cast<cppbind::example::Stack<cppbind::example::Project>, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_STACKTASK) == 0)
            return cppbind::safe_cast<cppbind::example::Stack<cppbind::example::Task>, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_STACKNUMINT) == 0)
            return cppbind::safe_cast<cppbind::example::Stack<cppbind::example::Number<int>>, cppbind::example::Container>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_ROOTSSTACK) == 0)
            return cppbind::safe_cast<cppbind::example::Stack<cppbind::example::Root>, cppbind::example::Container>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

void release_CppbindExample_ContainerHolder(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::ContainerHolder*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_ContainerHolder(CppBindCObject container, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    cppbind::example::Container* ctocxxcontainer = recover_obj_from_CppbindExample_Container(container);
    try {
        auto this_object = new cppbind::example::ContainerHolder(ctocxxcontainer);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_CONTAINERHOLDER), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_ContainerHolder_container(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::ContainerHolder*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->container();
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_CONTAINER);
        }
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

