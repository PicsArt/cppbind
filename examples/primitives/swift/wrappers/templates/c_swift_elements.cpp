/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/20/2022-11:29.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_elements.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/elements.hpp"
#include <vector>


extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_ELEMENTSINT = "cppbind::example::elements<std::vector<int>, int, int>";
const char* CPPBIND_CPPBIND_EXAMPLE_ELEMENTSSTRING = "cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>";
const char* CPPBIND_CPPBIND_EXAMPLE_ELEMENTSEMPTY = "cppbind::example::elements<std::vector<double>>";

void release_CppbindExample_ElementsInt(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::elements<std::vector<int>, int, int>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject _func_CppbindExample_ElementsInt_create(int ts1, int ts2, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;


    try {
        decltype(auto) result = cppbind::example::elements<std::vector<int>, int, int>::create(ts1, ts2);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ELEMENTSINT);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_ElementsInt_holder(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::elements<std::vector<int>, int, int>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->holder();
        auto _data_cxxtocresult = new int [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void release_CppbindExample_ElementsString(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject _func_CppbindExample_ElementsString_create(char* _Nonnull ts1, char* _Nonnull ts2, char* _Nonnull ts3, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxts1 = std::string(ts1);
    free(ts1);

    auto ctocxxts2 = std::string(ts2);
    free(ts2);

    auto ctocxxts3 = std::string(ts3);
    free(ts3);

    try {
        decltype(auto) result = cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>::create(ctocxxts1, ctocxxts2, ctocxxts3);
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ELEMENTSSTRING);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_ElementsString_holder(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::elements<std::vector<std::string>, std::string, std::string, std::string>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->holder();
        auto _data_cxxtocresult = new char* [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            auto cxxtocvalue_result = strdup(value_result.data());
            _data_cxxtocresult[_i_result] = cxxtocvalue_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

void release_CppbindExample_ElementsEmpty(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    if (owner) {
        delete static_cast<cppbind::example::elements<std::vector<double>>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject _func_CppbindExample_ElementsEmpty_create(CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        decltype(auto) result = cppbind::example::elements<std::vector<double>>::create();
        
        char* type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_ELEMENTSEMPTY);
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCDataArray _prop_get_CppbindExample_ElementsEmpty_holder(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    auto ctocxxcself = static_cast<cppbind::example::elements<std::vector<double>>*>(cself.ptr);
    try {
        decltype(auto) result = ctocxxcself->holder();
        auto _data_cxxtocresult = new double [result.size()];
        CppBindCDataArray cxxtocresult = { _data_cxxtocresult, static_cast<long long>(result.size()) };
        for (int _i_result = 0; _i_result < result.size(); ++_i_result) {
            auto& value_result = result[_i_result];
            
            _data_cxxtocresult[_i_result] = value_result;
        }
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCDataArray result {};
    return result;
}

