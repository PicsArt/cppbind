/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-13:05.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_pair.h"
#include "cxx/templates/pair.hpp"
#include "cxx/overloads/employee.hpp"
#include "cxx/forward_decl/student.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;
extern const char* CPPBIND_CPPBIND_EXAMPLE_EMPLOYEE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_STUDENT;

const char* CPPBIND_CPPBIND_EXAMPLE_PAIREMPLOYEE = "cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Employee>>";
const char* CPPBIND_CPPBIND_EXAMPLE_PAIRSTUDENT = "cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Student>>";

using namespace cppbind::example;

void release_CppbindExample_PairEmployee(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Employee>>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_PairEmployee(char* _Nonnull first, CppBindCObject second, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxfirst = std::string(first);
    free(first);
    
    std::shared_ptr<cppbind::example::Employee> ctocxxsecond;
    ctocxxsecond = *static_cast<std::shared_ptr<cppbind::example::Employee>*>(second.ptr);
    try {
        auto this_object = new cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Employee>>(ctocxxfirst, ctocxxsecond);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_PAIREMPLOYEE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_PairEmployee_first(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Employee>>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->first();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_PairEmployee_second(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Employee>>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->second();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::Employee>(std::const_pointer_cast<cppbind::example::Employee>(result));
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void release_CppbindExample_PairStudent(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Student>>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_PairStudent(char* _Nonnull first, CppBindCObject second, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxfirst = std::string(first);
    free(first);
    
    std::shared_ptr<cppbind::example::Student> ctocxxsecond;
    ctocxxsecond = *static_cast<std::shared_ptr<cppbind::example::Student>*>(second.ptr);
    try {
        auto this_object = new cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Student>>(ctocxxfirst, ctocxxsecond);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_PAIRSTUDENT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

char* _Nonnull _prop_get_CppbindExample_PairStudent_first(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Student>>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->first();
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_PairStudent_second(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::Pair<std::string, std::shared_ptr<cppbind::example::Student>>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->second();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::Student>(std::const_pointer_cast<cppbind::example::Student>(result));
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

