/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_tuple.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/tuple.hpp"

extern const char* CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE;
extern const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT;
extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY = "cppbind::example::tuple<>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT = "cppbind::example::tuple<int, int, int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT = "cppbind::example::tuple<int, int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEINT = "cppbind::example::tuple<int>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE = "cppbind::example::tuple<double>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES = "cppbind::example::tuple<double, double>";
const char* CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT = "cppbind::example::tuple<int, double>";

void release_CppbindExample_TupleEmpty(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<>>::value, "cppbind::example::tuple<> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY) == 0)
            delete static_cast<cppbind::example::tuple<>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<>* recover_obj_from_CppbindExample_TupleEmpty(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY) == 0)
            return static_cast<cppbind::example::tuple<>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

void release_CppbindExample_TupleThreeInt(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, int, int>>::value, "cppbind::example::tuple<int, int, int> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT) == 0)
            delete static_cast<cppbind::example::tuple<int, int, int>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<int, int, int>* recover_obj_from_CppbindExample_TupleThreeInt(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT) == 0)
            return static_cast<cppbind::example::tuple<int, int, int>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, int, int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, int, int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, int, int>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleThreeInt(int t, int ts1, int ts2, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<int, int, int>(t, ts1, ts2);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETHREEINT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_TupleThreeInt_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, int, int>* ctocxxcself = recover_obj_from_CppbindExample_TupleThreeInt(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleThreeInt_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, int, int>* ctocxxcself = recover_obj_from_CppbindExample_TupleThreeInt(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT);
    }
    auto value_ptr_result = new cppbind::example::tuple<int, int>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

void release_CppbindExample_TupleTwoInt(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, int>>::value, "cppbind::example::tuple<int, int> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT) == 0)
            delete static_cast<cppbind::example::tuple<int, int>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<int, int>* recover_obj_from_CppbindExample_TupleTwoInt(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT) == 0)
            return static_cast<cppbind::example::tuple<int, int>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, int>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleTwoInt(int t, int ts1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<int, int>(t, ts1);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_TupleTwoInt_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, int>* ctocxxcself = recover_obj_from_CppbindExample_TupleTwoInt(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleTwoInt_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, int>* ctocxxcself = recover_obj_from_CppbindExample_TupleTwoInt(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEINT);
    }
    auto value_ptr_result = new cppbind::example::tuple<int>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

void release_CppbindExample_TupleInt(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int>>::value, "cppbind::example::tuple<int> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEINT) == 0)
            delete static_cast<cppbind::example::tuple<int>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<int>* recover_obj_from_CppbindExample_TupleInt(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEINT) == 0)
            return static_cast<cppbind::example::tuple<int>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleInt(int t, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<int>(t);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEINT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_TupleInt_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int>* ctocxxcself = recover_obj_from_CppbindExample_TupleInt(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleInt_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int>* ctocxxcself = recover_obj_from_CppbindExample_TupleInt(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY);
    }
    auto value_ptr_result = new cppbind::example::tuple<>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

void release_CppbindExample_TupleDouble(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<double>>::value, "cppbind::example::tuple<double> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::tuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<double>* recover_obj_from_CppbindExample_TupleDouble(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE) == 0)
            return static_cast<cppbind::example::tuple<double>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<double>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleDouble(double t, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<double>(t);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

double _prop_get_CppbindExample_TupleDouble_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDouble(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleDouble_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDouble(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEEMPTY);
    }
    auto value_ptr_result = new cppbind::example::tuple<>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

void release_CppbindExample_TupleDoubles(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<double, double>>::value, "cppbind::example::tuple<double, double> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES) == 0)
            delete static_cast<cppbind::example::tuple<double, double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<double, double>* recover_obj_from_CppbindExample_TupleDoubles(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES) == 0)
            return static_cast<cppbind::example::tuple<double, double>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<double, double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<double, double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<double, double>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleDoubles(double t, double ts1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<double, double>(t, ts1);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLES), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

double _prop_get_CppbindExample_TupleDoubles_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<double, double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDoubles(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleDoubles_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<double, double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDoubles(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE);
    }
    auto value_ptr_result = new cppbind::example::tuple<double>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

void release_CppbindExample_TupleDoubleInt(CppBindCObject cself, bool owner) {
    using namespace cppbind::example;
    static_assert(std::has_virtual_destructor<cppbind::example::tuple<int, double>>::value, "cppbind::example::tuple<int, double> type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT) == 0)
            delete static_cast<cppbind::example::tuple<int, double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            delete static_cast<cppbind::example::IntsTuple*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            delete static_cast<cppbind::example::MyTuple<double>*>(cself.ptr);
        else if (strcmp(cself.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            delete static_cast<cppbind::example::MyTuple<int>*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

cppbind::example::tuple<int, double>* recover_obj_from_CppbindExample_TupleDoubleInt(CppBindCObject cppbindObj) {
    if (cppbindObj.ptr) {
        if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT) == 0)
            return static_cast<cppbind::example::tuple<int, double>*>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE) == 0)
            return cppbind::safe_cast<cppbind::example::IntsTuple, cppbind::example::tuple<int, double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<double>, cppbind::example::tuple<int, double>>(cppbindObj.ptr);
        else if (strcmp(cppbindObj.type, CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT) == 0)
            return cppbind::safe_cast<cppbind::example::MyTuple<int>, cppbind::example::tuple<int, double>>(cppbindObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << cppbindObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

CppBindCObject create_CppbindExample_TupleDoubleInt(int t, double ts1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::tuple<int, double>(t, ts1);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _prop_get_CppbindExample_TupleDoubleInt_tail(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDoubleInt(cself);
    decltype(auto) result = ctocxxcself->tail;
    
    return result;
}

CppBindCObject _prop_get_CppbindExample_TupleDoubleInt_rest(CppBindCObject cself) {
    using namespace cppbind::example;
    cppbind::example::tuple<int, double>* ctocxxcself = recover_obj_from_CppbindExample_TupleDoubleInt(cself);
    decltype(auto) result = ctocxxcself->rest;
    
    char* type_result = nullptr;
    const char * name_result = typeid(result).name();
    int status = 0;
    char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
    if (status == 0) {
        type_result = demangled_result;
    } else {
        type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLE);
    }
    auto value_ptr_result = new cppbind::example::tuple<double>(result);
    CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
    return cxxtocresult;
}

CppBindCObject _func_CppbindExample_createTupleIntInt(int args1, int args2, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    
    try {
        decltype(auto) result = cppbind::example::createTuple<int, int>(args1, args2);
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLETWOINT);
        }
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_createTupleIntDouble(int args1, double args2, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    
    try {
        decltype(auto) result = cppbind::example::createTuple<int, double>(args1, args2);
        
        char* type_result = nullptr;
        const char * name_result = typeid(*result).name();
        int status = 0;
        char* demangled_result = abi::__cxa_demangle(name_result, NULL, NULL, &status);
        if (status == 0) {
            type_result = demangled_result;
        } else {
            type_result = strdup(CPPBIND_CPPBIND_EXAMPLE_TUPLEDOUBLEINT);
        }
        auto value_ptr_result = result;
        CppBindCObject cxxtocresult = {type_result, dynamic_cast<void*>(value_ptr_result)};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

