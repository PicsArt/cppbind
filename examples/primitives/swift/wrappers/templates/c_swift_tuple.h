/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

#ifndef _SWIFT_WRAPPERS_TEMPLATES_C_SWIFT_TUPLE_H_
#define _SWIFT_WRAPPERS_TEMPLATES_C_SWIFT_TUPLE_H_

#include "swift/wrappers/c_helpers.h"

#include <stdbool.h>

#if __cplusplus
extern "C" {
#endif
    void release_CppbindExample_TupleEmpty(CppBindCObject cself, bool owner);
    void release_CppbindExample_TupleThreeInt(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleThreeInt(int t, int ts1, int ts2, CppBindCObject* _Nonnull cppbind_err);
    int _prop_get_CppbindExample_TupleThreeInt_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleThreeInt_rest(CppBindCObject cself);
    void release_CppbindExample_TupleTwoInt(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleTwoInt(int t, int ts1, CppBindCObject* _Nonnull cppbind_err);
    int _prop_get_CppbindExample_TupleTwoInt_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleTwoInt_rest(CppBindCObject cself);
    void release_CppbindExample_TupleInt(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleInt(int t, CppBindCObject* _Nonnull cppbind_err);
    int _prop_get_CppbindExample_TupleInt_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleInt_rest(CppBindCObject cself);
    void release_CppbindExample_TupleDouble(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleDouble(double t, CppBindCObject* _Nonnull cppbind_err);
    double _prop_get_CppbindExample_TupleDouble_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleDouble_rest(CppBindCObject cself);
    void release_CppbindExample_TupleDoubles(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleDoubles(double t, double ts1, CppBindCObject* _Nonnull cppbind_err);
    double _prop_get_CppbindExample_TupleDoubles_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleDoubles_rest(CppBindCObject cself);
    void release_CppbindExample_TupleDoubleInt(CppBindCObject cself, bool owner);

    CppBindCObject create_CppbindExample_TupleDoubleInt(int t, double ts1, CppBindCObject* _Nonnull cppbind_err);
    int _prop_get_CppbindExample_TupleDoubleInt_tail(CppBindCObject cself);
    CppBindCObject _prop_get_CppbindExample_TupleDoubleInt_rest(CppBindCObject cself);

    CppBindCObject _func_CppbindExample_createTupleIntInt(int  args1, int  args2, CppBindCObject* _Nonnull cppbind_err);

    CppBindCObject _func_CppbindExample_createTupleIntDouble(int  args1, double  args2, CppBindCObject* _Nonnull cppbind_err);
#if __cplusplus
}
#endif
#endif /* ifndef _SWIFT_WRAPPERS_TEMPLATES_C_SWIFT_TUPLE_H_ */
