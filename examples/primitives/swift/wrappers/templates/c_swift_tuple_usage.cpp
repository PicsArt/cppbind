/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 10/26/2022-08:46.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_swift_tuple_usage.h"
#include "swift/wrappers/cppbind_wrapper_helper.hpp"
#include "cxx/templates/tuple.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE = "cppbind::example::IntsTuple";
const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE = "cppbind::example::MyTuple<double>";
const char* CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT = "cppbind::example::MyTuple<int>";

cppbind::example::tuple<int, double>* recover_obj_from_CppbindExample_TupleDoubleInt(CppBindCObject);
cppbind::example::tuple<int, int>* recover_obj_from_CppbindExample_TupleTwoInt(CppBindCObject);

CppBindCObject create_CppbindExample_IntsTuple(int a, int b, int c, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::IntsTuple(a, b, c);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_INTSTUPLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_MyTupleDouble(double a, double b, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::MyTuple<double>(a, b);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_MYTUPLEDOUBLE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject create_CppbindExample_MyTupleInt(int a, int b, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    try {
        auto this_object = new cppbind::example::MyTuple<int>(a, b);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_MYTUPLEINT), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _func_CppbindExample_getTupleFirstElementIntDouble(CppBindCObject t1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    cppbind::example::tuple<int, double>* ctocxxt1_ptr = recover_obj_from_CppbindExample_TupleDoubleInt(t1);
    auto& ctocxxt1 = *ctocxxt1_ptr;
    try {
        decltype(auto) result = cppbind::example::getTupleFirstElement<int, double>(ctocxxt1);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_CppbindExample_getTupleFirstElementIntInt(CppBindCObject t1, CppBindCObject* _Nonnull cppbind_err) {
    using namespace cppbind::example;
    
    cppbind::example::tuple<int, int>* ctocxxt1_ptr = recover_obj_from_CppbindExample_TupleTwoInt(t1);
    auto& ctocxxt1 = *ctocxxt1_ptr;
    try {
        decltype(auto) result = cppbind::example::getTupleFirstElement<int, int>(ctocxxt1);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

