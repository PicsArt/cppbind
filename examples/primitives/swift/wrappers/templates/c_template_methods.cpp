/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/15/2022-16:20.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_template_methods.h"
#include "cxx/templates/template_methods.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"

using namespace iegen::example;

void release_IegenExample_TemplateMethods(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateMethods*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_TemplateMethods(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::TemplateMethods();
        return {strdup("iegen::example::TemplateMethods"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_TemplateMethods_maxInt(IEGenCObject cself, int a, int b, IEGenCObject* _Nonnull err) {
  
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->max<int>(a, b);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

char* _Nonnull _func_IegenExample_TemplateMethods_maxString(IEGenCObject cself, char* _Nonnull a, char* _Nonnull b, IEGenCObject* _Nonnull err) {
    auto ctocxxa = std::string(a);
    free(a);
  
    auto ctocxxb = std::string(b);
    free(b);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->max<std::string>(ctocxxa, ctocxxb);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

IEGenCDataPair _func_IegenExample_TemplateMethods_makePairProjectProject(IEGenCObject cself, IEGenCObject a, IEGenCObject b, IEGenCObject* _Nonnull err) {
    
    auto ctocxxa = static_cast<iegen::example::Project*>(a.ptr);
  
    
    auto ctocxxb = static_cast<iegen::example::Project*>(b.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->makePair<iegen::example::Project, iegen::example::Project>(ctocxxa, ctocxxb);
        auto _first_data_cxxtocresult = new IEGenCObject;
        auto _second_data_cxxtocresult = new IEGenCObject;
        const auto& first_result = result.first;
        const auto& second_result = result.second;

        char* type_first_result = strdup("iegen::example::Project");
        auto value_ptr_first_result = const_cast<iegen::example::Project*>(first_result);
        IEGenCObject cxxtocfirst_result = {type_first_result, value_ptr_first_result};

        char* type_second_result = strdup("iegen::example::Project");
        auto value_ptr_second_result = const_cast<iegen::example::Project*>(second_result);
        IEGenCObject cxxtocsecond_result = {type_second_result, value_ptr_second_result};
        *_first_data_cxxtocresult = cxxtocfirst_result;
        *_second_data_cxxtocresult = cxxtocsecond_result;
        IEGenCDataPair cxxtocresult = { _first_data_cxxtocresult, _second_data_cxxtocresult };
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCDataPair result {};
    return result;
}

IEGenCDataPair _func_IegenExample_TemplateMethods_makePairRootProject(IEGenCObject cself, IEGenCObject a, IEGenCObject b, IEGenCObject* _Nonnull err) {
    
    auto ctocxxa = static_cast<iegen::example::Root*>(a.ptr);
  
    
    auto ctocxxb = static_cast<iegen::example::Project*>(b.ptr);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->makePair<iegen::example::Root, iegen::example::Project>(ctocxxa, ctocxxb);
        auto _first_data_cxxtocresult = new IEGenCObject;
        auto _second_data_cxxtocresult = new IEGenCObject;
        const auto& first_result = result.first;
        const auto& second_result = result.second;

        char* type_first_result = strdup("iegen::example::Root");
        auto value_ptr_first_result = const_cast<iegen::example::Root*>(first_result);
        IEGenCObject cxxtocfirst_result = {type_first_result, value_ptr_first_result};

        char* type_second_result = strdup("iegen::example::Project");
        auto value_ptr_second_result = const_cast<iegen::example::Project*>(second_result);
        IEGenCObject cxxtocsecond_result = {type_second_result, value_ptr_second_result};
        *_first_data_cxxtocresult = cxxtocfirst_result;
        *_second_data_cxxtocresult = cxxtocsecond_result;
        IEGenCDataPair cxxtocresult = { _first_data_cxxtocresult, _second_data_cxxtocresult };
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCDataPair result {};
    return result;
}

