/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/07/2021-16:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_template_methods.h"
#include "cxx/templates/template_methods.hpp"
#include "cxx/simple/project.hpp"
#include "cxx/simple/root.hpp"

using namespace iegen::example;

void release_TemplateMethods(void* _Nonnull cself) {
    delete static_cast<iegen::example::TemplateMethods*>(cself);
}

void* _Nonnull create_TemplateMethods(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::TemplateMethods();
        return this_object;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    void* result = nullptr;
    return result;
}

int _func_TemplateMethods_maxInt(void* _Nonnull cself, int arg0, int arg1, ErrorObj* _Nonnull err){
    
  
    
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself);
    try {
        const auto& result = ctocxxcself->max<int>(arg0, arg1);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result;
    return result;
}

char* _Nonnull _func_TemplateMethods_maxString(void* _Nonnull cself, char* _Nonnull arg0, char* _Nonnull arg1, ErrorObj* _Nonnull err){
    auto ctocxxarg0 = std::string(arg0);
    free(arg0);
  
    auto ctocxxarg1 = std::string(arg1);
    free(arg1);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself);
    try {
        const auto& result = ctocxxcself->max<std::string>(ctocxxarg0, ctocxxarg1);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result = nullptr;
    return result;
}

CDataPair _func_TemplateMethods_makePairProjectProject(void* _Nonnull cself, void* _Nonnull arg0, void* _Nonnull arg1, ErrorObj* _Nonnull err){
    
    auto ctocxxarg0 = static_cast<iegen::example::Project*>(arg0);
  
    
    auto ctocxxarg1 = static_cast<iegen::example::Project*>(arg1);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself);
    try {
        const auto& result = ctocxxcself->makePair<iegen::example::Project, iegen::example::Project>(ctocxxarg0, ctocxxarg1);
        auto _first_data_cxxtocresult = new void*;
        auto _second_data_cxxtocresult = new void*;
        const auto& first_result = result.first;
        const auto& second_result = result.second;

        auto cxxtocfirst_result = const_cast<iegen::example::Project*>(first_result);

        auto cxxtocsecond_result = const_cast<iegen::example::Project*>(second_result);
        *_first_data_cxxtocresult = cxxtocfirst_result;
        *_second_data_cxxtocresult = cxxtocsecond_result;
        CDataPair cxxtocresult = { _first_data_cxxtocresult, _second_data_cxxtocresult };
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataPair result;
    return result;
}

CDataPair _func_TemplateMethods_makePairRootProject(void* _Nonnull cself, void* _Nonnull arg0, void* _Nonnull arg1, ErrorObj* _Nonnull err){
    
    auto ctocxxarg0 = static_cast<iegen::example::Root*>(arg0);
  
    
    auto ctocxxarg1 = static_cast<iegen::example::Project*>(arg1);
  
    
    auto ctocxxcself = static_cast<iegen::example::TemplateMethods*>(cself);
    try {
        const auto& result = ctocxxcself->makePair<iegen::example::Root, iegen::example::Project>(ctocxxarg0, ctocxxarg1);
        auto _first_data_cxxtocresult = new void*;
        auto _second_data_cxxtocresult = new void*;
        const auto& first_result = result.first;
        const auto& second_result = result.second;

        auto cxxtocfirst_result = const_cast<iegen::example::Root*>(first_result);

        auto cxxtocsecond_result = const_cast<iegen::example::Project*>(second_result);
        *_first_data_cxxtocresult = cxxtocfirst_result;
        *_second_data_cxxtocresult = cxxtocsecond_result;
        CDataPair cxxtocresult = { _first_data_cxxtocresult, _second_data_cxxtocresult };
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CDataPair result;
    return result;
}