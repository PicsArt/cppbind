/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-13:39.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/templates/c_value.h"
#include "cxx/templates/value.hpp"

extern const char* IEGEN_STD_STDEXCEPTION;

const char* IEGEN_IEGEN_EXAMPLE_TEMPLATEVALUE = "iegen::example::TemplateValue";

using namespace iegen::example;

void release_IegenExample_TemplateValue(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::TemplateValue*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_TemplateValueInt(int value, IEGenCObject* _Nonnull iegen_err) {
    try {
        auto this_object = new iegen::example::TemplateValue(value);
        return {strdup(IEGEN_IEGEN_EXAMPLE_TEMPLATEVALUE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject create_IegenExample_TemplateValueString(char* _Nonnull value, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxvalue = std::string(value);
    free(value);
    try {
        auto this_object = new iegen::example::TemplateValue(ctocxxvalue);
        return {strdup(IEGEN_IEGEN_EXAMPLE_TEMPLATEVALUE), this_object};
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_TemplateValue_add_valueInt(IEGenCObject cself, int other, IEGenCObject* _Nonnull iegen_err) {
  
    auto ctocxxcself = static_cast<iegen::example::TemplateValue*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->add_value<int>(other);
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

char* _Nonnull _func_IegenExample_TemplateValue_add_valueString(IEGenCObject cself, char* _Nonnull other, IEGenCObject* _Nonnull iegen_err) {
    auto ctocxxother = std::string(other);
    free(other);
  
    auto ctocxxcself = static_cast<iegen::example::TemplateValue*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->add_value<std::string>(ctocxxother);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    char* result {};
    return result;
}

