/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/02/2021-15:46.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/templates/c_wrapper.h"
#include "cxx/templates/wrapper.hpp"

using namespace iegen::example;

void release_WrapperPairStrings(CObject cself) {
    delete static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself.ptr);
}

CObject create_WrapperPairStrings(CDataPair value){
    auto first_tmp_value = *reinterpret_cast<char**>(value.first);
    auto second_tmp_value = *reinterpret_cast<char**>(value.second);
    auto c_to_cxx_first_tmp_value = std::string(first_tmp_value);
    free(first_tmp_value);
    auto c_to_cxx_second_tmp_value = std::string(second_tmp_value);
    free(second_tmp_value);
    std::pair<std::string, std::string> c_to_cxx_value { c_to_cxx_first_tmp_value, c_to_cxx_second_tmp_value };
    auto this_object = new iegen::example::Wrapper<std::pair<std::string, std::string>>(c_to_cxx_value);
    return {strdup("iegen::example::Wrapper<std::pair<std::string, std::string>>"), this_object};
}

CDataPair _prop_get_WrapperPairStrings_value(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->value();
    auto _first_data_cxx_to_c_result = new char*;
    auto _second_data_cxx_to_c_result = new char*;
    const auto& first_result = result.first;
    const auto& second_result = result.second;
    auto cxx_to_c_first_result = strdup(first_result.data());
    auto cxx_to_c_second_result = strdup(second_result.data());
    *_first_data_cxx_to_c_result = cxx_to_c_first_result;
    *_second_data_cxx_to_c_result = cxx_to_c_second_result;
    CDataPair cxx_to_c_result = { _first_data_cxx_to_c_result, _second_data_cxx_to_c_result };
    return cxx_to_c_result;
}

void _prop_set_WrapperPairStrings_value(CObject cself, CDataPair value){
    
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself.ptr);
    auto first_tmp_value = *reinterpret_cast<char**>(value.first);
    auto second_tmp_value = *reinterpret_cast<char**>(value.second);
    auto c_to_cxx_first_tmp_value = std::string(first_tmp_value);
    free(first_tmp_value);
    auto c_to_cxx_second_tmp_value = std::string(second_tmp_value);
    free(second_tmp_value);
    std::pair<std::string, std::string> c_to_cxx_value { c_to_cxx_first_tmp_value, c_to_cxx_second_tmp_value };
    c_to_cxx_cself->setValue(c_to_cxx_value);
}

void release_WrapperPairIntInt(CObject cself) {
    delete static_cast<iegen::example::Wrapper<std::pair<int, int>>*>(cself.ptr);
}

CObject create_WrapperPairIntInt(CDataPair value){
    auto first_tmp_value = *reinterpret_cast<int*>(value.first);
    auto second_tmp_value = *reinterpret_cast<int*>(value.second);


    std::pair<int, int> c_to_cxx_value { first_tmp_value, second_tmp_value };
    auto this_object = new iegen::example::Wrapper<std::pair<int, int>>(c_to_cxx_value);
    return {strdup("iegen::example::Wrapper<std::pair<int, int>>"), this_object};
}

CDataPair _prop_get_WrapperPairIntInt_value(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::pair<int, int>>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->value();
    auto _first_data_cxx_to_c_result = new int;
    auto _second_data_cxx_to_c_result = new int;
    const auto& first_result = result.first;
    const auto& second_result = result.second;


    *_first_data_cxx_to_c_result = first_result;
    *_second_data_cxx_to_c_result = second_result;
    CDataPair cxx_to_c_result = { _first_data_cxx_to_c_result, _second_data_cxx_to_c_result };
    return cxx_to_c_result;
}

void _prop_set_WrapperPairIntInt_value(CObject cself, CDataPair value){
    
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::pair<int, int>>*>(cself.ptr);
    auto first_tmp_value = *reinterpret_cast<int*>(value.first);
    auto second_tmp_value = *reinterpret_cast<int*>(value.second);


    std::pair<int, int> c_to_cxx_value { first_tmp_value, second_tmp_value };
    c_to_cxx_cself->setValue(c_to_cxx_value);
}

void release_WrapperString(CObject cself) {
    delete static_cast<iegen::example::Wrapper<std::string>*>(cself.ptr);
}

CObject create_WrapperString(char* _Nonnull value){
    auto c_to_cxx_value = std::string(value);
    free(value);
    auto this_object = new iegen::example::Wrapper<std::string>(c_to_cxx_value);
    return {strdup("iegen::example::Wrapper<std::string>"), this_object};
}

char* _Nonnull _prop_get_WrapperString_value(CObject cself){
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::string>*>(cself.ptr);
    const auto& result = c_to_cxx_cself->value();
    auto cxx_to_c_result = strdup(result.data());
    return cxx_to_c_result;
}

void _prop_set_WrapperString_value(CObject cself, char* _Nonnull value){
    
    auto c_to_cxx_cself = static_cast<iegen::example::Wrapper<std::string>*>(cself.ptr);
    auto c_to_cxx_value = std::string(value);
    free(value);
    c_to_cxx_cself->setValue(c_to_cxx_value);
}
