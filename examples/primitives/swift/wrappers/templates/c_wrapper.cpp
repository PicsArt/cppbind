/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 09/06/2021-06:32.
 * Please do not change it manually.
 */

#include <string.h>
#include <memory>
#include "swift/wrappers/templates/c_wrapper.h"
#include "cxx/templates/wrapper.hpp"

using namespace iegen::example;

void release_WrapperPairStringString(void* _Nonnull cself) {
    delete dynamic_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself));
}

void* _Nonnull create_WrapperPairStringString(CDataPair value){
    auto first_tmp_value = *reinterpret_cast<char**>(value.first);
    auto second_tmp_value = *reinterpret_cast<char**>(value.second);
    auto c_to_cxx_first_tmp_value = std::string(first_tmp_value);
    free(first_tmp_value);
    auto c_to_cxx_second_tmp_value = std::string(second_tmp_value);
    free(second_tmp_value);
    std::pair<std::string, std::string> c_to_cxx_value { c_to_cxx_first_tmp_value, c_to_cxx_second_tmp_value };
    auto this_object = new iegen::example::Wrapper<std::pair<std::string, std::string>>(c_to_cxx_value);
    return static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(this_object);
}

CDataPair _prop_get_WrapperPairStringString_value(void* _Nonnull cself){
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself));
    auto result = c_to_cxx_cself->value();
    auto _first_data_cxx_to_c_result = new char*;
    auto _second_data_cxx_to_c_result = new char*;
    const auto& first_result = result.first;
    const auto& second_result = result.second;
    auto cxx_to_c_first_result = strdup(first_result.c_str()); 
    auto cxx_to_c_second_result = strdup(second_result.c_str()); 
    *_first_data_cxx_to_c_result = cxx_to_c_first_result;
    *_second_data_cxx_to_c_result = cxx_to_c_second_result;
    CDataPair cxx_to_c_result = { _first_data_cxx_to_c_result, _second_data_cxx_to_c_result };
    return cxx_to_c_result;
}

void _prop_set_WrapperPairStringString_setValue(void* _Nonnull cself, CDataPair value){
    
    // we might need to avoid dynamic_cast if there is no multiple inheritance
    auto c_to_cxx_cself = dynamic_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(static_cast<iegen::example::Wrapper<std::pair<std::string, std::string>>*>(cself));
    auto first_tmp_value = *reinterpret_cast<char**>(value.first);
    auto second_tmp_value = *reinterpret_cast<char**>(value.second);
    auto c_to_cxx_first_tmp_value = std::string(first_tmp_value);
    free(first_tmp_value);
    auto c_to_cxx_second_tmp_value = std::string(second_tmp_value);
    free(second_tmp_value);
    std::pair<std::string, std::string> c_to_cxx_value { c_to_cxx_first_tmp_value, c_to_cxx_second_tmp_value };
    c_to_cxx_cself->setValue(c_to_cxx_value);
}
