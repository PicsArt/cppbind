/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 03/16/2022-09:09.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/typedefs/c_queue_int.h"
#include "cxx/typedefs/queue_int.hpp"

using namespace iegen::example;

void release_IegenExample_QueueInt(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::QueueInt*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_QueueInt(IEGenCObject* _Nonnull err) {
    try {
        auto this_object = new iegen::example::QueueInt();
        return {strdup("iegen::example::QueueInt"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

void _func_IegenExample_QueueInt_push_back(IEGenCObject cself, int element, IEGenCObject* _Nonnull err) {
  
    auto ctocxxcself = static_cast<iegen::example::QueueInt*>(cself.ptr);
    try {
        ctocxxcself->push_back(element);
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
}

int _func_IegenExample_QueueInt_get_size(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::example::QueueInt*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->get_size();
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

void release_IegenExample_QueueIntUsage(IEGenCObject cself, bool owner) {
    if (owner) {
        delete static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    }
    free(cself.type);
}

IEGenCObject create_IegenExample_QueueIntUsage(IEGenCObject q, IEGenCObject* _Nonnull err) {
    
    auto ctocxxq = static_cast<iegen::example::QueueInt*>(q.ptr);
    try {
        auto this_object = new iegen::example::QueueIntUsage(ctocxxq);
        return {strdup("iegen::example::QueueIntUsage"), this_object};
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

int _func_IegenExample_QueueIntUsage_getSize(IEGenCObject q, IEGenCObject* _Nonnull err) {
    
    auto& ctocxxq = *static_cast<iegen::example::ConstQueueIntType*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getSize(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_IegenExample_QueueIntUsage_getLastElement(IEGenCObject q, IEGenCObject* _Nonnull err) {
    
    auto ctocxxq = static_cast<iegen::example::QueueIntType*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getLastElement(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_IegenExample_QueueIntUsage_getFirstElement(IEGenCObject q, IEGenCObject* _Nonnull err) {
    
    auto ctocxxq = static_cast<iegen::example::QueueInt*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getFirstElement(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

IEGenCObject _func_IegenExample_QueueIntUsage_getInvQueue(IEGenCDataArray v, IEGenCObject* _Nonnull err) {
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getInvQueue(ctocxxv);
        
        char* type_result = strdup("iegen::example::QueueInt");
        auto value_ptr_result = const_cast<iegen::example::QueueIntType*>(new iegen::example::QueueIntType(result));
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_IegenExample_QueueIntUsage_getSavedQueue(IEGenCObject cself, IEGenCObject* _Nonnull err) {
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSavedQueue();
        
        char* type_result = strdup("iegen::example::QueueInt");
        auto value_ptr_result = const_cast<iegen::example::QueueInt*>(result);
        IEGenCObject cxxtocresult = {type_result, value_ptr_result};
        return cxxtocresult;
    } catch (const std::exception& e) {
        err->type = strdup("std::exception");
        err->ptr = new std::exception(e);
    } catch (...) {
        err->type = strdup("Uncaught Exception");
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _prop_get_IegenExample_QueueIntUsage_empty_queue(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    const auto& result = ctocxxcself->empty_queue;
    
    char* type_result = strdup("iegen::example::QueueInt");
    auto value_ptr_result = const_cast<iegen::example::QueueIntType*>(new iegen::example::QueueIntType(result));
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

IEGenCObject _prop_get_IegenExample_QueueIntUsage_saved_queue(IEGenCObject cself) {
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    const auto& result = ctocxxcself->saved_queue;
    
    char* type_result = strdup("iegen::example::QueueInt");
    auto value_ptr_result = const_cast<iegen::example::QueueInt*>(result);
    IEGenCObject cxxtocresult = {type_result, value_ptr_result};
    return cxxtocresult;
}

