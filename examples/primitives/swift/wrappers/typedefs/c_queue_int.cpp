/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 01/31/2022-10:20.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/typedefs/c_queue_int.h"
#include "cxx/typedefs/queue_int.hpp"

using namespace iegen::example;

void release_QueueInt(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::QueueInt*>(cself.ptr);
    }
}

CObject create_QueueInt(ErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::QueueInt();
        return {strdup("iegen::example::QueueInt"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

void _func_QueueInt_push_back(CObject cself, int element, ErrorObj* _Nonnull err){
    
  
    
    auto ctocxxcself = static_cast<iegen::example::QueueInt*>(cself.ptr);
    try {
        ctocxxcself->push_back(element);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

int _func_QueueInt_get_size(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::QueueInt*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->get_size();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}
void release_QueueIntUsage(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    }
}

CObject create_QueueIntUsage(CObject q, ErrorObj* _Nonnull err){
    
    auto ctocxxq = static_cast<iegen::example::QueueInt*>(q.ptr);
    try {
        auto this_object = new iegen::example::QueueIntUsage(ctocxxq);
        return {strdup("iegen::example::QueueIntUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

int _func_QueueIntUsage_getSize(CObject q, ErrorObj* _Nonnull err){
    
    auto& ctocxxq = *static_cast<iegen::example::QueueInt*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getSize(ctocxxq);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

int _func_QueueIntUsage_getLastElement(CObject q, ErrorObj* _Nonnull err){
    
    auto ctocxxq = static_cast<iegen::example::QueueInt*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getLastElement(ctocxxq);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

int _func_QueueIntUsage_getFirstElement(CObject q, ErrorObj* _Nonnull err){
    
    auto ctocxxq = static_cast<iegen::example::QueueInt*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getFirstElement(ctocxxq);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result{};
    return result;
}

CObject _func_QueueIntUsage_getInvQueue(CDataArray v, ErrorObj* _Nonnull err){
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
  
    try {
        const auto& result = iegen::example::QueueIntUsage::getInvQueue(ctocxxv);
        
        char* type_result = strdup("iegen::example::QueueInt");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::QueueInt*>( new iegen::example::QueueInt(result) )};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}

CObject _func_QueueIntUsage_getSavedQueue(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSavedQueue();
        
        char* type_result = strdup("iegen::example::QueueInt");
        CObject cxxtocresult = {type_result, const_cast<iegen::example::QueueInt*>(result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    CObject result{};
    return result;
}
CObject _prop_get_QueueIntUsage_empty_queue(CObject cself){
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    const auto& result = ctocxxcself->empty_queue;
    
    char* type_result = strdup("iegen::example::QueueInt");
    CObject cxxtocresult = {type_result, const_cast<iegen::example::QueueInt*>( new iegen::example::QueueInt(result) )};
    return cxxtocresult;
}
CObject _prop_get_QueueIntUsage_saved_queue(CObject cself){
    auto ctocxxcself = static_cast<iegen::example::QueueIntUsage*>(cself.ptr);
    const auto& result = ctocxxcself->saved_queue;
    
    char* type_result = strdup("iegen::example::QueueInt");
    CObject cxxtocresult = {type_result, const_cast<iegen::example::QueueInt*>(result)};
    return cxxtocresult;
}
