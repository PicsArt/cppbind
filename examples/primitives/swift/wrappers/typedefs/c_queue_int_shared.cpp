/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/typedefs/c_queue_int_shared.h"
#include "cxx/typedefs/queue_int_shared.hpp"

extern const char* CPPBIND_STD_STDEXCEPTION;

const char* CPPBIND_CPPBIND_EXAMPLE_QUEUEINTSHARED = "cppbind::example::QueueIntShared";
const char* CPPBIND_CPPBIND_EXAMPLE_QUEUEINTSHAREDUSAGE = "cppbind::example::QueueIntSharedUsage";

using namespace cppbind::example;

void release_CppbindExample_QueueIntShared(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_QueueIntShared(CppBindCObject* _Nonnull cppbind_err) {
    try {
        auto this_object = new cppbind::example::QueueIntShared();
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_QUEUEINTSHARED), new std::shared_ptr<cppbind::example::QueueIntShared>(this_object)};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

void _func_CppbindExample_QueueIntShared_push_back(CppBindCObject cself, int element, CppBindCObject* _Nonnull cppbind_err) {
  
    std::shared_ptr<cppbind::example::QueueIntShared> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(cself.ptr);
    try {
        ctocxxcself->push_back(element);
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
}

int _func_CppbindExample_QueueIntShared_get_size(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    std::shared_ptr<cppbind::example::QueueIntShared> ctocxxcself;
    ctocxxcself = *static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->get_size();
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

void release_CppbindExample_QueueIntSharedUsage(CppBindCObject cself, bool owner) {
    if (owner) {
        delete static_cast<cppbind::example::QueueIntSharedUsage*>(cself.ptr);
    }
    free(cself.type);
}

CppBindCObject create_CppbindExample_QueueIntSharedUsage(CppBindCObject q, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::QueueIntShared> ctocxxq;
    ctocxxq = *static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(q.ptr);
    try {
        auto this_object = new cppbind::example::QueueIntSharedUsage(ctocxxq);
        return {strdup(CPPBIND_CPPBIND_EXAMPLE_QUEUEINTSHAREDUSAGE), this_object};
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

int _func_CppbindExample_QueueIntSharedUsage_getSize(CppBindCObject q, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::QueueIntShared> ctocxxq;
    ctocxxq = *static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(q.ptr);
  
    try {
        const auto& result = cppbind::example::QueueIntSharedUsage::getSize(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_CppbindExample_QueueIntSharedUsage_getLastElement(CppBindCObject q, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<cppbind::example::QueueIntShared> ctocxxq;
    ctocxxq = *static_cast<std::shared_ptr<cppbind::example::QueueIntShared>*>(q.ptr);
  
    try {
        const auto& result = cppbind::example::QueueIntSharedUsage::getLastElement(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

int _func_CppbindExample_QueueIntSharedUsage_getFirstElement(CppBindCObject q, CppBindCObject* _Nonnull cppbind_err) {
    
    std::shared_ptr<const cppbind::example::QueueIntShared> ctocxxq;
    ctocxxq = *static_cast<std::shared_ptr<const cppbind::example::QueueIntShared>*>(q.ptr);
  
    try {
        const auto& result = cppbind::example::QueueIntSharedUsage::getFirstElement(ctocxxq);
        
        return result;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    int result {};
    return result;
}

CppBindCObject _func_CppbindExample_QueueIntSharedUsage_getInvQueue(CppBindCDataArray v, CppBindCObject* _Nonnull cppbind_err) {
    std::vector<int> ctocxxv;

    auto data_v = reinterpret_cast<int*>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        
        ctocxxv.emplace_back(value_v);
    }
  
    try {
        const auto& result = cppbind::example::QueueIntSharedUsage::getInvQueue(ctocxxv);
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::QueueIntShared>(std::const_pointer_cast<cppbind::example::QueueIntShared>(result));
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _func_CppbindExample_QueueIntSharedUsage_getSavedQueue(CppBindCObject cself, CppBindCObject* _Nonnull cppbind_err) {
    auto ctocxxcself = static_cast<cppbind::example::QueueIntSharedUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSavedQueue();
        
        char* type_result = nullptr;
        void* cxxtocresult_ptr = nullptr;
        cxxtocresult_ptr = new std::shared_ptr<cppbind::example::QueueIntShared>(std::const_pointer_cast<cppbind::example::QueueIntShared>(result));
        CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
        return cxxtocresult;
    } catch (const std::exception& e) {
        cppbind_err->type = strdup(CPPBIND_STD_STDEXCEPTION);
        cppbind_err->ptr = new std::exception(e);
    } catch (...) {
        cppbind_err->type = strdup("Uncaught Exception");
    }
    CppBindCObject result {};
    return result;
}

CppBindCObject _prop_get_CppbindExample_QueueIntSharedUsage_saved_queue(CppBindCObject cself) {
    auto ctocxxcself = static_cast<cppbind::example::QueueIntSharedUsage*>(cself.ptr);
    const auto& result = ctocxxcself->saved_queue;
    
    char* type_result = nullptr;
    void* cxxtocresult_ptr = nullptr;
    cxxtocresult_ptr = new std::shared_ptr<cppbind::example::QueueIntShared>(std::const_pointer_cast<cppbind::example::QueueIntShared>(result));
    CppBindCObject cxxtocresult = {type_result, cxxtocresult_ptr};
    return cxxtocresult;
}

