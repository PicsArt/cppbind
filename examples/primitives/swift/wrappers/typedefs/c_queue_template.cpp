/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 02/03/2022-08:11.
 * Please do not change it manually.
 */

#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/typedefs/c_queue_template.h"
#include "cxx/typedefs/queue_template.hpp"

using namespace iegen::example;

void release_QueueString(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::Queue<std::string>*>(cself.ptr);
    }
}

IEGenCObject create_QueueString(IEGenCErrorObj* _Nonnull err){
    try {
        auto this_object = new iegen::example::Queue<std::string>();
        return {strdup("iegen::example::Queue<std::string>"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    IEGenCObject result {};
    return result;
}

void _func_QueueString_push_back(IEGenCObject cself, char* _Nonnull element, IEGenCErrorObj* _Nonnull err){
    auto ctocxxelement = std::string(element);
    free(element);
  
    
    auto ctocxxcself = static_cast<iegen::example::Queue<std::string>*>(cself.ptr);
    try {
        ctocxxcself->push_back(ctocxxelement);
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
}

int _func_QueueString_get_size(IEGenCObject cself, IEGenCErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::Queue<std::string>*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->get_size();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result {};
    return result;
}
void release_QueueUsage(IEGenCObject cself, bool owner) {
    free(cself.type);
    if (owner) {
        delete static_cast<iegen::example::QueueUsage*>(cself.ptr);
    }
}

IEGenCObject create_QueueUsage(IEGenCObject q, IEGenCErrorObj* _Nonnull err){
    
    auto ctocxxq = static_cast<iegen::example::Queue<std::string>*>(q.ptr);
    try {
        auto this_object = new iegen::example::QueueUsage(ctocxxq);
        return {strdup("iegen::example::QueueUsage"), this_object};
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    IEGenCObject result {};
    return result;
}

int _func_QueueUsage_getSize(IEGenCObject q, IEGenCErrorObj* _Nonnull err){
    
    auto& ctocxxq = *static_cast<iegen::example::QueueStdStringType*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueUsage::getSize(ctocxxq);
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    int result {};
    return result;
}

char* _Nonnull _func_QueueUsage_getLastElement(IEGenCObject q, IEGenCErrorObj* _Nonnull err){
    
    auto ctocxxq = static_cast<iegen::example::Queue<std::string>*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueUsage::getLastElement(ctocxxq);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result {};
    return result;
}

char* _Nonnull _func_QueueUsage_getFirstElement(IEGenCObject q, IEGenCErrorObj* _Nonnull err){
    
    auto& ctocxxq = *static_cast<iegen::example::ConstQueueStdStringType*>(q.ptr);
  
    try {
        const auto& result = iegen::example::QueueUsage::getFirstElement(ctocxxq);
        auto cxxtocresult = strdup(result.data());
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    char* result {};
    return result;
}

IEGenCObject _func_QueueUsage_getRevQueue(IEGenCDataArray v, IEGenCErrorObj* _Nonnull err){
    iegen::example::VectorOfStringsType ctocxxv;

    auto data_v = reinterpret_cast<char**>(v.data);

    for (size_t _i_v = 0; _i_v < v.size; ++_i_v) {
        auto& value_v = data_v[_i_v];
        auto ctocxxvalue_v = std::string(value_v);
        free(value_v);
        ctocxxv.emplace_back(ctocxxvalue_v);
    }
  
    try {
        const auto& result = iegen::example::QueueUsage::getRevQueue(ctocxxv);
        
        char* type_result = strdup("iegen::example::Queue<std::string>");
        IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::QueueStdStringType*>( new iegen::example::QueueStdStringType(result) )};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    IEGenCObject result {};
    return result;
}

IEGenCObject _func_QueueUsage_getSavedQueue(IEGenCObject cself, IEGenCErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<iegen::example::QueueUsage*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->getSavedQueue();
        
        char* type_result = strdup("iegen::example::Queue<std::string>");
        IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::Queue<std::string>*>(result)};
        return cxxtocresult;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    IEGenCObject result {};
    return result;
}
IEGenCObject _prop_get_QueueUsage_empty_queue(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::QueueUsage*>(cself.ptr);
    const auto& result = ctocxxcself->empty_queue;
    
    char* type_result = strdup("iegen::example::Queue<std::string>");
    IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::QueueStdStringType*>( new iegen::example::QueueStdStringType(result) )};
    return cxxtocresult;
}
IEGenCObject _prop_get_QueueUsage_saved_queue(IEGenCObject cself){
    auto ctocxxcself = static_cast<iegen::example::QueueUsage*>(cself.ptr);
    const auto& result = ctocxxcself->saved_queue;
    
    char* type_result = strdup("iegen::example::Queue<std::string>");
    IEGenCObject cxxtocresult = {type_result, const_cast<iegen::example::Queue<std::string>*>(result)};
    return cxxtocresult;
}
