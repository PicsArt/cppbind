# after this macros `class_start_comment`, `class_end_comment`, `method_comment` and `register_method_arg` are available in this file
var_macros: &var_macros
  !concat
  - !include shareable_macros/code_snippets_macros.yaml&method_macros
  - !include shareable_macros/code_snippets_macros.yaml&class_macros.class_start
  - !include shareable_macros/code_snippets_macros.yaml&class_macros.class_end

# code snippets for file
file:
  my_lang:
    file_path: |
      {{"my_lang" + pat_sep + [vars.file]|map('replace', '.', pat_sep)|path_join}}.my_lang
    scopes:
      - body
    content: |
      {{body}}

# code snippets for class
class:
  my_lang:
    body:
      scopes:
        - body
      content:
        !concat
        - *var_macros
        - |
          {{class_start_comment(vars.name)}}
          public class {{vars.name}}  {

            // body of function
            {{body|string|indent}}
          }
          {{class_end_comment(vars.name)}}

# code snippets for function
method:
  my_lang:
    # example of snippet call which doesn't have source and target defined
    body:
      !concat
      - *var_macros
      - |
        {%- set comma = joiner(', ') -%}
        {{method_comment(vars.name)}}
        public function ({%- for arg in cxx.args -%}{{comma()}}{{arg.name}}: {{make_type_converter(arg.type).my_lang.target_type_name}}{%- endfor -%}) {

          {%- set args_list = [] -%}
          {%- for arg in cxx.args %}
          {%-   set arg_converter = make_type_converter(arg.type) %}
          {#    calling shareable macro which modifies macro arguments in order to use it later -#}
                {{register_method_arg(args_list, arg)}}
          {%-   if arg_converter.my_section %}
              {{arg_converter.my_section.snippet(arg.name)}}
          {%- endif %}

            {{arg_converter.my_lang_to_c.snippet(arg.name)}}
          {%- endfor %}
          // arg names -> {{args_list}}

        }
