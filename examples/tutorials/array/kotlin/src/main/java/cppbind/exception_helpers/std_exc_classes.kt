/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/13/2022-14:26.
 * Please do not change it manually.
 */

package cppbind.exception_helpers

import cppbind.alias.*
import cppbind.exceptionUtils.*
import cppbind.exception_helpers.*

open class StdException
internal constructor(obj: CppBindObject) : AutoCloseable, Exception() {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        const val cppbindCxxTypeName: String = "std::exception"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): StdException {
            val idType = jGettypebyid(id)
            when (idType) {
                StdDomainError.cppbindCxxTypeName -> return StdDomainError(CppBindObject(id, owner))
                StdInvalidArgument.cppbindCxxTypeName -> return StdInvalidArgument(CppBindObject(id, owner))
                StdLengthError.cppbindCxxTypeName -> return StdLengthError(CppBindObject(id, owner))
                StdOutOfRange.cppbindCxxTypeName -> return StdOutOfRange(CppBindObject(id, owner))
                StdOverflowError.cppbindCxxTypeName -> return StdOverflowError(CppBindObject(id, owner))
                StdRangeError.cppbindCxxTypeName -> return StdRangeError(CppBindObject(id, owner))
                StdUnderflowError.cppbindCxxTypeName -> return StdUnderflowError(CppBindObject(id, owner))
                StdBadAlloc.cppbindCxxTypeName -> return StdBadAlloc(CppBindObject(id, owner))
                StdBadCast.cppbindCxxTypeName -> return StdBadCast(CppBindObject(id, owner))
                StdBadTypeId.cppbindCxxTypeName -> return StdBadTypeId(CppBindObject(id, owner))
                StdLogicError.cppbindCxxTypeName -> return StdLogicError(CppBindObject(id, owner))
                StdRuntimeError.cppbindCxxTypeName -> return StdRuntimeError(CppBindObject(id, owner))
                else -> return StdException(CppBindObject(id, owner))
            }
        }
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }
    
    open fun what(): String {
        val result = jWhat(id)
        val jdktokotlinresult = result!!
        return jdktokotlinresult
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jWhat(id: Long): String?
    private external fun jFinalize(id: Long): Unit
}

open class StdLogicError
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::logic_error"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): StdLogicError {
            val idType = jGettypebyid(id)
            when (idType) {
                StdDomainError.cppbindCxxTypeName -> return StdDomainError(CppBindObject(id, owner))
                StdInvalidArgument.cppbindCxxTypeName -> return StdInvalidArgument(CppBindObject(id, owner))
                StdLengthError.cppbindCxxTypeName -> return StdLengthError(CppBindObject(id, owner))
                StdOutOfRange.cppbindCxxTypeName -> return StdOutOfRange(CppBindObject(id, owner))
                else -> return StdLogicError(CppBindObject(id, owner))
            }
        }
    }
    
}

open class StdRuntimeError
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::runtime_error"

        public fun cppbindConstructObject(id: Long, owner: Boolean = false): StdRuntimeError {
            val idType = jGettypebyid(id)
            when (idType) {
                StdOverflowError.cppbindCxxTypeName -> return StdOverflowError(CppBindObject(id, owner))
                StdRangeError.cppbindCxxTypeName -> return StdRangeError(CppBindObject(id, owner))
                StdUnderflowError.cppbindCxxTypeName -> return StdUnderflowError(CppBindObject(id, owner))
                else -> return StdRuntimeError(CppBindObject(id, owner))
            }
        }
    }
    
}

open class StdDomainError
internal constructor(obj: CppBindObject) : StdLogicError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::domain_error"
    }
    
}

open class StdInvalidArgument
internal constructor(obj: CppBindObject) : StdLogicError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::invalid_argument"
    }
    
}

open class StdLengthError
internal constructor(obj: CppBindObject) : StdLogicError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::length_error"
    }
    
}

open class StdOutOfRange
internal constructor(obj: CppBindObject) : StdLogicError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::out_of_range"
    }
    
}

open class StdRangeError
internal constructor(obj: CppBindObject) : StdRuntimeError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::range_error"
    }
    
}

open class StdOverflowError
internal constructor(obj: CppBindObject) : StdRuntimeError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::overflow_error"
    }
    
}

open class StdUnderflowError
internal constructor(obj: CppBindObject) : StdRuntimeError(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::underflow_error"
    }
    
}

open class StdBadAlloc
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::bad_alloc"
    }
    
}

open class StdBadCast
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::bad_cast"
    }
    
}

open class StdBadTypeId
internal constructor(obj: CppBindObject) : StdException(obj) {
    companion object {
        
        const val cppbindCxxTypeName: String = "std::bad_typeid"
    }
    
}

private external fun jGettypebyid(id: Long): String
