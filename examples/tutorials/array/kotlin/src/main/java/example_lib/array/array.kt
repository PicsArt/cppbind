/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/06/2022-08:25.
 * Please do not change it manually.
 */

package example_lib.array

import example_lib.cppbind.alias.*
import example_lib.cppbind.exceptionUtils.*
import example_lib.cppbind.exception_helpers.*

open class Array
internal constructor(obj: CppBindObject) : AutoCloseable {
    companion object {
        init {
            System.loadLibrary("wrapper_jni")
        }
        
        protected fun construct_helper(): Long {
            val id = jConstructor()
            return id
        }

        @JvmStatic
        private external fun jConstructor(): Long
        /**
         * An internal property to keep an information about the underlying C++ object type.
         * It is intended to be used by the generated code.
         */
        const val cppbindCxxTypeName: String = "cppbind::Array"
    }
    
    protected var cppbindObj = obj
    private var refs: MutableList<Any> = mutableListOf()

    /**
     * An internal method to bind the lifetimes of the current and another object.
     * It is intended to be used by the generated code.
     */
    fun keepCppBindReference(ref: Any) {
        refs.add(ref)
    }
    /**
     * An internal getter to get the id of an object.
     * It is intended to be used by the generated code.
     */
    
    open val id: Long
        get() {
            if (cppbindObj.id == 0L) {
                throw RuntimeException("Object is not allocated")
            }
            return cppbindObj.id
        }

    /**
     * An internal property returning underlying C++ object id.
     * It is intended to be used by the generated code.
     */
    internal val cxxId: Long by lazy {
        jGetcxxid(cppbindObj.id)
    }

    /**
     * An internal property returning underlying C++ type name.
     * It is intended to be used by the generated code.
     */
    internal val cxxTypeName: String by lazy {
        jGettypebyid(cppbindObj.id)
    }
    
    constructor(): this(CppBindObject(construct_helper(), true)) {
    }
    
    val size: Int
        get() {
            val result = jSize(id)
            
            return result
        }

    val empty: Boolean
        get() {
            val result = jEmpty(id)
            
            return result
        }
    
    fun front(): Int {
        val result = jFront(id)
        
        return result
    }

    fun back(): Int {
        val result = jBack(id)
        
        return result
    }

    fun push_back(element: Int): Unit {
        val result = jPush_back(id, element)
        
        return result
    }

    operator fun get(i: Int): Int {
        val result = jGet(id, i)
        
        return result
    }


    operator fun set(i: Int, value: Int){
        jSet(id, i, value)
    }

    fun at(i: Int): Int {
        val result = jAt(id, i)
        
        return result
    }

    /**
     * CPPBind generated hashCode method returning the hash of underlying C++ object id. .
     */
    override fun hashCode(): Int {
        return cxxId.hashCode()
    }

    /**
     * CPPBind generated equals method comparing the underlying C++ object ids.
     */
    override fun equals(other: Any?): Boolean {
        other as Array
        return cxxId == other.cxxId
    }

    /**
     * CPPBind generated toString method returning underlying C++ object type and id.
     */
    override fun toString(): String {
        return "<0x%x: %s>".format(cxxId, cxxTypeName)
    }

    override fun close() {
        if (cppbindObj.owner && cppbindObj.id != 0L) {
            jFinalize(cppbindObj.id)
            cppbindObj.id = 0L
        }
    }

    /**
     * Finalize and deletes the object
     */
    protected fun finalize() {
        close()
    }

    ///// External wrapper functions ////////////
    private external fun jFront(id: Long): Int
    private external fun jBack(id: Long): Int
    private external fun jPush_back(id: Long, element: Int, vararg extraObjs: Any?): Unit
    private external fun jSize(id: Long): Int
    private external fun jEmpty(id: Long): Boolean
    private external fun jGet(id: Long, i: Int, vararg extraObjs: Any?): Int
    private external fun jSet(id: Long, i: Intvalue: Int, vararg extraObjs: Any?)
    private external fun jAt(id: Long, i: Int, vararg extraObjs: Any?): Int
    private external fun jFinalize(id: Long): Unit
    private external fun jGetcxxid(id: Long): Long
}

private external fun jGettypebyid(id: Long): String
