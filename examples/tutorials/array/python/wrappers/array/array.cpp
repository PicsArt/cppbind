/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 05/23/2022-09:36.
 * Please do not change it manually.
 */

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/array.hpp"

namespace py = pybind11;

void bindArrayArray(py::module& m) {
    {
        using namespace cppbind;
        py::class_<cppbind::Array> array(m, "Array");
        
        array.def(py::init<>());
        array.def("front", &cppbind::Array::front, py::return_value_policy::automatic);
        array.def("back", &cppbind::Array::back, py::return_value_policy::automatic);
        array.def("push_back", &cppbind::Array::push_back, py::arg("element"));

        array.def_property_readonly("size", &cppbind::Array::size, py::return_value_policy::reference_internal);

        array.def_property_readonly("empty", &cppbind::Array::empty, py::return_value_policy::reference_internal);
        array.def("__getitem__", &cppbind::Array::operator[], py::arg("i"), py::return_value_policy::automatic);
        array.def("__setitem__", [](cppbind::Array& self, int i, int value){ self[i] = value; });
        array.def("at", &cppbind::Array::at, py::arg("i"), py::return_value_policy::automatic);
    }
} /* bindArrayArray */
