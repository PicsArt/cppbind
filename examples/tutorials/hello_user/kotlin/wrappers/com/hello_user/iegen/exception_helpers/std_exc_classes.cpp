/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/07/2022-06:13.
 * Please do not change it manually.
 */

#include "jni.h"
#include <iostream>
#include <cxxabi.h>
#include <string.h>
#include <type_traits>
#include "kotlin/wrappers/c_helpers.h"
#include "kotlin/wrappers/iegen_wrapper_helper.hpp"
#include <stdexcept>
#include <new>
#include <typeinfo>


const char* IEGEN_STD_STDEXCEPTION = "std::exception";
const char* IEGEN_STD_STDLOGICERROR = "std::logic_error";
const char* IEGEN_STD_STDRUNTIMEERROR = "std::runtime_error";
const char* IEGEN_STD_STDDOMAINERROR = "std::domain_error";
const char* IEGEN_STD_STDINVALIDARGUMENT = "std::invalid_argument";
const char* IEGEN_STD_STDLENGTHERROR = "std::length_error";
const char* IEGEN_STD_STDOUTOFRANGE = "std::out_of_range";
const char* IEGEN_STD_STDRANGEERROR = "std::range_error";
const char* IEGEN_STD_STDOVERFLOWERROR = "std::overflow_error";
const char* IEGEN_STD_STDUNDERFLOWERROR = "std::underflow_error";
const char* IEGEN_STD_STDBADALLOC = "std::bad_alloc";
const char* IEGEN_STD_STDBADCAST = "std::bad_cast";
const char* IEGEN_STD_STDBADTYPEID = "std::bad_typeid";

using namespace std;


extern "C" JNIEXPORT void Java_com_hello_1user_iegen_exception_1helpers_StdException_jFinalize(JNIEnv* env, jobject obj, jobjectid id){
    static_assert(std::has_virtual_destructor<std::exception>::value, "std::exception type must have virtual destructor");
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (strcmp(iegen_obj_id->type, IEGEN_STD_STDEXCEPTION) == 0)
        delete static_cast<std::exception*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDDOMAINERROR) == 0)
        delete static_cast<std::domain_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
        delete static_cast<std::invalid_argument*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLENGTHERROR) == 0)
        delete static_cast<std::length_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOUTOFRANGE) == 0)
        delete static_cast<std::out_of_range*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOVERFLOWERROR) == 0)
        delete static_cast<std::overflow_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRANGEERROR) == 0)
        delete static_cast<std::range_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
        delete static_cast<std::underflow_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADALLOC) == 0)
        delete static_cast<std::bad_alloc*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADCAST) == 0)
        delete static_cast<std::bad_cast*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADTYPEID) == 0)
        delete static_cast<std::bad_typeid*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLOGICERROR) == 0)
        delete static_cast<std::logic_error*>(iegen_obj_id_ptr);
    else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRUNTIMEERROR) == 0)
        delete static_cast<std::runtime_error*>(iegen_obj_id_ptr);
    else {
        std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
        exit(1);
    }
    free(iegen_obj_id->type);
    delete iegen_obj_id;
}

std::exception* downcast_Std_StdException(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_STD_STDEXCEPTION) == 0)
            return static_cast<std::exception*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDDOMAINERROR) == 0)
            return static_cast<std::domain_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
            return static_cast<std::invalid_argument*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLENGTHERROR) == 0)
            return static_cast<std::length_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOUTOFRANGE) == 0)
            return static_cast<std::out_of_range*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOVERFLOWERROR) == 0)
            return static_cast<std::overflow_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRANGEERROR) == 0)
            return static_cast<std::range_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
            return static_cast<std::underflow_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADALLOC) == 0)
            return static_cast<std::bad_alloc*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADCAST) == 0)
            return static_cast<std::bad_cast*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDBADTYPEID) == 0)
            return static_cast<std::bad_typeid*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLOGICERROR) == 0)
            return static_cast<std::logic_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRUNTIMEERROR) == 0)
            return static_cast<std::runtime_error*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}


extern "C" JNIEXPORT jstring Java_com_hello_1user_iegen_exception_1helpers_StdException_jWhat(JNIEnv* env, jobject obj, jobjectid id){
    
    validateID(id);
    std::exception* jnitocxxid = downcast_Std_StdException(id);
    
    try {
        const auto& result = jnitocxxid->what();
        jstring cxxtojniresult = env->NewStringUTF(result);
        return cxxtojniresult;
    }
    catch (const std::exception& e) {
        jclass handlerCls = env->FindClass("com/hello_user/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
    }
    catch (...) {
        jclass handlerCls = env->FindClass("com/hello_user/iegen/exceptionUtils/ExceptionHandler");
        jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
        env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
    }

    jstring result {};
    return result;
}


std::logic_error* downcast_Std_StdLogicError(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLOGICERROR) == 0)
            return static_cast<std::logic_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDDOMAINERROR) == 0)
            return static_cast<std::domain_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
            return static_cast<std::invalid_argument*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDLENGTHERROR) == 0)
            return static_cast<std::length_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOUTOFRANGE) == 0)
            return static_cast<std::out_of_range*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}


std::runtime_error* downcast_Std_StdRuntimeError(jobjectid id) {
    auto iegen_obj_id = reinterpret_cast<IEGenCObject*>(id);
    auto iegen_obj_id_ptr = iegen_obj_id ? iegen_obj_id->ptr : nullptr;
    if (iegen_obj_id_ptr) {
        if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRUNTIMEERROR) == 0)
            return static_cast<std::runtime_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDOVERFLOWERROR) == 0)
            return static_cast<std::overflow_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDRANGEERROR) == 0)
            return static_cast<std::range_error*>(iegen_obj_id_ptr);
        else if (strcmp(iegen_obj_id->type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
            return static_cast<std::underflow_error*>(iegen_obj_id_ptr);
        else {
            std::cerr << "Unexpected object type: " << iegen_obj_id->type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

extern "C" JNIEXPORT jstring Java_com_hello_1user_iegen_exception_1helpers_Std_1exc_1classesKt_jGettypebyid(JNIEnv* env, jclass cls, jobjectid id) {
    validateID(id);
    return env->NewStringUTF(reinterpret_cast<IEGenCObject*>(id)->type);
}
