/**
 *   ______ .______   .______   .______    __  .__   __.  _______  
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \ 
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/ 
 * 
 * This file is generated by cppbind on 06/09/2022-12:41.
 * Please do not change it manually.
 */

#include <cxxabi.h>
#include <memory>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "cxx/hello_user.hpp"

namespace py = pybind11;

void bindExampleLibHelloHelloUser(py::module& m) {
    {
        py::class_<UserInfo> userInfo(m, "UserInfo");
        
        userInfo.def(py::init<const std::string &, unsigned int>(), py::arg("user_name"), py::arg("user_age"));
        userInfo.def_readonly("age", &UserInfo::age, py::return_value_policy::reference_internal);
        userInfo.def_readonly("name", &UserInfo::name, py::return_value_policy::reference_internal);
        userInfo.def_readwrite("want_a_drink", &UserInfo::want_a_drink, py::return_value_policy::reference_internal);
        userInfo.def("__repr__", [](const UserInfo& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "UserInfo";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
    {
        py::class_<Host> host(m, "Host");
        
        host.def(py::init<>());
        host.def("hello", &Host::hello, py::arg("user"), py::return_value_policy::automatic);
        host.def("welcome", &Host::welcome, py::arg("user"), py::return_value_policy::automatic);
        host.def("__repr__", [](const Host& self) -> std::string {
            int status;
            const char* name = typeid(self).name();
            std::unique_ptr<char[], std::function<void(char*)>> demangledSymbol(
                __cxxabiv1::__cxa_demangle(name, nullptr, nullptr, &status), free);
            const char * classname = "Host";
            if (status == 0) {
                classname = demangledSymbol.get();
            }
            char res[96];
            snprintf(res, sizeof(res), "<0x%08zx: %s>", reinterpret_cast<std::size_t>(&self), classname);
            return res;
        });  
    }
} /* bindExampleLibHelloHelloUser */
