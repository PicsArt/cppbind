/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 12/21/2021-09:32.
 * Please do not change it manually.
 */

#include <string.h>
#include <cxxabi.h>
#include <memory>
#include "swift/wrappers/hello_user/iegen/exception_helpers/c_std_exc_classes.h"
#include <stdexcept>
#include <new>
#include <typeinfo>


using namespace std;

void release_StdException(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}

const char * _Nonnull _func_StdException_what(CObject cself, ErrorObj* _Nonnull err){
    
    auto ctocxxcself = static_cast<std::exception*>(cself.ptr);
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    }
    catch (const std::exception& e) {
        err->err_type = 1;
        err->err_ptr = new std::exception(e);
    }
    catch (...) {
        err->err_type = -1;
    }
    const char * result{};
    return result;
}
void release_StdLogicError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdRuntimeError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdDomainError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdInvalidArgument(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdLengthError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdOutOfRange(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdRangeError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdOverflowError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdUnderflowError(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdBadAlloc(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdBadCast(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
void release_StdBadTypeId(CObject cself, bool owner) {
    delete cself.type;
    if (owner) {
        delete static_cast<std::exception*>(cself.ptr);
    }
}
