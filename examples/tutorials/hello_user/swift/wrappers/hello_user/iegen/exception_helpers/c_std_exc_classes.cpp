/**
 * ,--.,------. ,----.   ,------.,--.  ,--. 
 * |  ||  .---''  .-.|   |  .---'|  ,'.|  | 
 * |  ||  `--, |  | .---.|  `--, |  |' '  | 
 * |  ||  `---.'  '--'  ||  `---.|  | `   | 
 * `--'`------' `------' `------'`--'  `--' 
 * 
 * This file is generated by iegen on 04/06/2022-15:17.
 * Please do not change it manually.
 */

#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <cxxabi.h>
#include <memory>
#include <type_traits>
#include "swift/wrappers/hello_user/iegen/exception_helpers/c_std_exc_classes.h"
#include <stdexcept>
#include <new>
#include <typeinfo>


const char* IEGEN_STD_STDEXCEPTION = "std::exception";
const char* IEGEN_STD_STDLOGICERROR = "std::logic_error";
const char* IEGEN_STD_STDRUNTIMEERROR = "std::runtime_error";
const char* IEGEN_STD_STDDOMAINERROR = "std::domain_error";
const char* IEGEN_STD_STDINVALIDARGUMENT = "std::invalid_argument";
const char* IEGEN_STD_STDLENGTHERROR = "std::length_error";
const char* IEGEN_STD_STDOUTOFRANGE = "std::out_of_range";
const char* IEGEN_STD_STDRANGEERROR = "std::range_error";
const char* IEGEN_STD_STDOVERFLOWERROR = "std::overflow_error";
const char* IEGEN_STD_STDUNDERFLOWERROR = "std::underflow_error";
const char* IEGEN_STD_STDBADALLOC = "std::bad_alloc";
const char* IEGEN_STD_STDBADCAST = "std::bad_cast";
const char* IEGEN_STD_STDBADTYPEID = "std::bad_typeid";

using namespace std;

void release_Std_StdException(IEGenCObject cself, bool owner) {
    static_assert(std::has_virtual_destructor<std::exception>::value, "std::exception type must have virtual destructor");
    if (owner) {
        if (strcmp(cself.type, IEGEN_STD_STDEXCEPTION) == 0)
            delete static_cast<std::exception*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDDOMAINERROR) == 0)
            delete static_cast<std::domain_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
            delete static_cast<std::invalid_argument*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDLENGTHERROR) == 0)
            delete static_cast<std::length_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDOUTOFRANGE) == 0)
            delete static_cast<std::out_of_range*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDOVERFLOWERROR) == 0)
            delete static_cast<std::overflow_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDRANGEERROR) == 0)
            delete static_cast<std::range_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
            delete static_cast<std::underflow_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDBADALLOC) == 0)
            delete static_cast<std::bad_alloc*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDBADCAST) == 0)
            delete static_cast<std::bad_cast*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDBADTYPEID) == 0)
            delete static_cast<std::bad_typeid*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDLOGICERROR) == 0)
            delete static_cast<std::logic_error*>(cself.ptr);
        else if (strcmp(cself.type, IEGEN_STD_STDRUNTIMEERROR) == 0)
            delete static_cast<std::runtime_error*>(cself.ptr);
        else {
            std::cerr << "Unexpected object type: " << cself.type << std::endl;
            exit(1);
        }
    }
    free(cself.type);
}

std::exception* downcast_Std_StdException(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_STD_STDEXCEPTION) == 0)
            return static_cast<std::exception*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDDOMAINERROR) == 0)
            return static_cast<std::domain_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
            return static_cast<std::invalid_argument*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDLENGTHERROR) == 0)
            return static_cast<std::length_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDOUTOFRANGE) == 0)
            return static_cast<std::out_of_range*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDOVERFLOWERROR) == 0)
            return static_cast<std::overflow_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDRANGEERROR) == 0)
            return static_cast<std::range_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
            return static_cast<std::underflow_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDBADALLOC) == 0)
            return static_cast<std::bad_alloc*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDBADCAST) == 0)
            return static_cast<std::bad_cast*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDBADTYPEID) == 0)
            return static_cast<std::bad_typeid*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDLOGICERROR) == 0)
            return static_cast<std::logic_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDRUNTIMEERROR) == 0)
            return static_cast<std::runtime_error*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

const char * _Nonnull _func_Std_StdException_what(IEGenCObject cself, IEGenCObject* _Nonnull iegen_err) {
    std::exception* ctocxxcself = downcast_Std_StdException(cself);
    try {
        const auto& result = ctocxxcself->what();
        
        return result;
    } catch (const std::exception& e) {
        iegen_err->type = strdup(IEGEN_STD_STDEXCEPTION);
        iegen_err->ptr = new std::exception(e);
    } catch (...) {
        iegen_err->type = strdup("Uncaught Exception");
    }
    const char * result {};
    return result;
}

std::logic_error* downcast_Std_StdLogicError(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_STD_STDLOGICERROR) == 0)
            return static_cast<std::logic_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDDOMAINERROR) == 0)
            return static_cast<std::domain_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDINVALIDARGUMENT) == 0)
            return static_cast<std::invalid_argument*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDLENGTHERROR) == 0)
            return static_cast<std::length_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDOUTOFRANGE) == 0)
            return static_cast<std::out_of_range*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

std::runtime_error* downcast_Std_StdRuntimeError(IEGenCObject iegenObj) {
    if (iegenObj.ptr) {
        if (strcmp(iegenObj.type, IEGEN_STD_STDRUNTIMEERROR) == 0)
            return static_cast<std::runtime_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDOVERFLOWERROR) == 0)
            return static_cast<std::overflow_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDRANGEERROR) == 0)
            return static_cast<std::range_error*>(iegenObj.ptr);
        else if (strcmp(iegenObj.type, IEGEN_STD_STDUNDERFLOWERROR) == 0)
            return static_cast<std::underflow_error*>(iegenObj.ptr);
        else {
            std::cerr << "Unexpected object type: " << iegenObj.type << std::endl;
            exit(1);
        }
    }
    return nullptr;
}

