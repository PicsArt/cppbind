/**
 *   ______ .______   .______   .______    __  .__   __.  _______
 *  /      ||   _  \  |   _  \  |   _  \  |  | |  \ |  | |       \
 * |  ,----'|  |_)  | |  |_)  | |  |_)  | |  | |   \|  | |  .--.  |
 * |  |     |   ___/  |   ___/  |   _  <  |  | |  . `  | |  |  |  |
 * |  `----.|  |      |  |      |  |_)  | |  | |  |\   | |  '--'  |
 *  \______|| _|      | _|      |______/  |__| |__| \__| |_______/
 * 
 * This file is generated by cppbind on 05/12/2022-10:26.
 * Please do not change it manually.
 */

#ifndef CPPBIND_BASE_OBJECT_HPP
#define CPPBIND_BASE_OBJECT_HPP

#include <memory>
#include <string>

namespace cppbind {

/**
 * comments
 *
 * __API__
 * action: gen_class
 * package: extra
 * shared_ref: True
 */
class Object {
public:
    virtual ~Object() = default;

    /**
     * String representation for mainly debug purposes
     * @return class name and object address
     * __API__
     * python.action: gen_method
     * throws: no_throw
     * python.name: __repr__
     */
    virtual std::string toDebugString() const;

    /**
     * String representation for user readability
     * @return result of toReprString by default
     * __API__
     * action: gen_method
     * throws: no_throw
     * python.name: __str__
     */
    virtual std::string toString() const;

    /**
     * Human readable class name
     * @return class name
     * __API__
     * action: gen_method
     * throws: no_throw
     */
    virtual std::string className() const;

    /**
     * Compare on equality two objects
     * @param other is the second one
     * @return is equals two objects
     * __API__
     * action: gen_method
     * throws: no_throw
     * python.name: __eq__
     */
    bool equals(std::shared_ptr<Object> other) const;

    virtual bool equals(const Object* other) const;

    /**
     * Hash for object. Used in wrappers (java, obj-c, python) to define the hash function
     * @return hash of the object
     * __API__
     * action: gen_method
     * throws: no_throw
     * python.name: __hash__
     */
    virtual std::size_t hash() const;

    /**
     * Detailed string representation only for debug porpoises
     * @return object state as string
     * __API__
     * action: gen_method
     * throws: no_throw
     */
    virtual std::string debugInfo() const;

    /**
     * The object's size in bytes
     * @return bytes count
     * __API__
     * action: gen_method
     * throws: no_throw
     */
    virtual size_t bytesCount() const;

};

} // namespace cppbind

#endif // CPPBIND_BASE_OBJECT_HPP
