# Copyright (c) 2022 PicsArt, Inc.
# All rights reserved. Use of this source code is governed by a
# MIT-style license that can be found in the LICENSE file.

utils: |
  {%- macro get_overloading_postfix(vars) -%}
  {%-   if cxx.is_overloaded -%}
  {%-     if vars.overloading_postfix is not none -%}
            {{vars.overloading_postfix}}
  {%-     elif overloading_index and overloading_index > 0 -%}
            {{overloading_index|string}}
  {%-     endif -%}
  {%-   endif -%}
  {%- endmacro -%}
  {%- macro get_ancestors_with_api(cxx, ancestors) -%}
  {#-   returns a list of all ancestors accessible via api -#}
  {%-   for base in cxx.base_types -%}
  {%-     set type_info = get_type_info(base, error=False) -%}
  {#-     if base has api append and recursively get its ancestors otherwise skip the base type -#}
  {%-     if type_info and type_info.has_api -%}
  {%-       do ancestors.append(base) -%}
  {%-       do get_ancestors_with_api(base, ancestors) -%}
  {%-   endif -%}
  {%-     endfor -%}
  {%- endmacro -%}
  {%- macro gen_override_keyword(cxx, vars, exclude_interface=false) -%}
  {%-   if cxx.kind_name == 'method' -%}
  {%-     if vars.is_overridden is not none -%}
  {%-       if vars.is_overridden -%}
              {{'override '}}
  {%-       endif -%}
  {%-     else -%}
  {%-       set overridden_parent_infos = cxx.overridden_elements|select('has_api')|type_info(attribute='parent.type', error=False)|reject('none') -%}
  {%-       set ancestors = [] -%}
  {%-       do get_ancestors_with_api(cxx.parent.type, ancestors) -%}
  {%-       set ancestors = ancestors|map(attribute='type_name')|list -%}
  {%-       for parent_info in overridden_parent_infos -%}
  {%-         if exclude_interface -%}
  {%-           if parent_info.has_api and parent_info.vars.action != 'gen_interface' and parent_info.cxx.type_name in ancestors -%}
                  {{'override '}}
  {%-             break -%}
  {%-           endif -%}
  {%-         else -%}
  {%-           if parent_info.has_api and parent_info.cxx.type_name in ancestors -%}
                  {{'override '}}
  {%-             break -%}
  {%-           endif -%}
  {%-         endif -%}
  {%-       endfor -%}
  {%-     endif -%}
  {%-   endif -%}
  {%- endmacro -%}
  

converters: |
  {%- macro object_to_shared_ref(name, target_name, nullable, cxx, converter_name) -%}
  {%-   set pointee = cxx.resolved_type.unqualified_type_name -%}
  {%-   set shared_ptr_conv = get_type_converter('std::shared_ptr<{}>'.format(pointee)) -%}
  {%-   if cxx.is_lval_reference or cxx.is_pointer -%}
  {%-     set access_op = '->' if cxx.is_pointer else '.' -%}
  {%-     set directly_inherited_from_shared_this = cppbind_helper.is_inherited_from_enable_shared_from_this(cxx, True) -%}
  {%-     if directly_inherited_from_shared_this or cppbind_helper.is_inherited_from_enable_shared_from_this(cxx) -%}
  std::shared_ptr<{{pointee}}> {{name}}_shared_ptr{{' = '}}
  {%-       if directly_inherited_from_shared_this -%}
  {{name}}{{access_op}}shared_from_this();
  {%-       else -%}
  {%-         set static_or_dynamic_pointer_cast = 'dynamic_pointer_cast' if cxx.is_polymorphic else 'static_pointer_cast' -%}
  std::{{static_or_dynamic_pointer_cast}}<{{pointee}}>({{name}}{{access_op}}shared_from_this());
  {%-       endif -%}
  {{(shared_ptr_conv|attr(converter_name)).snippet(name + '_shared_ptr', target_name=target_name, nullable=nullable)}}
  {%-     else -%}
  {%-       do Error.critical("It's not allowed to return a reference or a pointer of the types which are marked with shared_ref=True and are not inherited from std::enabled_shared_from_this: " + pointee) -%}
  {%-     endif -%}
  {%-   else %}
  std::shared_ptr<{{pointee}}> {{name}}_shared_ptr = std::make_shared<{{pointee}}>({{name}});
  {{(shared_ptr_conv|attr(converter_name)).snippet(name + '_shared_ptr', target_name=target_name, nullable=nullable)}}
  {%-   endif %}
  {%- endmacro -%}


templates: |
  {%- macro get_template_postfix(cxx) -%}
  {%-   for kind in cxx.template_arguments -%}
  {%-     if cxx.template_arguments[loop.index - 1].kind == ElementKind.TEMPLATE_TYPE_PARAMETER -%}
  {%-       set converter = get_type_converter(cxx.template_arguments[loop.index - 1].value, error=False) -%}
  {%-       if converter -%}
              {{converter.custom.tname}}
  {%-       else -%}
              {{cxx.template_arguments[loop.index - 1].value.type_name|replace('::', '_')|to_camel_case}}
  {%-       endif -%}
  {%-     else -%}
            {{cxx.template_arguments[loop.index - 1].value}}
  {%-     endif -%}
  {%-   endfor -%}
  {%- endmacro -%}
  {%- macro get_template_getter_name(cxx, template_args_postfixes) -%}
  {%-   if cxx.template_arguments -%}
  {%-     for template_arg_name in template_args_postfixes -%}
  {%-       if template_arg_name is not none -%}
            {{template_arg_name}}
  {%-       else -%}
  {%-         if cxx.template_arguments[loop.index - 1].kind == ElementKind.TEMPLATE_TYPE_PARAMETER -%}
  {%-           set converter = get_type_converter(cxx.template_arguments[loop.index - 1].value, error=False) -%}
  {%-           if converter -%}
                  {{converter.custom.tname}}
  {%-           else -%}
                  {{cxx.template_arguments[loop.index - 1].value.type_name|replace('::', '_')|to_camel_case}}
  {%-           endif -%}
  {%-         else -%}
                {{cxx.template_arguments[loop.index - 1].value}}
  {%-         endif -%}
  {%-       endif -%}
  {%-     endfor -%}
  {%-   endif -%}
  {%- endmacro -%}
  {%- macro gen_template_args_snippets(arg_types, section_name, full_package=none) -%}
  {%-   for arg_type in arg_types -%}
  {%-     set arg_converter = get_type_converter(arg_type)|attr(section_name) -%}
  {%-     if arg_converter is defined -%}
            {{arg_converter.snippet(full_package=full_package)}}
  {%-     endif -%}
  {%-   endfor -%}
  {%- endmacro -%}
  {%- macro gen_template_instantiation(cxx, template_choice) -%}
  {%-   set comma = joiner(', ') -%}
  <
  {%-   for arg in cxx.template_arguments -%}
  {{comma()}}{{arg.value.type_name if arg.kind == ElementKind.TEMPLATE_TYPE_PARAMETER else arg.value}}
  {%-   endfor -%}
  >
  {%- endmacro -%}

includes:
  cxx: |
    {%- macro gen_include(converter) -%}
    {%-   if converter and converter.cxx_include is defined -%}
            {{marker}}{{converter.cxx_include.snippet()}}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_includes(converter, includes) -%}
    {%-   if converter.cxx_include is defined -%}
    {%-     do includes.append(converter.cxx_include.snippet()) -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_includes(converter, desc_includes) -%}
    {%-   if converter.type_info.has_api -%}
    {%-     set vars_descendants = converter.type_info.vars.descendants -%}
    {%-     for descendant in (vars_descendants if vars_descendants is not none else converter.type_info.descendants) -%}
    {%-       do collect_includes(get_type_converter(descendant), desc_includes) -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
  target_language: |
    {%- macro collect_import_converters(converter, import_converters, gen_for_impl=false) -%}
    {%-   set parent_converter = get_type_converter(converter.type_info.cxx.parent_type, error=False) if converter.type_info.cxx.parent_type else none -%}
    {%-   if parent_converter -%}
    {#-     in case of nested cases we don't need `gen_for_impl` anymore, so we don't pass it deeper -#}
    {%-     do collect_import_converters(parent_converter, import_converters) -%}
    {%-   else -%}
    {%-     do import_converters.append((converter, gen_for_impl)) -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_import_converters(converter, desc_import_converters) -%}
    {%-   if converter.type_info.has_api and converter.type_info.vars.descendants is defined -%}
    {%-     for descendant in (converter.type_info.vars.descendants if converter.type_info.vars.descendants is not none else converter.type_info.descendants) -%}
    {%-       do collect_import_converters(get_type_converter(descendant), desc_import_converters, gen_for_impl=true) -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro gen_import_by_lang(converter, language) -%}
    {%-   set lang_include = converter|attr(language + '_include') -%}
    {%-   if lang_include is defined -%}
            {{marker}}{{lang_include.snippet(full_package=vars.full_package)}}
    {%-   endif -%}
    {%- endmacro -%}

global_declarations:
  class: |
    {%- macro collect_include_converters(converter, include_converters) -%}
    {%-   if converter -%}
    {%-     if converter.type_info.has_api -%}
    {%-       do include_converters.append(converter) -%}
    {%-     endif -%}
    {%-     for arg in converter.template_args -%}
    {%-       if converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_include_converters(get_type_converter(arg, error=False), include_converters) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_include_converters(desc_converter, desc_include_converters) -%}
    {%-   if desc_converter -%}
    {%-     if desc_converter.type_info.has_api -%}
    {%-       set vars_descendants = desc_converter.type_info.vars.descendants -%}
    {%-       for descendant in (vars_descendants if vars_descendants is not none else desc_converter.type_info.descendants) -%}
    {%-         do collect_include_converters(get_type_converter(descendant), desc_include_converters) -%}
    {%-       endfor -%}
    {%-     endif -%}
    {%-     for arg in desc_converter.template_args -%}
    {%-       if desc_converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_desc_include_converters(get_type_converter(arg, error=False), desc_include_converters) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro gen_glob_decl() -%}
    {%-   set desc_include_converters = [] -%}
    {%-   do collect_desc_include_converters(get_type_converter(cxx.type), desc_include_converters) -%}
    {%-   for desc_converter in desc_include_converters -%}
    {%-     if desc_converter.type_info.vars.c_file_fullname != vars.c_file_fullname -%}
              {{marker}}{{'extern const char* ' + desc_converter.cxx_type_name_global.snippet() + ';'}}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
  method: |
    {%- macro collect_type_converters(converter, result_type_converters) -%}
    {%-   if converter and converter.type_info.has_api -%}
    {%-     do result_type_converters.append(converter) -%}
    {%-   endif -%}
    {%-   if converter -%}
    {%-     for arg in converter.template_args -%}
    {%-       if converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         set arg_converter = get_type_converter(arg, error=False) -%}
    {%-         if arg_converter -%}
    {%-           do collect_type_converters(arg_converter, result_type_converters) -%}
    {%-         endif -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro _gen_glob_decl(type_converters) -%}
    {%-   for type_conv in type_converters -%}
    {#-   `cxx_type_name_global` is not defined for enum types -#}
    {%-     if type_conv.cxx_type_name_global is defined and type_conv.type_info.vars.c_file_fullname != vars.c_file_fullname -%}
              {{marker}}{{'extern const char* ' + type_conv.cxx_type_name_global.snippet() + ';'}}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_glob_decl() -%}
    {#-   `result_type` is none for constructors -#}
    {%-   if cxx.result_type -%}
    {%-     set result_type_converters = [] -%}
    {%-     do collect_type_converters(get_type_converter(cxx.result_type), result_type_converters) -%}
            {{_gen_glob_decl(result_type_converters)}}
    {%-   endif -%}
    {#-   `vars.throws` is not defiend for property getters/setters -#}
    {%-   if vars.throws is defined and not 'no_throw' in vars.throws -%}
            {{_gen_glob_decl(vars.throws|type_converter)}}
    {%-   endif -%}
    {%-   if setter is defined and not 'no_throw' in setter.vars.throws -%}
            {{_gen_glob_decl(setter.vars.throws|type_converter)}}
    {%-   endif -%}
            {{_gen_glob_decl([get_type_converter('std::exception')])}}
    {%- endmacro -%}

forward_declarations:
  method: |
    {%- macro collect_fwd_decl_converters(converter, fwd_decl_converters) -%}
    {#-   Type comparison is done when the type has descendants. Forward decl is not needed when the object recover function is generated in the same file as current function/method. -#}
    {%-   if converter.type_info.has_api and converter.type_info.vars.descendants is defined and (converter.type_info.vars.descendants if converter.type_info.vars.descendants is not none else converter.type_info.descendants) and vars.c_file_fullname != converter.type_info.vars.c_file_fullname -%}
    {%-     do fwd_decl_converters.append(converter) -%}
    {%-   endif -%}
    {%-   for arg in converter.template_args -%}
    {%-     if converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-       set arg_converter = get_type_converter(arg, error=False) -%}
    {%-       if arg_converter -%}
    {%-         do collect_fwd_decl_converters(arg_converter, fwd_decl_converters) -%}
    {%-       endif -%}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_fwd_decl() -%}
    {%-   set fwd_decl_converters = [] -%}
    {%-   for arg in cxx.args -%}
    {%-     do collect_fwd_decl_converters(get_type_converter(arg.type), fwd_decl_converters) -%}
    {%-   endfor -%}
    {%-   for fwd_decl_converter in fwd_decl_converters -%}
    {%-     set converter = get_type_converter('std::shared_ptr<' + fwd_decl_converter.type_info.cxx.type_name + '>') if fwd_decl_converter.type_info.vars.shared_ref else fwd_decl_converter -%}
            {{marker}}{{converter.cxx_obj_recover_func_decl.snippet(is_fwd_decl=True)}};
    {%-   endfor -%}
    {%- endmacro -%}
  getter: |
    {%- macro collect_fwd_decl_converters(converter, fwd_decl_converters) -%}
    {#-   Type comparison is done when the type has descendants. Forward decl is not needed when the object recover function is generated in the same file as current getter/setter. -#}
    {%-   if converter.type_info.has_api and converter.type_info.vars.descendants is defined and (converter.type_info.vars.descendants if converter.type_info.vars.descendants is not none else converter.type_info.descendants) and vars.c_file_fullname != converter.type_info.vars.c_file_fullname -%}
    {%-     do fwd_decl_converters.append(converter) -%}
    {%-   endif -%}
    {%-   for arg in converter.template_args -%}
    {%-     if converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-       set arg_converter = get_type_converter(arg, error=False) -%}
    {%-       if arg_converter -%}
    {%-         do collect_fwd_decl_converters(arg_converter, fwd_decl_converters) -%}
    {%-       endif -%}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_fwd_decl() -%}
    {%-   set fwd_decl_converters = [] -%}
    {%-   if setter is defined -%}
    {%-     do collect_fwd_decl_converters(get_type_converter(cxx.result_type), fwd_decl_converters) -%}
    {%-   endif -%}
    {%-   for fwd_decl_converter in fwd_decl_converters -%}
    {%-     set converter = get_type_converter('std::shared_ptr<' + fwd_decl_converter.type_info.cxx.type_name + '>') if fwd_decl_converter.type_info.vars.shared_ref else fwd_decl_converter -%}
            {{marker}}{{converter.cxx_obj_recover_func_decl.snippet(is_fwd_decl=True)}};
    {%-   endfor -%}
    {%- endmacro -%}
