# Copyright (c) 2022 PicsArt, Inc.
# All rights reserved. Use of this source code is governed by a
# MIT-style license that can be found in the LICENSE file.

utils: |
  {%- macro get_overloading_postfix(vars) -%}
  {%-   if cxx.is_overloaded -%}
  {%-     if vars.overloading_postfix is not none -%}
            {{vars.overloading_postfix}}
  {%-     elif overloading_index and overloading_index > 0 -%}
            {{overloading_index|string}}
  {%-     endif -%}
  {%-   endif -%}
  {%- endmacro -%}
  {%- macro gen_override_keyword(cxx, exclude_interface=false) -%}
  {%-   if cxx.kind_name == 'method' -%}
  {%-     set overridden_parent_infos = cxx.overridden_elements|map(attribute='parent.type')|map_callback(get_type_info, error=False)|reject('none') -%}
  {%-     set ancestors = owner_class.cxx.ancestors|map_callback(get_type_info, error=False)|reject('none')|map(attribute='cxx.type_name') -%}
  {%-     for parent_info in overridden_parent_infos -%}
  {%-       if exclude_interface -%}
  {%-         if parent_info.has_api and parent_info.vars.action != 'gen_interface' and parent_info.cxx.type_name in ancestors -%}
                {{'override '}}
  {%-           break -%}
  {%-         endif -%}
  {%-       else -%}
  {%-         if parent_info.has_api and parent_info.cxx.type_name in ancestors -%}
                {{'override '}}
  {%-           break -%}
  {%-         endif -%}
  {%-       endif -%}
  {%-     endfor -%}
  {%-   endif -%}
  {%- endmacro -%}


templates: |
  {%- macro get_template_postfix_by_lang(language) -%}
  {%-   if cxx.is_template and template_choice -%}
  {%-     for value in template_choice.values() -%}
  {%-       if value is string -%}
              {{make_type_converter(value)|attr(language)|attr('custom')|attr('tname')}}
  {%-       else -%}
              {{value}}
  {%-       endif -%}
  {%-     endfor -%}
  {%-   endif -%}
  {%- endmacro -%}
  {%- macro get_template_getter_name_by_lang(language) -%}
  {%-   if cxx.is_template and template_choice -%}
  {%-     set values = template_choice.values()|list -%}
  {%-     for template_arg_name in template_args_postfixes -%}
  {%-       if template_arg_name is not none -%}
            {{template_arg_name}}
  {%-       else -%}
  {%-         if template_arg_name is string -%}
                {{make_type_converter(value)|attr(language)|attr('custom')|attr('tname')}}
  {%-         else -%}
                {{values[loop.index]}}
  {%-         endif -%}
  {%-       endif -%}
  {%-     endfor -%}
  {%-   endif -%}
  {%- endmacro -%}


includes:
  cxx: |
    {%- macro gen_include_by_lang(converter, language) -%}
    {%-   if converter -%}
    {%-     if converter.cxx_include -%}
              {{marker}}{{converter.cxx_include.snippet()}}
    {%-     endif -%}
    {%-     if converter|attr(language) -%}
    {%-       for arg in converter|attr(language)|attr('template_args') -%}
    {%-         if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
                  {{gen_include_by_lang(make_type_converter(arg, error=False), language)}}
    {%-         endif -%}
    {%-       endfor -%}
    {%-     endif -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_includes_by_lang(converter, includes, language) -%}
    {%-   if converter -%}
    {%-     if converter.cxx_include -%}
    {%-       do includes.append(converter.cxx_include.snippet()) -%}
    {%-     endif -%}
    {%-     for arg in converter|attr(language)|attr('template_args') -%}
    {%-       if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_includes_by_lang(make_type_converter(arg, error=False), includes, language) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_includes_by_lang(converter, desc_includes, language) -%}
    {%-   if converter -%}
    {%-     if converter|attr(language)|attr('has_api') -%}
    {%-       set vars_descendants = converter|attr(language)|attr('vars')|attr('descendants') -%}
    {%-       for descendant in (vars_descendants if vars_descendants is not none else converter|attr(language)|attr('descendants')) -%}
    {%-         do collect_includes_by_lang(make_type_converter(descendant), desc_includes, language) -%}
    {%-       endfor -%}
    {%-     endif -%}
    {%-     for arg in converter|attr(language)|attr('template_args') -%}
    {%-       if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_desc_includes_by_lang(make_type_converter(arg, error=False), desc_includes, language) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
  target_language: |
    {%- macro collect_import_converters_by_lang(converter, import_converters, language, gen_for_impl=false) -%}
    {%-   if converter -%} {# converter is None for non type template parameters #}
    {%-     set lang_converter = converter|attr(language) -%}
    {%-     set parent_converter = make_type_converter(lang_converter.cxx.parent_type, error=False) if lang_converter.cxx.parent_type else none -%}
    {%-     if parent_converter -%}
    {#-       in case of nested cases we don't need `gen_for_impl` anymore, so we don't pass it deeper -#}
    {%-       do collect_import_converters(parent_converter, import_converters) -%}
    {%-     else -%}
    {%-       do import_converters.append((converter, gen_for_impl)) -%}
    {%-     endif -%}
    {%-     for arg in lang_converter.template_args -%}
    {%-       if lang_converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_import_converters(make_type_converter(arg, error=False), import_converters, gen_for_impl) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_import_converters_by_lang(converter, desc_import_converters, language) -%}
    {%-   if converter -%} {# converter is None for non type template parameters #}
    {%-     set lang_converter = converter|attr(language) -%}
    {%-     if lang_converter.has_api and lang_converter.vars.descendants is defined -%}
    {%-       for descendant in (lang_converter.vars.descendants if lang_converter.vars.descendants is not none else lang_converter.descendants) -%}
    {%-         do collect_import_converters(make_type_converter(descendant), desc_import_converters, gen_for_impl=true) -%}
    {%-       endfor -%}
    {%-     endif -%}
    {%-     for arg in lang_converter.template_args -%}
    {%-       if lang_converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_desc_import_converters(make_type_converter(arg, error=False), desc_import_converters) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro gen_import_by_lang(converter, language) -%}
    {%-   if converter -%} {# converter is None for non type template parameters #}
    {%-     set lang_converter = converter|attr(language) -%}
    {%-     set lang_include = converter|attr(language + '_include') -%}
    {%-     set parent_converter = make_type_converter(lang_converter.cxx.parent_type, error=False) if lang_converter.cxx.parent_type else none -%}
    {%-     if parent_converter -%}
              {{gen_import(parent_converter)}}
    {%-     elif lang_include -%}
              {{marker}}{{lang_include.snippet(full_package=vars.full_package)}}
    {%-     endif -%}
    {%-     for arg in lang_converter.template_args -%}
    {%-       if lang_converter.template_args_kinds[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
                {{gen_import(make_type_converter(arg, error=False))}}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}

global_declarations:
  class: |
    {%- macro collect_include_converters_by_lang(converter, include_converters, language) -%}
    {%-   if converter -%}
    {%-     if converter|attr(language)|attr('has_api') -%}
    {%-       do include_converters.append(converter) -%}
    {%-     endif -%}
    {%-     for arg in converter|attr(language)|attr('template_args') -%}
    {%-       if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_include_converters_by_lang(make_type_converter(arg, error=False), include_converters, language) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro collect_desc_include_converters_by_lang(desc_converter, desc_include_converters, language) -%}
    {%-   if desc_converter -%}
    {%-     if desc_converter|attr(language)|attr('has_api') -%}
    {%-       set vars_descendants = desc_converter|attr(language)|attr('vars')|attr('descendants') -%}
    {%-       for descendant in (vars_descendants if vars_descendants is not none else desc_converter|attr(language)|attr('descendants')) -%}
    {%-         do collect_include_converters_by_lang(make_type_converter(descendant), desc_include_converters, language) -%}
    {%-       endfor -%}
    {%-     endif -%}
    {%-     for arg in desc_converter|attr(language)|attr('template_args') -%}
    {%-       if (desc_converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         do collect_desc_include_converters_by_lang(make_type_converter(arg, error=False), desc_include_converters, language) -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro gen_glob_decl_by_lang(language) -%}
    {%-   set desc_include_converters = [] -%}
    {%-   do collect_desc_include_converters_by_lang(make_type_converter(cxx.type), desc_include_converters, language) -%}
    {%-   for desc_converter in desc_include_converters -%}
    {%-     if desc_converter|attr(language)|attr('vars')|attr('c_file_fullname') != vars.c_file_fullname -%}
              {{marker}}{{'extern const char* ' + desc_converter.cxx_type_name_global.snippet() + ';'}}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
  method: |
    {%- macro collect_type_converters_by_lang(converter, result_type_converters, language) -%}
    {%-   if converter and converter|attr(language)|attr('has_api') -%}
    {%-     do result_type_converters.append(converter) -%}
    {%-   endif -%}
    {%-   if converter -%}
    {%-     for arg in converter|attr(language)|attr('template_args') -%}
    {%-       if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-         set arg_converter = make_type_converter(arg, error=False) -%}
    {%-         if arg_converter -%}
    {%-           do collect_type_converters_by_lang(arg_converter, result_type_converters, language) -%}
    {%-         endif -%}
    {%-       endif -%}
    {%-     endfor -%}
    {%-   endif -%}
    {%- endmacro -%}
    {%- macro _gen_glob_decl_by_lang(type_converters, language) -%}
    {%-   for type_conv in type_converters -%}
    {#-   `cxx_type_name_global` is none for enum types -#}
    {%-     if type_conv.cxx_type_name_global is not none and type_conv|attr(language)|attr('vars')|attr('c_file_fullname') != vars.c_file_fullname -%}
              {{marker}}{{'extern const char* ' + type_conv.cxx_type_name_global.snippet() + ';'}}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_glob_decl_by_lang(language) -%}
    {#-   `result_type` is none for constructors -#}
    {%-   if cxx.result_type -%}
    {%-     set result_type_converters = [] -%}
    {%-     do collect_type_converters_by_lang(make_type_converter(cxx.result_type), result_type_converters, language) -%}
            {{_gen_glob_decl_by_lang(result_type_converters, language)}}
    {%-   endif -%}
    {#-   `vars.throws` is not defiend for property getters/setters -#}
    {%-   if vars.throws is defined and not 'no_throw' in vars.throws -%}
            {{_gen_glob_decl_by_lang(vars.throws|map_callback(make_type_converter), language)}}
    {%-   endif -%}
    {%-   if setter is defined and not 'no_throw' in setter.vars.throws -%}
            {{_gen_glob_decl_by_lang(setter.vars.throws|map_callback(make_type_converter), language)}}
    {%-   endif -%}
            {{_gen_glob_decl_by_lang([make_type_converter('std::exception')], language)}}
    {%- endmacro -%}

forward_declarations:
  method: |
    {%- macro collect_fwd_decl_converters_by_lang(converter, fwd_decl_converters, language) -%}
    {#-   Type comparison is done when the type has descendants. Forward decl is not needed when the object recover function is generated in the same file as current function/method. -#}
    {%-   if converter|attr(language)|attr('has_api') and converter|attr(language)|attr('vars')|attr('descendants') is defined and (converter|attr(language)|attr('vars')|attr('descendants') if converter|attr(language)|attr('vars')|attr('descendants') is not none else converter|attr(language)|attr('descendants')) and vars.c_file_fullname != converter|attr(language)|attr('vars')|attr('c_file_fullname') -%}
    {%-     do fwd_decl_converters.append(converter) -%}
    {%-   endif -%}
    {%-   for arg in converter|attr(language)|attr('template_args') -%}
    {%-     if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-       set arg_converter = make_type_converter(arg, error=False) -%}
    {%-       if arg_converter -%}
    {%-         do collect_fwd_decl_converters_by_lang(arg_converter, fwd_decl_converters, language) -%}
    {%-       endif -%}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_fwd_decl_by_lang(language) -%}
    {%-   set fwd_decl_converters = [] -%}
    {%-   for arg in cxx.args -%}
    {%-     do collect_fwd_decl_converters_by_lang(make_type_converter(arg.type), fwd_decl_converters, language) -%}
    {%-   endfor -%}
    {%-   for fwd_decl_converter in fwd_decl_converters -%}
    {%-     set converter = make_type_converter('std::shared_ptr<' + fwd_decl_converter|attr(language)|attr('cxx')|attr('type_name') + '>') if fwd_decl_converter|attr(language)|attr('vars')|attr('shared_ref') else fwd_decl_converter -%}
            {{marker}}{{converter.cxx_obj_recover_func_decl.snippet(is_fwd_decl=True)}};
    {%-   endfor -%}
    {%- endmacro -%}
  getter: |
    {%- macro collect_fwd_decl_converters_by_lang(converter, fwd_decl_converters, language) -%}
    {#-   Type comparison is done when the type has descendants. Forward decl is not needed when the object recover function is generated in the same file as current getter/setter. -#}
    {%-   if converter|attr(language)|attr('has_api') and converter|attr(language)|attr('vars')|attr('descendants') is defined and (converter|attr(language)|attr('vars')|attr('descendants') if converter|attr(language)|attr('vars')|attr('descendants') is not none else converter|attr(language)|attr('descendants')) and vars.c_file_fullname != converter|attr(language)|attr('vars')|attr('c_file_fullname') -%}
    {%-     do fwd_decl_converters.append(converter) -%}
    {%-   endif -%}
    {%-   for arg in converter|attr(language)|attr('template_args') -%}
    {%-     if (converter|attr(language)|attr('template_args_kinds'))[loop.index - 1] != ElementKind.TEMPLATE_NON_TYPE_PARAMETER -%}
    {%-       set arg_converter = make_type_converter(arg, error=False) -%}
    {%-       if arg_converter -%}
    {%-         do collect_fwd_decl_converters_by_lang(arg_converter, fwd_decl_converters, language) -%}
    {%-       endif -%}
    {%-     endif -%}
    {%-   endfor -%}
    {%- endmacro -%}
    {%- macro gen_fwd_decl_by_lang(language) -%}
    {%-   set fwd_decl_converters = [] -%}
    {%-   if setter is defined -%}
    {%-     do collect_fwd_decl_converters_by_lang(make_type_converter(cxx.result_type), fwd_decl_converters, language) -%}
    {%-   endif -%}
    {%-   for fwd_decl_converter in fwd_decl_converters -%}
    {%-     set converter = make_type_converter('std::shared_ptr<' + fwd_decl_converter|attr(language)|attr('cxx')|attr('type_name') + '>') if fwd_decl_converter|attr(language)|attr('vars')|attr('shared_ref') else fwd_decl_converter -%}
            {{marker}}{{converter.cxx_obj_recover_func_decl.snippet(is_fwd_decl=True)}};
    {%-   endfor -%}
    {%- endmacro -%}
