# Copyright (c) 2022 PicsArt, Inc.
# All rights reserved. Use of this source code is governed by a
# MIT-style license that can be found in the LICENSE file.

std::string:
  std::__cxx11::basic_string

std::basic_string<char>:
  std::__cxx11::basic_string

std::__1::pair:
  std::pair

std::__1::shared_ptr:
  std::shared_ptr

std::__1::vector:
  std::vector

std::__1::map:
  std::map

std::__1::unordered_map:
  std::map

std::__1::basic_string:
  std::__cxx11::basic_string

$Object:
  custom:
    is_c_pointer_type: False
    tpostfix: |
      {#- this is an internal section no need to define in user defined custom converters -#}
      {%- for name in template_args_postfixes or [] -%}
      {%- if name != None %}{{name}}{% else %}{{args_converters[loop.index - 1].swift.custom.tname}}{% endif -%}
      {%- endfor -%}
    namespace: |
      {#- this is an internal section no need to define in user defined custom converters -#}
      {%- if parent_type_info -%}
      {%- set converter = make_type_converter(parent_type_info.cxx.type_name) -%}
      {{converter.swift.target_type_name}}.
      {%- endif -%}
    tname: |
      {{vars.interface_name if vars.action == 'gen_interface' else vars.name}}{{custom.tpostfix}}
  types:
    swift: |
      {{custom.namespace if not definition|default(False)}}
      {%- if interface_class|default(False) -%}
      {{vars.interface_impl_class_name}}{{custom.tpostfix}}
      {%- else -%}
      {{custom.tname}}
      {%- endif -%}
    c: "CppBindCObject"
    sc: "CppBindCObject"
  converters:
    c_to_cxx: |
      {%- set pointee = cxx.unqualified_resolved_type_name -%}
      {%- set descendants = vars.descendants if vars.descendants is not none else descendants -%}
      {%- set cxx_namespace = cxx.namespace.split('::')|map('capitalize')|join -%}
      {%- if vars.shared_ref -%}
      {%- set is_nullable = nullable|default(False) -%}
      {%- set shared_ptr_conv = make_type_converter('std::shared_ptr<{}>'.format(pointee)) -%}
      {{shared_ptr_conv.c_to_cxx.snippet(name, target_name=target_name + '_shared_ptr', nullable=is_nullable)}}
      auto{{'&' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}} {{target_name}} = {{'*' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}}{{target_name}}_shared_ptr.get();
      {%- elif descendants %}
      {%- set result_target_name = target_name + ('' if cxx_is_pointer or cxx.canonical_type.is_pointer else '_ptr') %}
      {{pointee}}* {{result_target_name}} = recover_obj_from_{{cxx_namespace + "_" if cxx_namespace}}{{make_type_converter(pointee).swift.target_type_name|replace('.', '_')}}({{name}});
      {%- if not (cxx_is_pointer or cxx.canonical_type.is_pointer) %}
      auto& {{target_name}} = *{{result_target_name}};
      {%- endif %}
      {%- else %}
      auto{{'&' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}} {{target_name}} = {{'*' if not (cxx_is_pointer or cxx.canonical_type.is_pointer)}}static_cast<{{pointee}}*>({{name}}.ptr);
      {%- endif %}
    cxx_to_c: |
      {%- if value_policy is not defined -%}
      {%- do Error.critical('Return value policy is not provided for type: ' + cxx.type_name) -%}
      {%- endif -%}
      {%- set pointee = cxx.unqualified_resolved_type_name -%}
      {%- set is_nullable = nullable|default(False) -%}
      {%- set descendants = vars.descendants if vars.descendants is not none else descendants -%}
      {%- set this_converter = make_type_converter(cxx.unqualified_canonical_type_name) -%}
      {%- if vars.shared_ref -%}
      {%- if not cxx.is_value_type -%}
      {%- do Error.critical('shared_ref variable is set for ' + pointee + '. In this case cppbind supports object return only by value or wrapped into shared_ptr') -%}
      {%- else %}
      std::shared_ptr<{{pointee}}> {{name}}_shared_ptr = std::make_shared<{{pointee}}>({{name}});
      {%- set shared_ptr_conv = make_type_converter('std::shared_ptr<{}>'.format(pointee)) -%}
      {{shared_ptr_conv.cxx_to_c.snippet(name + '_shared_ptr', target_name=target_name, nullable=is_nullable)}}
      {%- endif %}
      {%- else %}
      char* type_{{name}} = {{'strdup({})'.format(this_converter.cxx_type_name_global.snippet()) if not (cxx.is_polymorphic and descendants) else 'nullptr'}};
      {%- if cxx.is_polymorphic and descendants %}
      {%- macro demangle() -%}
      const char * name_{{name}} = typeid({{'*' if cxx_is_pointer or cxx.canonical_type.is_pointer}}{{name}}).name();
      int status = 0;
      char* demangled_{{name}} = abi::__cxa_demangle(name_{{name}}, NULL, NULL, &status);
      if (status == 0) {
          type_{{name}} = demangled_{{name}};
      } else {
          type_{{name}} = strdup({{this_converter.cxx_type_name_global.snippet()}});
      }
      {%- endmacro %}
      {%- if is_nullable %}
      if ({{name}}) {
          {{demangle()|indent(4)}}
      } else {
          type_{{name}} = strdup({{this_converter.cxx_type_name_global.snippet()}});
      }
      {%- else %}
      {{demangle()}}
      {%- endif %}
      {%- endif %}
      {%- macro apply_rv_policy() -%}
      const_cast<{{pointee}}*>(
      {%- if cxx_is_pointer or cxx.canonical_type.is_pointer -%}
      {%- if value_policy == 'copy' -%} new {{pointee}}(*{{name}})
      {%- elif value_policy == 'move' -%} new {{pointee}}(std::move(*{{name}}))
      {%- elif value_policy in ('automatic_reference', 'reference', 'reference_internal', 'automatic', 'take_ownership') -%} {{name}}
      {%- endif -%}
      {%- elif cxx_is_lval_reference -%}
      {%- if value_policy in ('copy', 'automatic', 'automatic_reference') -%} new {{pointee}}({{name}})
      {%- elif value_policy == 'move' -%} new {{pointee}}(std::move({{name}}))
      {%- elif value_policy in ('reference', 'take_ownership', 'reference_internal') -%} &{{name}}
      {%- endif -%}
      {%- else -%} new {{pointee}}({{name}}){# copy for return by value and rvalue ref update after changing const auto& #}
      {%- endif -%})
      {%- endmacro %}
      auto value_ptr_{{name}} = {{apply_rv_policy()}};
      {{target_type_name}} {{target_name}} = {type_{{name}}, {{'dynamic_cast<void*>(value_ptr_{})'.format(name) if cxx.is_polymorphic else 'value_ptr_' + name}}};
      {%- endif %}
    swift_to_sc: |
      {%- if nullable|default(False) -%}
      let {{target_name}} = {{name}}?.cself ?? CppBindCObject(type: nil, ptr: nil){# when the swift object is null we pass CppBindCObject with nulls to not deallocate the type name in c#}
      {%- else -%}
      let {{target_name}} = {{name}}.cself
      {%- endif -%}
    sc_to_swift: |
      {%- if value_policy is not defined -%}
      {%- do Error.critical('Return value policy is not provided for type: ' + cxx.type_name) -%}
      {%- endif -%}
      {%- set lvalue_owner_swift = cxx_is_lval_reference and value_policy in ('take_ownership', 'automatic', 'automatic_reference', 'copy', 'move') -%}
      {%- set pointer_owner_swift = (cxx_is_pointer or cxx.canonical_type.is_pointer) and value_policy in ('copy', 'move', 'automatic', 'take_ownership') -%}
      {%- set owner = ', true' if  cxx_is_value_type or cxx_is_rval_reference or lvalue_owner_swift or pointer_owner_swift else '' -%}
      {%- set type_name = get_target_type_name(interface_class=vars.action == 'gen_interface') -%}
      {%- set descendants = vars.descendants if vars.descendants is not none else descendants -%}
      var {{target_name}}: {{target_type_name}}{{'? = nil' if nullable|default(False)}}
      {%- if cxx.is_polymorphic and descendants %}
      {%- if nullable|default(False) %}
      if ({{name}}.ptr != nil) {
        {{target_name}} = {{type_name}}.cppbindConstructObject({{name}}{{owner}})
      }
      {%- else %}
      {{target_name}} = {{type_name}}.cppbindConstructObject({{name}}{{owner}})
      {%- endif %}
      {%- else %}
      {%- if nullable|default(False) %}
      if ({{name}}.ptr != nil) {
        {{target_name}} = {{type_name}}({{name}}{{owner}})
      }
      {%- else %}
      {{target_name}} = {{type_name}}({{name}}{{owner}})
      {%- endif %}
      {%- endif %}
    cxx_obj_recover: |
      {%- set converter = make_type_converter(cxx.unqualified_canonical_type_name) -%}
      {%- set descendants = vars.descendants if vars.descendants is not none else descendants -%}
      if ({{name}}.ptr) {
          if (strcmp({{name}}.type, {{converter.cxx_type_name_global.snippet()}}) == 0)
              return static_cast<{{cxx.unqualified_resolved_type_name}}*>({{name}}.ptr);
          {%- for descendant in descendants %}
          else if (strcmp({{name}}.type, {{make_type_converter(descendant).cxx_type_name_global.snippet()}}) == 0)
              return static_cast<{{descendant}}*>({{name}}.ptr);
          {%- endfor %}
          else {
              std::cerr << "Unexpected object type: " << {{name}}.type << std::endl;
              exit(1);
          }
      }
      return nullptr;
    cxx_type_name_global: |
      {%- set cxx_namespace = cxx.namespace|replace('::', '_') -%}
      {{'CPPBIND_' + ((cxx_namespace + '_' if cxx_namespace else '') + make_type_converter(cxx.unqualified_resolved_type_name).swift.target_type_name|replace('.', '_'))|upper}}
    swift_obj_construction: |
      {%- set descendants = vars.descendants if vars.descendants is not none else descendants -%}
      let typeName = String(cString: {{name}}.type)
      switch(typeName) {
      {%- for descendant in descendants %}
      {%- set converter = make_type_converter(descendant).swift %}
      {%- set type_name = converter.get_target_type_name(interface_class=converter.vars.action == 'gen_interface') %}
      case({{type_name}}.cppbindCxxTypeName):
        return {{type_name}}({{name}}, owner)
      {%- endfor %}
      default:
        {%- set type_name = custom.namespace + vars.interface_impl_class_name if vars.action == 'gen_interface' else vars.name %}
        return {{type_name + custom.tpostfix}}({{name}}, owner)
      }
    cxx_obj_recover_func_decl: |
      {%- set cxx_namespace = cxx.namespace.split('::')|map('capitalize')|join -%}
      {{cxx.unqualified_resolved_type_name}}* recover_obj_from_{{cxx_namespace + "_" if cxx_namespace}}{{make_type_converter(cxx.unqualified_resolved_type_name).swift.target_type_name|replace('.', '_')}}(CppBindCObject{{' ' + name if not is_fwd_decl|default(False)}})
    swift_ref_internal: |
      {%- if not nullable -%}
      {{name}}.keepCppBindReference({{reference}})
      {%- else -%}
      if {{name}} != nil {
        {{name}}!.keepCppBindReference({{reference}})
      }
      {%- endif -%}
    swift_keep_alive: |
      {{name}}.keepCppBindReference({{reference}})
    cxx_include: |
      {% if vars.is_proj_type %}#include "{{vars.prj_rel_file_name}}"{% endif %}

$Enum:
  custom:
    is_c_pointer_type: False
    tname: "{{vars.name}}"
  types:
    swift: "{{custom.tname}}"
    c: int
    sc: CInt
  converters:
    c_to_cxx: |
      auto {{target_name}} = static_cast<{{cxx.unqualified_resolved_type_name}}>({{name}});
    cxx_to_c: |
      {{target_type_name}} {{target_name}} = static_cast<{{target_type_name}}>({{name}});
    swift_to_sc: |
      let {{target_name}} = {{name}}.rawValue
    sc_to_swift: |
      guard let {{target_name}} = {{target_type_name}}(rawValue: {{name}}) else {
         {{"ExceptionHandler.handleUncaughtException(
            \"Internal error: unresolved reference to non existing field of " + target_type_name + " enum.\")"}}
      }
    cxx_include: |
      {% if vars.is_proj_type %}#include "{{vars.prj_rel_file_name}}"{% endif %}

std::__cxx11::basic_string:
  custom:
    is_c_pointer_type: True
    tname: String
  types:
    swift: String
    c: char*
    sc: UnsafeMutablePointer<CChar>
  converters:
    c_to_cxx: |
      auto {{target_name}} = std::string({{name}});
      free({{name}});
    cxx_to_c: |
      auto {{target_name}} = strdup({{name}}.data());
    swift_to_sc: |
      let {{target_name}} = strdup({{name}})!
    sc_to_swift: |
      let {{target_name}} = String(cString: {{name}})
      defer {
        {{name}}.deallocate()
      }

std::string_view:
  custom:
    is_c_pointer_type: True
    tname: String
  types:
    swift: String
    c: char*
    sc: UnsafeMutablePointer<CChar>
  converters:
    c_to_cxx: |
      {{make_type_converter('std::string').c_to_cxx.snippet(name)}}
    cxx_to_c: |
      {{make_type_converter('std::string').cxx_to_c.snippet(name)}}
    swift_to_sc: |
      {{make_type_converter('std::string').swift_to_sc.snippet(name)}}
    sc_to_swift: |
      {{make_type_converter('std::string').sc_to_swift.snippet(name)}}

const char *:
  custom:
    is_c_pointer_type: True
    tname: String
  types:
    swift: String
    c: const char *
    sc: UnsafePointer<CChar>?
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc: |
      let {{target_name}} = {{name}}{{'?' if nullable|default(False)}}.cString(using: String.Encoding.utf8){{'!' if not nullable|default(False)}}
    sc_to_swift: |
      {%- if nullable|default(False) -%}
      let {{target_name}} = {{name}} != nil ? String(cString: {{name}}!) : nil
      {%- else -%}
      let {{target_name}} = String(cString: {{name}})
      {%- endif -%}

std::vector:
  custom:
    is_c_pointer_type: False
    tname: "Array{{args_converters[0].swift.custom.tname}}"
  types:
    swift: "Array<{{args[0].target_type_name}}>"
    c: "CppBindCDataArray"
    sc: "CppBindCDataArray"
  converters:
    c_to_cxx: |
      {{cxx.unqualified_resolved_type_name}} {{target_name}};

      auto data_{{name}} = reinterpret_cast<{{args_converters[0].c.target_type_name}}*>({{name}}.data);

      for (size_t _i_{{name}} = 0; _i_{{name}} < {{name}}.size; ++_i_{{name}}) {
          auto& value_{{name}} = data_{{name}}[_i_{{name}}];
          {{args[0].snippet('value_{}'.format(name))|indent(4)}}
          {{target_name}}.emplace_back({{args[0].converted_name('value_{}'.format(name))}});
      }
    cxx_to_c: |
      auto _data_{{target_name}} = new {{args_converters[0].c.target_type_name}} [{{name}}.size()];
      {{target_type_name}} {{target_name}} = { _data_{{target_name}}, static_cast<long long>({{name}}.size()) };
      for (int _i_{{name}} = 0; _i_{{name}} < {{name}}.size(); ++_i_{{name}}) {
          auto& value_{{name}} = {{name}}[_i_{{name}}];
          {{args[0].snippet('value_{}'.format(name), value_policy=value_policy)|indent(4)}}
          _data_{{target_name}}[_i_{{name}}] = {{args[0].converted_name('value_{}'.format(name))}};
      }
    swift_to_sc: |
      let _{{target_name}}Data = UnsafeMutablePointer<{{args_converters[0].sc.target_type_name}}>.allocate(capacity: {{name}}.count)
      var {{target_name}} = {{target_type_name}}()
      {{target_name}}.data = UnsafeMutableRawPointer(_{{target_name}}Data)
      {{target_name}}.size = Int64({{name}}.count)
      for i in 0..<{{name}}.count {
        let {{name}}Val = {{name}}[i]
        {{args[0].snippet('{}Val'.format(name))|indent(2)}}
        _{{target_name}}Data[i] = {{args[0].converted_name('{}Val'.format(name))|to_camel_case}}
      }
    sc_to_swift: |
      let _{{name}}Buffer = UnsafeBufferPointer<{{args_converters[0].sc.target_type_name}}>(
        start: {{name}}.data.assumingMemoryBound(to: {{args_converters[0].sc.target_type_name}}.self),
        count: Int({{name}}.size))
      var {{target_name}}: [{{args[0].target_type_name}}] = []
      defer {
        _{{name}}Buffer.deallocate()
      }
      for i in 0..<Int({{name}}.size) {
        let {{name}}Value = _{{name}}Buffer[i]
        {{args[0].snippet('{}Value'.format(name), value_policy=value_policy)|indent(2)}}
        {{target_name}}.append({{args[0].converted_name('{}Value'.format(name))|to_camel_case}})
      }
    sc_cleanup:
      source: swift
      target: sc
      snippet: |
        {%- if args[0] %}
        {%- set cleanup_code_fragment = args[0].snippet('{}Item'.format(name)) %}
        {%- if cleanup_code_fragment %}
        let {{name}}Data = {{name}}.data.assumingMemoryBound(to: {{args_converters[0].sc.target_type_name}}.self)
        for i in 0..<Int({{name}}.size) {
          let {{name}}Item = {{name}}Data[i]
          {{cleanup_code_fragment|indent(2)}}
        }
        {%- endif %}
        {%- endif %}
        {{name}}.data.deallocate()
    swift_ref_internal: |
      {%- if args_converters[0].swift_ref_internal -%}
      for value{{name}} in {{name}} {
        {{args_converters[0].swift_ref_internal.snippet('value' + name, reference=reference, nullable=nullable)|indent(2)}}
      }
      {%- endif -%}
    swift_keep_alive: |
      {{name}}.keepCppBindReference({{reference}})

std::map:
  custom:
    is_c_pointer_type: False
    tname: "Dictionary{{args_converters[0].swift.custom.tname}}{{args_converters[1].swift.custom.tname}}"
  types:
    swift: "Dictionary<{{args[0].target_type_name}}, {{args[1].target_type_name}}>"
    c: "CppBindCDataMap"
    sc: "CppBindCDataMap"
  converters:
    c_to_cxx: |
      {{cxx.unqualified_resolved_type_name}} {{target_name}};

      for (size_t _i_{{name}} = 0; _i_{{name}} < {{name}}.size; ++_i_{{name}}) {
          auto ktmp_{{name}} = reinterpret_cast<{{args_converters[0].c.target_type_name}}*>({{name}}.keys)[_i_{{name}}];
          auto vtmp_{{name}} = reinterpret_cast<{{args_converters[1].c.target_type_name}}*>({{name}}.values)[_i_{{name}}];
          {{args[0].snippet('ktmp_{}'.format(name))|indent(4)}}
          {{args[1].snippet('vtmp_{}'.format(name))|indent(4)}}
          {{target_name}}.insert({ {{args[0].converted_name('ktmp_{}'.format(name))}}, {{args[1].converted_name('vtmp_{}'.format(name))}} });
      }
    cxx_to_c: |
      auto _k_data_{{target_name}} = new {{args_converters[0].c.target_type_name}} [{{name}}.size()];
      auto _v_data_{{target_name}} = new {{args_converters[1].c.target_type_name}} [{{name}}.size()];
      {{target_type_name}} {{target_name}} = { _k_data_{{target_name}}, _v_data_{{target_name}}, static_cast<long long>({{name}}.size()) };
      size_t _i_{{name}} = 0;
      for (auto& value_{{name}} : {{name}}) {
          const auto& key_{{name}} = value_{{name}}.first;
          const auto& val_{{name}} = value_{{name}}.second;
          {
              {{args[0].snippet('key_{}'.format(name), value_policy=value_policy)|indent(8)}}
              {{args[1].snippet('val_{}'.format(name), value_policy=value_policy)|indent(8)}}
              _k_data_{{target_name}}[_i_{{name}}] = {{args[0].converted_name('key_{}'.format(name))}};
              _v_data_{{target_name}}[_i_{{name}}] = {{args[1].converted_name('val_{}'.format(name))}};
              _i_{{name}} += 1;
          }
      }
    swift_to_sc: |
      let _{{target_name}}Key = UnsafeMutablePointer<{{args_converters[0].sc.target_type_name}}>.allocate(
        capacity: {{name}}.count)
      let _{{target_name}}Val = UnsafeMutablePointer<{{args_converters[1].sc.target_type_name}}>.allocate(
        capacity: {{name}}.count)
      var {{target_name}} = {{target_type_name}}()
      {{target_name}}.keys = UnsafeMutableRawPointer(_{{target_name}}Key)
      {{target_name}}.values = UnsafeMutableRawPointer(_{{target_name}}Val)
      {{target_name}}.size = Int64({{name}}.count)
      var {{name}}Idx = 0
      for ({{name}}Key, {{name}}Val) in {{name}} {
        {{args[0].snippet('{}Key'.format(name))|indent(2)}}
        {{args[1].snippet('{}Val'.format(name))|indent(2)}}
        _{{target_name}}Key[{{name}}Idx] = {{args[0].converted_name('{}Key'.format(name))|to_camel_case}}
        _{{target_name}}Val[{{name}}Idx] = {{args[1].converted_name('{}Val'.format(name))|to_camel_case}}
        {{name}}Idx += 1
      }
    sc_to_swift: |
      let {{name}}BufferKey = UnsafeBufferPointer<{{args_converters[0].sc.target_type_name}}>(
        start: {{name}}.keys.assumingMemoryBound(to: {{args_converters[0].sc.target_type_name}}.self),
        count: Int({{name}}.size))
      let {{name}}BufferVal = UnsafeBufferPointer<{{args_converters[1].sc.target_type_name}}>(
        start: {{name}}.values.assumingMemoryBound(to: {{args_converters[1].sc.target_type_name}}.self),
        count: Int({{name}}.size))
      var {{target_name}}: [{{args_converters[0].swift.target_type_name}}:{{args_converters[1].swift.target_type_name}}] = [:]
      defer {
        {{name}}BufferKey.deallocate()
        {{name}}BufferVal.deallocate()
      }
      for {{name}}Idx in 0..<Int({{name}}.size) {
        let {{name}}Key = {{name}}BufferKey[{{name}}Idx]
        let {{name}}Val = {{name}}BufferVal[{{name}}Idx]
        do {
          {{args[0].snippet('{}Key'.format(name), value_policy=value_policy)|indent(4)}}
          {{args[1].snippet('{}Val'.format(name), value_policy=value_policy)|indent(4)}}
          {{target_name}}[{{args[0].converted_name('{}Key'.format(name))|to_camel_case}}] = {{args[1].converted_name('{}Val'.format(name))|to_camel_case}}
        }
      }
    sc_cleanup:
      source: swift
      target: sc
      snippet: |
        {%- if args[1] %}
        {%- set cleanup_code_fragment = args[1].snippet('{}Item'.format(name)) %}
        {%- if cleanup_code_fragment %}
        let {{name}}Data = {{name}}.values.assumingMemoryBound(to: {{args_converters[1].sc.target_type_name}}.self)
        for i in 0..<Int({{name}}.size) {
          let {{name}}Item = {{name}}Data[i]
          {{cleanup_code_fragment|indent(2)}}
        }
        {%- endif %}
        {%- endif %}
        {{name}}.keys.deallocate()
        {{name}}.values.deallocate()
    swift_ref_internal: |
      {%- set arg0 = args_converters[0].swift_ref_internal %}
      {%- set arg1 = args_converters[1].swift_ref_internal %}
      {%- if arg0 or arg1 -%}
      for ({{'key' + name if arg0 else '_'}}, {{'value' + name if arg1 else '_'}}) in {{name}} {
        {%- if arg0 %}
        {{arg0.snippet('key' + name, reference=reference, nullable=nullable)|indent(2)}}
        {%- endif %}
        {%- if arg1 %}
        {{arg1.snippet('value' + name, reference=reference, nullable=nullable)|indent(2)}}
        {%- endif %}
      }
      {%- endif -%}
    swift_keep_alive: |
      {{name}}.keepCppBindReference({{reference}})

std::unordered_map:
  std::map

std::shared_ptr:
  custom:
    is_c_pointer_type: False
    tname: "{{args_converters[0].swift.custom.tname}}"
  types:
    swift: "{{args[0].target_type_name}}"
    c: "{{args[0].target_type_name}}"
    sc: "{{args[0].target_type_name}}"
  converters:
    c_to_cxx: |
      {%- if args[0].vars and not args[0].vars.shared_ref -%}
      {%- do Error.critical(args[0].cxx.unqualified_resolved_type_name + ' has an invalid value for shared_ref variable.') -%}
      {%- endif -%}
      {%- set pointee_unqualified = args[0].cxx.unqualified_resolved_type_name %}
      {%- set pointee = args[0].target_type_name %}
      {%- set args0_descendants = args[0].vars.descendants if args[0].vars.descendants is not none else args[0].descendants %}
      {%- set cxx_namespace = args[0].cxx.namespace.split('::')|map('capitalize')|join %}
      {%- set is_nullable = nullable|default(False) %}
      {%- macro gen_cast_block() -%}
      {%- if args0_descendants -%}
      {{target_name}} = recover_obj_from_{{cxx_namespace + "_" if cxx_namespace}}{{make_type_converter(pointee).swift.target_type_name|replace('.', '_')}}({{name}});
      {%- else -%}
      {{target_name}} = *static_cast<std::shared_ptr<{{pointee}}>*>({{name}}.ptr);
      {%- endif -%}
      {%- endmacro %}
      std::shared_ptr<{{pointee}}> {{target_name}}{{' = nullptr' if is_nullable}};
      {%- if is_nullable %}
      if ({{name}}.ptr) {
          {{gen_cast_block()|indent(4)}}
      }
      {%- else %}
      {{gen_cast_block()}}
      {%- endif %}
    cxx_to_c: |
      {%- if args[0].vars and not args[0].vars.shared_ref -%}
      {%- do Error.critical(args[0].cxx.unqualified_resolved_type_name + ' has an invalid value for shared_ref variable.') -%}
      {%- endif -%}
      {%- set pointee_unqualified = args[0].cxx.unqualified_resolved_type_name %}
      {%- set pointee = args[0].cxx.type_name %}
      {%- set is_nullable = nullable|default(False) %}
      {%- set args0_descendants = args[0].vars.descendants if args[0].vars.descendants is not none else args[0].descendants -%}
      {%- set args0_converter = make_type_converter(args[0].cxx.unqualified_canonical_type_name) -%}
      {%- if args[0].cxx.is_polymorphic and not args0_descendants %}
      char* type_{{name}} = strdup({{args0_converter.cxx_type_name_global.snippet()}});
      {%- else %}
      char* type_{{name}} = nullptr;
      {%- endif %}
      {%- macro demangle() %}
      auto& arg_pointee_{{name}} = *{{name}}.get();
      const char * name_{{name}} = typeid({{'*' if cxx_is_pointer or cxx.canonical_type.is_pointer}}arg_pointee_{{name}}).name();
      int status = 0;
      char* demangled_{{name}} = abi::__cxa_demangle(name_{{name}}, NULL, NULL, &status);
      if (status == 0) {
          type_{{name}} = demangled_{{name}};
      } else {
          type_{{name}} = strdup({{args0_converter.cxx_type_name_global.snippet()}});
      }
      {%- endmacro %}
      void* {{target_name}}_ptr = nullptr;
      {%- if is_nullable %}
      if ({{name}}) {
          {%- if args[0].cxx.is_polymorphic and args0_descendants %}
          {{demangle()|indent(4)}}
          {%- endif %}
          {%- if args[0].cxx.is_polymorphic %}
          {{target_name}}_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<{{pointee_unqualified}}>({{name}})));
          {%- else %}
          {{target_name}}_ptr = new std::shared_ptr<{{pointee}}>(std::const_pointer_cast<{{pointee_unqualified}}>({{name}}));
          {%- endif %}
      } else {
          type_{{name}} = strdup("{{args[0].cxx.unqualified_canonical_type_name}}");
      }
      {%- else %}
      {%- if args[0].cxx.is_polymorphic and args0_descendants %}
      {{demangle()}}
      {%- endif %}
      {%- if args[0].cxx.is_polymorphic %}
      {{target_name}}_ptr = new std::shared_ptr<void>(std::dynamic_pointer_cast<void>(std::const_pointer_cast<{{pointee_unqualified}}>({{name}})));
      {%- else %}
      {{target_name}}_ptr = new std::shared_ptr<{{pointee}}>(std::const_pointer_cast<{{pointee_unqualified}}>({{name}}));
      {%- endif %}
      {%- endif %}
      {{target_type_name}} {{target_name}} = {type_{{name}}, {{target_name}}_ptr};
    swift_to_sc: |
      {{args[0].snippet(name, nullable=nullable|default(False))}}
    sc_to_swift: |
      {{args[0].snippet(name, nullable=nullable|default(False), value_policy='take_ownership')}}
    # for shared pointers we always use take_ownership
    # although for now take_ownership is not working as expected as we do not have object caching yet
    cxx_obj_recover: |
      {%- set converter = make_type_converter(args[0].cxx.unqualified_canonical_type_name) -%}
      {%- set descendants = args[0].vars.descendants if args[0].vars.descendants is not none else args[0].descendants -%}
      if ({{name}}.ptr) {
          if (strcmp({{name}}.type, {{converter.cxx_type_name_global.snippet()}}) == 0)
              return *static_cast<std::shared_ptr<{{args[0].cxx.unqualified_resolved_type_name}}>*>({{name}}.ptr);
          {%- for descendant in descendants %}
          else if (strcmp({{name}}.type, {{make_type_converter(descendant).cxx_type_name_global.snippet()}}) == 0)
              return *static_cast<std::shared_ptr<{{descendant}}>*>({{name}}.ptr);
          {%- endfor %}
          else {
              std::cerr << "Unexpected object type: " << {{name}}.type << std::endl;
              exit(1);
          }
      }
      return nullptr;
    cxx_obj_recover_func_decl: |
      {%- set cxx_namespace = args[0].cxx.namespace.split('::')|map('capitalize')|join -%}
      {{'std::shared_ptr<{}>'.format(args[0].cxx.unqualified_resolved_type_name)}} recover_obj_from_{{cxx_namespace + "_" if cxx_namespace}}{{make_type_converter(args[0].cxx.unqualified_resolved_type_name).swift.target_type_name|replace('.', '_')}}(CppBindCObject{{' ' + name if not is_fwd_decl|default(False)}})

std::pair:
  custom:
    is_c_pointer_type: False
    tname: "Pair{{args_converters[0].swift.custom.tname}}{{args_converters[1].swift.custom.tname}}"
  types:
    swift: "({{args[0].target_type_name}}, {{args[1].target_type_name}})"
    c: "CppBindCDataPair"
    sc: "CppBindCDataPair"
  converters:
    c_to_cxx: |
      auto& first_tmp_{{name}} = *reinterpret_cast<{{args_converters[0].c.target_type_name}}*>({{name}}.first);
      auto& second_tmp_{{name}} = *reinterpret_cast<{{args_converters[1].c.target_type_name}}*>({{name}}.second);
      {{args[0].snippet('first_tmp_{}'.format(name))}}
      {{args[1].snippet('second_tmp_{}'.format(name))}}
      {{cxx.unqualified_resolved_type_name}} {{target_name}} { {{args[0].converted_name('first_tmp_{}'.format(name))}}, {{args[1].converted_name('second_tmp_{}'.format(name))}} };
    cxx_to_c: |
      auto _first_data_{{target_name}} = new {{args_converters[0].c.target_type_name}};
      auto _second_data_{{target_name}} = new {{args_converters[1].c.target_type_name}};
      const auto& first_{{name}} = {{name}}.first;
      const auto& second_{{name}} = {{name}}.second;
      {{args[0].snippet('first_{}'.format(name), value_policy=value_policy)}}
      {{args[1].snippet('second_{}'.format(name), value_policy=value_policy)}}
      *_first_data_{{target_name}} = {{args[0].converted_name('first_{}'.format(name))}};
      *_second_data_{{target_name}} = {{args[1].converted_name('second_{}'.format(name))}};
      {{target_type_name}} {{target_name}} = { _first_data_{{target_name}}, _second_data_{{target_name}} };
    swift_to_sc: |
      let _{{target_name}}First = UnsafeMutablePointer<{{args_converters[0].sc.target_type_name}}>.allocate(capacity: 1)
      let _{{target_name}}Second = UnsafeMutablePointer<{{args_converters[1].sc.target_type_name}}>.allocate(capacity: 1)
      var {{target_name}} = {{target_type_name}}()
      {{target_name}}.first = UnsafeMutableRawPointer(_{{target_name}}First)
      {{target_name}}.second = UnsafeMutableRawPointer(_{{target_name}}Second)
      let {{name}}First = {{name}}.0
      let {{name}}Second = {{name}}.1
      {{args[0].snippet('{}First'.format(name))}}
      {{args[1].snippet('{}Second'.format(name))}}
      _{{target_name}}First[0] = {{args[0].converted_name('{}First'.format(name))|to_camel_case}}
      _{{target_name}}Second[0] = {{args[1].converted_name('{}Second'.format(name))|to_camel_case}}
    sc_to_swift: |
      let _{{name}}FirstData = UnsafeBufferPointer<{{args_converters[0].sc.target_type_name}}>(
        start: {{name}}.first.assumingMemoryBound(to: {{args_converters[0].sc.target_type_name}}.self),
        count: 1)
      let _{{name}}SecondData = UnsafeBufferPointer<{{args_converters[1].sc.target_type_name}}>(
        start: {{name}}.second.assumingMemoryBound(to: {{args_converters[1].sc.target_type_name}}.self),
        count: 1)
      defer {
        _{{name}}FirstData.deallocate()
        _{{name}}SecondData.deallocate()
      }
      let {{name}}First = _{{name}}FirstData[0]
      let {{name}}Second = _{{name}}SecondData[0]
      {{args[0].snippet('{}First'.format(name), value_policy=value_policy)}}
      {{args[1].snippet('{}Second'.format(name), value_policy=value_policy)}}
      let {{target_name}}: ({{args_converters[0].swift.target_type_name}}, {{args_converters[1].swift.target_type_name}}) = ({{args[0].converted_name('{}First'.format(name))|to_camel_case}}, {{args[1].converted_name('{}Second'.format(name))|to_camel_case}})
    sc_cleanup:
      source: swift
      target: sc
      snippet: |
        {%- if args[0] %}
        {%- set args0_cleanup_code_fragment = args[0].snippet('{}FirstItem'.format(name)) %}
        {%- if args0_cleanup_code_fragment %}
        let {{name}}FirstItem = {{name}}.first.assumingMemoryBound(to: {{args_converters[0].sc.target_type_name}}.self)[0]
        {{args0_cleanup_code_fragment}}
        {%- endif %}
        {%- endif %}
        {%- if args[1] %}
        {%- set args1_cleanup_code_fragment = args[1].snippet('{}SecondItem'.format(name)) %}
        {%- if args1_cleanup_code_fragment %}
        let {{name}}SecondItem = {{name}}.second.assumingMemoryBound(to: {{args_converters[1].sc.target_type_name}}.self)[0]
        {{args1_cleanup_code_fragment}}
        {%- endif %}
        {%- endif %}
        {{name}}.first.deallocate()
        {{name}}.second.deallocate()
    swift_ref_internal: |
      {%- if args_converters[0].swift_ref_internal %}
      {{args_converters[0].swift_ref_internal.snippet(name + '.first', reference=reference, nullable=nullable)|indent(2)}}
      {%- endif %}
      {%- if args_converters[1].swift_ref_internal %}
      {{args_converters[1].swift_ref_internal.snippet(name + '.second', reference=reference, nullable=nullable)|indent(2)}}
      {%- endif %}
    swift_keep_alive: |
      {{name}}.keepCppBindReference({{reference}})

# dummy converters to not throw error on container types converter build
# currently, these are not used
std::hash:
  custom:
    is_c_pointer_type:
    tname:
  types:
    swift: Dummy
    c: Dummy
    sc: Dummy
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc:
    sc_to_swift:

std::equal_to:
  custom:
    is_c_pointer_type:
    tname:
  types:
    swift: Dummy
    c: Dummy
    sc: Dummy
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc:
    sc_to_swift:

std::allocator:
  custom:
    is_c_pointer_type:
    tname:
  types:
    swift: Dummy
    c: Dummy
    sc: Dummy
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc:
    sc_to_swift:

std::less:
  custom:
    is_c_pointer_type:
    tname:
  types:
    swift: Dummy
    c: Dummy
    sc: Dummy
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc:
    sc_to_swift:

std::char_traits<char>:
  custom:
    is_c_pointer_type:
    tname:
  types:
    swift: Dummy
    c: Dummy
    sc: Dummy
  converters:
    c_to_cxx:
    cxx_to_c:
    swift_to_sc:
    sc_to_swift:

std::__1::hash:
  std::hash

std::__1::equal_to:
  std::equal_to

std::__1::allocator:
  std::allocator

std::__1::less:
  std::less

std::__1::char_traits<char>:
  std::char_traits<char>
