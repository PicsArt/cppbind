exception_handling: |   
  {%- macro gen_exception_handling_code() -%}
  if cppbindErr.type != nil {
    let errorType = String(cString: cppbindErr.type!)
    switch errorType {
    {%-   if 'no_throw' not in vars.throws %}
    {%-     for exc_type in vars.throws %}
    case ("{{exc_type}}"):
      {%-     set exc_info = get_type_info(exc_type) %}
      throw {{exc_info.vars.name}}(cppbindErr, true)
    {%-     endfor %}
    {%-   endif %}
    {%-   if not 'std::exception' in vars.throws %}
    case ("std::exception"):
    {%-     set exc_info = get_type_info("std::exception") %}
      let excObj = {{exc_info.vars.name}}(cppbindErr, true)
      ExceptionHandler.handleUncaughtException(excObj.what())
    {%-   endif %}
    default:
      cppbindErr.type.deallocate()
      ExceptionHandler.handleUncaughtException("Uncaught Exception")
    }
  }
  {%- endmacro -%}

validations: |
  {%- macro run_method_validations() -%}
  {%-   set is_special_function = vars.name in (vars.hash_method, vars.equals_method, vars.tostring_method) %}
  {%-   if is_special_function and owner_class.vars.action == 'gen_interface' -%}
  {%-     do Error.critical("It is not allowed to define hash/equals/toString functions in interface: {}.{}.").format(owner_class.cxx.displayname, cxx.displayname) -%}
  {%-   endif -%}
  {%-   if cxx.is_static and vars.return_value_policy == 'reference_internal' -%}
  {% do Error.critical("Cannot apply reference internal policy on a static method's return value: {}::{}".format(owner_class.cxx.type_name, cxx.name)) -%}
  {%-   endif -%}
  {%-   set incorrect_nullable_args = vars.nullable_arg|reject('in', cxx.args|map(attribute='name'))|list -%}
  {%-   if incorrect_nullable_args -%}
  {%-     do Error.critical("{} arguments are marked as nullable but {}.{} does not have such arguments.".format(', '.join(incorrect_nullable_args), owner_class.cxx.displayname, cxx.displayname)) -%}
  {%-   endif -%}
  {%- endmacro -%}

_special_function_decls: &_special_function_decls |
  {%- set hash_decl = 'func hash(into hasher: inout Hasher)' -%}
  {%- set tostring_decl = 'var description: String' -%}
  {%- set equals_decl = 'static func == (lhs: Self, rhs: Self) -> Bool' -%}

special_functions:
  declarations: *_special_function_decls
  method:
    !concat
    - *_special_function_decls
    - !include common_macros.yaml&utils
    - |
      {%- set owner_class_converter = make_type_converter(owner_class.cxx.type) -%}
      {%- set hash_decl = 'func hash(into hasher: inout Hasher)' -%}
      {%- set tostring_decl = 'var description: String' -%}
      {%- set equals_decl = 'static func == (lhs: Self, rhs: Self) -> Bool' -%}
      {%- set rconverter = make_type_converter(cxx.result_type) -%}
      {%- macro gen_hash_function() -%}
      {%-   set cxx_namespace = (owner_class.cxx.namespace.split('::')|map('capitalize')|join + '_') if owner_class.cxx.namespace else '' %}
      {%-   if vars.comment -%}
      {{vars.comment|make_doxygen_comment}}
      {%    endif -%}
      public {{gen_override_keyword(cxx, exclude_interface=true)}}{{hash_decl}} {
        var cppbindErr = CppBindCObject()
        let result = {{helper.get_c_func_name(cxx_namespace + owner_class_converter.swift.target_type_name, vars.name, '')}}(cself, &cppbindErr)
        {{gen_exception_handling_code()|indent(2)}}
        hasher.combine(result)
      }
      {%- endmacro -%}
      {%- macro gen_equals_function() -%}
      {%-   set cxx_namespace = (owner_class.cxx.namespace.split('::')|map('capitalize')|join + '_') if owner_class.cxx.namespace else '' %}
      {%-   set class_name = owner_class_converter.swift.get_target_type_name(definition=True) -%}
      {%-   if vars.comment -%}
      {{vars.comment|make_doxygen_comment}}
      {%    endif -%}
      public {{equals_decl|replace('Self', class_name)}} {
      {%-   set c_func = helper.get_c_func_name(cxx_namespace + owner_class_converter.swift.target_type_name, vars.name, '') %}
        var cppbindErr = CppBindCObject()
        let result = {{c_func}}(lhs.cself, rhs.cself, &cppbindErr)
        {{gen_exception_handling_code()|indent(2)}}
        return result
      }
      {%- endmacro -%}
      {%- macro gen_str_function() -%}
      {%-   set cxx_namespace = (owner_class.cxx.namespace.split('::')|map('capitalize')|join + '_') if owner_class.cxx.namespace else '' %}
      {%-   if vars.comment -%}
      {{vars.comment|make_doxygen_comment}}
      {%    endif -%}
      public {{gen_override_keyword(cxx, exclude_interface=true)}}{{tostring_decl}} {
      {%-   set c_func = helper.get_c_func_name(cxx_namespace + owner_class_converter.swift.target_type_name, vars.name, '') %}
        var cppbindErr = CppBindCObject()
        let result = {{c_func}}(cself, &cppbindErr)
        {{gen_exception_handling_code()|indent(2)}}
        {{rconverter.sc_to_swift.snippet('result')|indent(2)}}
        return {{rconverter.sc_to_swift.converted_name('result')}}
      }
      {%- endmacro -%}

templates:
    !concat
    - !include common_macros.yaml&templates
    - |
      {#- specializes common macros for swift -#}
      {%- macro get_template_postfix() -%}
      {{get_template_postfix_by_lang('swift')}}
      {%- endmacro -%}
      {%- macro get_template_getter_name() -%}
      {{get_template_getter_name_by_lang('swift')}}
      {%- endmacro -%}

includes:
  cxx:
    !concat
    - !include common_macros.yaml&includes.cxx
    - |
      {#- specializes common macros for swift -#}
      {%- macro gen_include(converter) -%}
            {{gen_include_by_lang(converter, 'swift')}}
      {%- endmacro -%}
      {%- macro collect_includes(converter, includes) -%}
            {{collect_includes_by_lang(converter, includes, 'swift')}}
      {%- endmacro -%}
      {%- macro collect_desc_includes(converter, desc_includes) -%}
            {{collect_desc_includes_by_lang(converter, desc_includes, 'swift')}}
      {%- endmacro -%}
  swift:
    !concat
    - !include common_macros.yaml&includes.target_language
    - |
      {#- specializes common macros for swift -#}
      {%- macro collect_import_converters(converter, import_converters, language, gen_for_impl=false) -%}
            {{collect_import_converters_by_lang(converter, import_converters, 'swift', gen_for_impl)}}
      {%- endmacro -%}
      {%- macro collect_desc_import_converters(converter, desc_import_converters) -%}
            {{collect_desc_import_converters_by_lang(converter, desc_import_converters, 'swift')}}
      {%- endmacro -%}
      {%- macro gen_import(converter) -%}
            {{gen_import_by_lang(converter, 'swift')}}
      {%- endmacro -%}

constructor:
    !concat
    - !include common_macros.yaml&templates
    - !include common_macros.yaml&utils
    - |
      {%- set owner_class_converter = make_type_converter(owner_class.cxx.type) -%}
      {%- set cxx_namespace = owner_class.cxx.namespace.split('::')|map('capitalize')|join %}
      {%- macro gen_constructor_c_name(target_overloading_index=none) -%}
      {%-   set target_type_name = owner_class_converter.swift.target_type_name -%}
      {%-   set is_constructor = cxx.kind_name in ('constructor',  'constructor_template') -%}
      {%-   set target_overloading_index = '_' + target_overloading_index|string if target_overloading_index else '' -%}
      {{'create' if is_constructor else 'func'}}_{{cxx_namespace + "_" if cxx_namespace}}{{target_type_name|replace('.',  '_')}}{{'_' + vars.name if not is_constructor}}{{get_overloading_postfix(vars)}}{{get_template_postfix_by_lang('swift')}}{{target_overloading_index}}
      {%- endmacro -%}

global_declarations:
  class:
    !concat
    - !include common_macros.yaml&global_declarations.class
    - |
      {%- macro gen_glob_decl() -%}
          {{gen_glob_decl_by_lang('swift')}}
      {%- endmacro -%}
  method:
    !concat
    - !include common_macros.yaml&global_declarations.method
    - |
      {%- macro gen_glob_decl() -%}
          {{gen_glob_decl_by_lang('swift')}}
      {%- endmacro -%}

forward_declarations:
  method:
    !concat
    - !include common_macros.yaml&forward_declarations.method
    - |
      {%- macro gen_fwd_decl() -%}
          {{gen_fwd_decl_by_lang('swift')}}
      {%- endmacro -%}
  getter:
    !concat
    - !include common_macros.yaml&forward_declarations.getter
    - |
      {%- macro gen_fwd_decl() -%}
          {{gen_fwd_decl_by_lang('swift')}}
      {%- endmacro -%}
