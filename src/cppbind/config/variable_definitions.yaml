# Copyright (c) 2022 PicsArt, Inc.
# All rights reserved. Use of this source code is governed by a
# MIT-style license that can be found in the LICENSE file.

action:
  inheritable: false
  default: null
  allowed_on: [ cxx, file_system ]
  options: [ gen_package, gen_enum, gen_class, gen_interface, gen_constructor, gen_method, gen_function, gen_getter, gen_property_getter, gen_property_setter, gen_setter ]

file:
  inheritable: true
  default: '{{_file_name}}'
  allowed_on: [ file, class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

package:
  inheritable: true
  default: 'undefined'
  allowed_on: [ file_system, class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

name:
  inheritable: false
  default: '{{cppbind_helper.get_operator_name(_object_name) if _is_operator|default(False) and "get_operator_name" in cppbind_helper.__dict__ else _object_name}}'
  allowed_on: [ cxx, file_system ]

argument_label:
  inheritable: false
  type: dict
  swift.default: { }
  allowed_on: [ cxx_function, cxx_method, cxx_constructor ]

argument_name:
  inheritable: false
  type: dict
  default: { }
  allowed_on: [ cxx_function, cxx_method, cxx_constructor ]

interface_name:
  inheritable: false
  kotlin.default: 'I{{name}}'
  swift.default: '{{name}}'
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template ]

interface_impl_class_name:
  inheritable: false
  default: '{{name}}Impl'
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template ]

include:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ file_system, class, class_template, class_template_partial_specialization, struct, struct_template, enum ]

code_fragment:
  inheritable: false
  default: null
  allowed_on: [ file_system, enum ]

header_code_fragment:
  inheritable: false
  default: null
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum ]

footer_code_fragment:
  inheritable: false
  default: null
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum ]

include_cxx:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

shared_ref:
  inheritable: true
  default: false
  type: bool
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template ]

template:
  inheritable: false
  type: dict
  allowed_on: [ class_template, class_template_partial_specialization, struct_template, function_template, method_template, constructor_template ]

template_instance:
  inheritable: false
  type: list
  allowed_on: [ class_template, class_template_partial_specialization, struct, struct_template, function_template, method_template, constructor_template ]

is_operator:
  inheritable: false
  default: '{{_is_operator}}'
  type: bool
  allowed_on: [ cxx_method ]

is_exception:
  inheritable: false
  default: false
  type: bool
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template ]

throws:
  inheritable: false
  type: list
  allowed_on: [ cxx_function, cxx_method, cxx_constructor ]
  required_on: [ cxx_function, cxx_method, cxx_constructor ]

bases_list:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum ]

nullable_return:
  inheritable: false
  default: false
  type: bool
  allowed_on: [ cxx_method, cxx_function, field ]

nullable_arg:
  inheritable: false
  default: [ ]
  type: list
  allowed_on: [ cxx_method, cxx_constructor, cxx_function ]

project_dir:
  inheritable: true
  default: '{{_current_working_dir}}'
  allowed_on: [ root, dir ]

project_link:
  inheritable: true
  default: '{{_get_git_repo_url(project_dir)}}'
  allowed_on: [ root, dir ]

comment_del_regex:
  inheritable: true
  type: list
  default:
    - '\s*\\internal([\s\S]*?)\\endinternal\s*'
    - '\s*\\internal[\s\S]*'
  allowed_on: [ cxx, file_system, root ]

banner_comment:
  inheritable: true
  default: |
    This file is generated by cppbind on {{_output_modification_time}}.
    Please do not change it manually.
  allowed_on: [ root ]

out_prj_dir:
  inheritable: true
  default: output
  allowed_on: [ cmd_line, dir ]

cxx_out_dir:
  inheritable: true
  default: '{{path.join(out_prj_dir, "cxx_out")}}'
  allowed_on: [ cmd_line ]

out_dir:
  inheritable: true
  kotlin.default: '{{path.join(out_prj_dir, "kotlin/source/main/java")}}'
  python.default: '{{path.join(out_prj_dir, "python/src")}}'
  swift.default: '{{path.join(out_prj_dir, "swift")}}'
  allowed_on: [ cmd_line ]

is_proj_type:
  inheritable: false
  default: '{{path.abspath(source_file_fullname).startswith(path.abspath(out_prj_dir) + path.sep)}}'
  allowed_on: [ cxx ]
  type: bool
  description: "Boolean showing whether the given type is user's type or is the type from standard/3pty lib"

enable_source_link_in_comment:
  inheritable: true
  default: false
  type: bool
  allowed_on: [ root, dir ]

comment:
  inheritable: false
  default: |
    {%- set regex = comment_del_regex|join('|') -%}
    {{_pure_comment|replace_regex(regex, '')}}
    {%- if enable_source_link_in_comment and source_file_fullname and path.isfile(source_file_fullname) and is_proj_type %}
    Documentation generated from: `{{path.relpath(source_file_fullname, project_dir)}}#L{{_line_number}}
    <{{project_link}}/{{path.relpath(source_file_fullname, project_dir)}}#L{{_line_number}}>`_
    {%- endif %}
  allowed_on: [ cxx ]

prj_rel_file_name:
  inheritable: false
  default: '{{path.relpath(source_file_fullname, out_prj_dir)}}'
  allowed_on: [ cxx ]

package_prefix:
  inheritable: true
  default: example_lib
  allowed_on: [ root, file_system, class, class_template, class_template_partial_specialization, struct, struct_template, enum ]

helpers_package_prefix:
  inheritable: true
  default: '{{package_prefix}}{{"." if package_prefix}}cppbind'
  allowed_on: [ root ]

helpers_out_dir:
  inheritable: true
  default: '{{path.abspath(path.join(out_dir, helpers_package_prefix|replace(".", path.sep)))}}'
  allowed_on: [ root ]

cxx_helpers_out_dir:
  inheritable: true
  default: '{{cxx_out_dir}}'
  allowed_on: [ root ]

exception_helpers_package:
  inheritable: true
  default: exceptions
  allowed_on: [ root ]

exception_file_name:
  inheritable: true
  default: std_exc_classes
  allowed_on: [ root ]

cxx_helpers_dir:
  inheritable: true
  kotlin.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/kotlin/cxx"))}}'
  python.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/python/cxx"))}}'
  swift.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/swift/cxx"))}}'
  allowed_on: [ root ]

helpers_dir:
  inheritable: true
  kotlin.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/kotlin"))}}'
  python.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/python"))}}'
  swift.default: '{{path.abspath(path.join(_cppbind_extras_dir, "std_helpers/swift"))}}'
  allowed_on: [ root ]

overloading_postfix:
  inheritable: false
  default: null
  allowed_on: [ cxx_function, cxx_method, cxx_constructor ]

file_postfix:
  inheritable: true
  default: ''
  allowed_on: [ root ]

pybind_module:
  inheritable: true
  python.default: "pybind_{{package_prefix}}"
  allowed_on: [ root ]

c_wrapper_lib_name:
  inheritable: true
  swift.default: CWrapper
  kotlin.default: wrapper_jni
  allowed_on: [ root, dir ]

target_arch:
  inheritable: false
  default: x86_64
  allowed_on: [ cmd_line ]
  description: "Variable for setting target architecture"

clang_args:
  inheritable: false
  default: [ ]
  allowed_on: [ root ]
  type: list

src_glob:
  inheritable: false
  default:
    - ./**/*.h*
  allowed_on: [ root ]
  type: list

src_exclude_glob:
  inheritable: false
  default:
    - "{{cxx_out_dir}}/**/*.h*"
  allowed_on: [ root ]
  type: list

include_dirs:
  inheritable: false
  default:
    - .
  allowed_on: [ root ]
  type: list

extra_headers:
  inheritable: false
  default: [ ]
  allowed_on: [ root ]
  type: list

enum_case_name_prefix:
  inheritable: false
  default: ''
  allowed_on: [ enum ]

enum_excluded_cases:
  inheritable: false
  default: [ ]
  allowed_on: [ enum ]
  type: list

enum_case_names:
  inheritable: false
  default: { }
  allowed_on: [ enum ]
  type: dict

cxx_helpers_out_rel_path:
  inheritable: true
  default: "{{path.relpath(cxx_helpers_out_dir, out_prj_dir)}}"
  allowed_on: [ root ]

full_package:
  inheritable: false
  python.default: "{{package_prefix + '.' if package_prefix}}{{package}}{{'.' + file + file_postfix if _object_kind != 'dir'}}"
  kotlin.default: "{{package_prefix + '.' if package_prefix}}{{package}}"
  swift.default: ""
  allowed_on: [ dir, cxx ]

c_file_fullname:
  inheritable: true
  kotlin.default: "{{cxx_out_dir + pat_sep + [full_package, 'jni_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  python.default: "{{cxx_out_dir + pat_sep + full_package|replace('.', pat_sep)}}_pybind.cpp"
  swift.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, 'c_swift_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

h_file_fullname:
  inheritable: true
  kotlin.default: "{{cxx_out_dir + pat_sep + [full_package, 'jni_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.h"
  python.default: "{{cxx_out_dir + pat_sep + full_package|replace('.', pat_sep)}}_pybind.h"
  swift.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, 'c_swift_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.h"
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

file_fullname:
  inheritable: true
  kotlin.default: "{{out_dir + pat_sep + [full_package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.kt"
  python.default: ""
  swift.default: "{{out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.swift"
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template, enum, cxx_function ]

pybind_module_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + '_module']|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ root ]

c_pybind_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ root ]

h_pybind_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + file_postfix]|map('replace', '.', pat_sep)|path_join}}.h"
  allowed_on: [ root ]

descendants:
  inheritable: false
  default: null
  type: list
  allowed_on: [ class, class_template, class_template_partial_specialization, struct, struct_template ]

return_value_policy:
  inheritable: false
  default: |
    {%- if action in ('gen_getter', 'gen_property_getter', 'gen_property_setter') -%}
    reference_internal
    {%- else -%}
    automatic
    {%- endif -%}
  options: [ 'copy', 'move', 'take_ownership', 'reference', 'reference_internal', 'automatic', 'automatic_reference' ]
  allowed_on: [ cxx_method, cxx_constructor, cxx_function, field ]

keep_alive:
  inheritable: false
  default: [ ]
  type: list
  allowed_on: [ cxx_method, cxx_constructor, field ]

is_c_wrapper_external:
  inheritable: true
  default: false
  type: bool
  allowed_on: [ root ]

hash_method:
  inheritable: true
  default: hash
  allowed_on: [ root ]

equals_method:
  inheritable: true
  default: equals
  allowed_on: [ root ]

tostring_method:
  inheritable: true
  default: toString
  allowed_on: [ root ]

is_overridden:
  inheritable: false
  default: null
  type: bool
  allowed_on: [ cxx_method ]