file:
  kotlin: 
    file_path: |
      {{[config.out_dir, config.package_prefix, package, file]|map('replace', '.', pat_sep)|path_join}}.kt
    scopes: 
      - body
      - include
    content: |
      package {{config.package_prefix}}.{{package}}

      {{helper_includes|format_list('import {}')|join('\n')}}
      {{include}}
      typealias StringArray = Array<String>
      typealias ObjectArray = Array<Any>
      {{body}}
  cxx:
    file_path: |
      {{[config.cxx_out_dir, config.package_prefix, package, file]|map('replace', '.', pat_sep)|path_join}}.cpp
    scopes: 
      - body
      - include
    content: |
      #include "jni.h"
      #include <iostream>
      {{cxx_helper_includes|format_list('#include "{}"')|join('\n')}}
      {{include}}

      {{body}}

enum:
  kotlin: 
    body: |

      enum class {{name}}(val value: Int){
        {%- set comma = joiner(",") -%}
        {%- for case in enum_cases -%}
        {{comma()}}
        {{case.name}}({{case.value}})
        {%- endfor %};

        companion object {
          private val values = values();
          fun getByValue(value: Int) = values.firstOrNull { it.value == value }
        }
      }

class: 
  kotlin: 
    include: 
      unique_content: |
        {{include|format_list("import {}")|join('\n')}}
    body:
      scopes:
        - head
        - properties
        - body
        - companion
        - private_external
        - interface_external
      content: |
        {% set bases = base_types_converters if base_types_converters is defined else [] %}
        {%- if kotlin.is_valid_class(name, bases) %}
        {{comment}}
        {% if is_abstract %}
        interface I{{name}} {% if base_types_converters is defined %}: {{base_types_converters|join(', ', attribute='kotlin.target_type_name')}} {% endif %}{
            {%- if base_types_converters is not defined %}
            fun getObjId(): Long
            {%- endif %}
            {{properties|string|indent}}
            {{body|string|indent}}
        }

        class {{name}}Helper {
            companion object {
                {{interface_external|string|indent(8)}}
          }
        }
        {% endif -%}
        {{'open ' if is_open}}class {{name}}
            internal constructor(_id: Long) {% if base_types_converters is defined -%}
                                              {%- set comma = joiner(', ') -%}
                                              : {% for base_type_converter in base_types_converters -%}
                                                {{comma()}}{{'I' if base_type_converter.is_abstract}}{{base_type_converter.kotlin.target_type_name}}{{'(_id)' if not base_type_converter.is_abstract}}
                                                {%- endfor -%}
                                                {{', I' + name + ' ' if is_abstract}}
                                              {%- else -%}
                                              {{': I' + name + ' ' if is_abstract}}
                                              {%- endif %}{
            companion object {
                {%- if not has_non_abstract_base_class %}
                init {
                  System.loadLibrary("wrapper_jni");
                }
                {%- endif %}
                {{companion|string|indent(8)}}
            }
            {% if not has_non_abstract_base_class %}
            protected val id = _id
            {%- endif %}
            {% if base_types_converters is defined or is_abstract -%}
            {{'override '}}
            {%- else %}
            {{'open '}}
            {%- endif -%}
            fun getObjId(): Long {
                if(id == 0L) {
                    throw RuntimeException("Object is not allocated")
                }
                return id;
            }

            {{head|string|indent}}
            {%- if not is_abstract %}
            {{properties|string|indent}}
            {{body|string|indent}}
            {%- endif %}
            {%- if not has_non_abstract_base_class and not is_abstract %}
            /**
            * Finalize and deletes the object
            */
            protected fun finalize() {
                
                jFinalize(id)
            }
            {%- endif %}
            ///// External wrapper functions ////////////
            {%- if not is_abstract %}
            {{private_external|string|indent}}
            {%- endif %}
            {%- if not has_non_abstract_base_class %}
            private external fun jSet_this(id: Long, self: Any): Void
            private external fun jFinalize(id: Long): Void
            {%- endif %}
        }
        {%- endif %}
  cxx:
    include: 
      unique_content: |
        #include "{{prj_rel_file_name}}"
    body:
      content: |
        {%- if not has_non_abstract_base_class and not is_abstract %}
        extern "C" JNIEXPORT void {{get_jni_name('jSet_this')}}(JNIEnv* env, jobject obj, jobjectid id, jobject self){
          return iegen::handleNativeCrash(env, [&] {
            std::cout<<"{{cxx_type_name}} object value:"<<self<<" object id :"<<id<<std::endl;
            }
          );
        }
        extern "C" JNIEXPORT void {{get_jni_name('jFinalize')}}(JNIEnv* env, jobject obj, jobjectid id){
          iegen::handleNativeCrash(env, [&] {
              auto this_object = iegen::{{"Unsafe" if not (shared_ref or ancestors|any('shared_ref'))}}RefFromLong<{{cxx_type_name}}>(id);
              delete {{'&' if shared_ref or ancestors|any('shared_ref')}}this_object;
            }
          );
        }
        {%- endif %}

constructor:
  kotlin:
    head: |
      {{comment}}
      constructor({{args|format_list("{arg.name}: {arg.converter.kotlin.target_type_name}", 'arg')|join(', ')}}): this(construct_helper({{args|join(', ', attribute='name')}})) {
        //jSet_this(id, this)
      }
    companion: |
      {{comment}}
      protected fun construct_helper({{args|format_list("{arg.name}: {arg.converter.kotlin.target_type_name}", 'arg')|join(', ')}}): Long {
          {%- set call_args = [] %}
          {% for arg in args -%}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {{converter.snippet(arg.name)|indent}}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {% endfor %}
          val id = jConstructor{{overloading_prefix}}({{call_args|join(', ')}})
          return id
      }
      @JvmStatic
      private external fun jConstructor{{overloading_prefix}}({{args|format_list("{arg.name}: {arg.converter.jdk.target_type_name}", 'arg')|join(', ')}}): Long
  cxx:
    body: |
      extern "C" JNIEXPORT jobjectid {{get_jni_name('jConstructor'+overloading_prefix)}}(JNIEnv* env, jobject obj{{args|format_list(", {arg.converter.jni.target_type_name} {arg.name}", 'arg')|join}}){
        return iegen::handleNativeCrash(env, [&] {
              {%- set call_args = [] -%}
              {%- for arg in args -%}
              {% set converter = arg.converter.jni_to_cxx %}
              {{converter.snippet(arg.name)|indent(8)}}
              {%- do call_args.append(converter.converted_name(arg.name)) -%}
              {% endfor %}
              {%- if not (shared_ref or owner_class.ancestors|any('shared_ref')) %}
              auto this_object = new {{cxx_type_name}}({{call_args|join(', ')}});
              return iegen::UnsafeRefAsLong(this_object);
              {%- else %}
              auto this_object = iegen::allocateRef<{{cxx_type_name}}>({{call_args|join(', ')}});
              return iegen::AllocRefPtrAsLong(this_object);

              {%- endif %}
              }
        );
      }

function:
  kotlin:
    body: |
      {%- if not is_static %}
      {{comment}}
      {{'open ' if is_open}}{{'override ' if is_override or name == 'toString'}}fun {{name}}({{args|format_list("{arg.name}: {arg.converter.kotlin.target_type_name}", 'arg')|join(', ')}}): {{rconverter.kotlin.target_type_name}} {
          {%- set call_args = ['getObjId()'] %}
          {%- set result_converter = rconverter.jdk_to_kotlin %}
          {% for arg in args -%}
          {%- set converter = arg.converter.kotlin_to_jdk %}
          {{converter.snippet(arg.name)|indent}}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          {%- if owner_class_is_abstract and not is_abstract %}
          val result = {{owner_class.name}}Helper.j{{name|capitalize}}{{overloading_prefix}}({{call_args|join(', ')}})
          {%- else %}
          val result = j{{name|capitalize}}{{overloading_prefix}}({{call_args|join(', ')}})
          {%- endif %}
          {{result_converter.snippet('result')|indent}}
          return {{result_converter.converted_name('result')}}
      }
      {% endif %}
    companion: |
      {%- if is_static %}
      {{comment}}
      fun {{name}}({{args|format_list("{arg.name}: {arg.converter.kotlin.target_type_name}", 'arg')|join(', ')}}): {{rconverter.kotlin.target_type_name}} {
          {%- set call_args = [] %}
          {%- set result_converter = rconverter.jdk_to_kotlin %}
          {% for arg in args -%}
          {%- set converter = arg.converter.kotlin_to_jdk %}
          {{converter.snippet(arg.name)|indent}}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          {% if owner_class_is_abstract and not is_abstract -%}
          val result = {{owner_class.name}}Helper.j{{name|capitalize}}{{overloading_prefix}}({{call_args|join(', ')}})
          {%- else %}
          val result = j{{name|capitalize}}{{overloading_prefix}}({{call_args|join(', ')}})
          {%- endif %}
          {{result_converter.snippet('result')|indent}}
          return {{result_converter.converted_name('result')}}
      }
      {%- set jdk_args=args|format_list("{arg.name}: {arg.converter.jdk.target_type_name}", 'arg') %}
      @JvmStatic
      private external fun j{{name|capitalize}}{{overloading_prefix}}({{jdk_args|join(', ')}}): {{rconverter.jdk.target_type_name}}
      {%- endif %}
    private_external: |
      {%- if not is_static -%}
      {%- set jdk_args=["id: Long"] + args|format_list("{arg.name}: {arg.converter.jdk.target_type_name}", 'arg') -%}
      private external fun j{{name|capitalize}}{{overloading_prefix}}({{jdk_args|join(', ')}}): {{rconverter.jdk.target_type_name}}
      {%- endif %}
    interface_external: |
      {%- if not is_static -%}
      {%- set jdk_args=["id: Long"] + args|format_list("{arg.name}: {arg.converter.jdk.target_type_name}", 'arg') -%}
      @JvmStatic
      external fun j{{name|capitalize}}{{overloading_prefix}}({{jdk_args|join(', ')}}): {{rconverter.jdk.target_type_name}}
      {%- endif %}
  cxx:
    body: |
      {% set func_name="j%s%s"|format(name|capitalize, overloading_prefix) %}
      {%- set objid_args=["jobjectid id"]if not is_static else [] -%} 
      {%- set jni_args=["JNIEnv* env, jobject obj"] + objid_args 
        + args|format_list("{arg.converter.jni.target_type_name} {arg.name}", 'arg') -%}
      {%- macro args_snippet(args, call_args) %}
      {%- for arg in args -%}
      {%- set converter = arg.converter.jni_to_cxx %}
      {{converter.snippet(arg.name)}}
      {%- do call_args.append(converter.converted_name(arg.name))%}
      {% endfor %}
      {%- endmacro %}
      {% macro call_code(prefix, call_args) -%}
      {%- if rconverter.jni.target_type_name != 'void' %}
      auto result = {{prefix}}{{cxx_name}}({{call_args|join(', ')}});
      {{rconverter.cxx_to_jni.snippet('result')}}
      return {{rconverter.cxx_to_jni.converted_name('result')}};
      {%- else %}
      this_object->{{cxx_name}}({{call_args|join(', ')}});
      {%- endif %}
      {%- endmacro %}
      {%- set class_name = owner_class.name %}
      {%- if owner_class_is_abstract and not is_abstract %}
      {%- set class_name = owner_class.name + 'Helper' %}
      {%- endif %}
      extern "C" JNIEXPORT {{rconverter.jni.target_type_name}} {{get_jni_name(func_name, class_name)}}({{jni_args|join(', ')}}){
          return iegen::handleNativeCrash(env, [&] {
              {%- set call_args = [] %}
              {{args_snippet(args, call_args)|indent(8)}}
              {%- if not is_static %}
              validateID(id);

              auto this_object = iegen::{{"Unsafe" if not (shared_ref or owner_class.ancestors|any('shared_ref'))}}RefFromLong<{{cxx_type_name}}>(id);
              {{call_code("this_object->", call_args)|indent(8)}}
              {%- else %}
              {{call_code(cxx_type_name + "::", call_args)|indent(8)}}
              {%- endif %}
            }
          );
      }

getter:
  kotlin:
    properties: |
      {% set result_converter = rconverter.jdk_to_kotlin %}
      {{comment}}
      {{'var' if setter_ctx is defined else 'val'}} {{name}}: {{result_converter.target_type_name}}
            get() {
              {%- if owner_class_is_abstract and not is_abstract %}
              val result = {{owner_class.name}}Helper.j{{name|capitalize}}(getObjId())
              {%- else %}
              val result = j{{name|capitalize}}(getObjId())
              {%- endif %}
              {{result_converter.snippet('result')|indent(8)}}
              return {{result_converter.converted_name('result')}}
            }
            {% if setter_ctx is defined %}
            {% set converter = setter_ctx.args[0].converter.kotlin_to_jdk %}
            set(value) {
              {{converter.snippet('value')|indent(8)}}
              {%- if owner_class_is_abstract and not is_abstract %}
              {{owner_class.name}}Helper.j{{setter_ctx.name|capitalize}}(getObjId(), {{converter.converted_name('value')}})
              {%- else %}
              j{{setter_ctx.name|capitalize}}(getObjId(), {{converter.converted_name('value')}})
              {%- endif %}
            }
            {% endif %}
    private_external: |
      private external fun j{{name|capitalize}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if setter_ctx is defined %}
      private external fun j{{setter_ctx.name|capitalize}}(id: Long, value : {{setter_ctx.args[0].converter.jdk.target_type_name}}): Void
      {%- endif %}
    interface_external: |
      @JvmStatic
      external fun j{{name|capitalize}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if setter_ctx is defined %}
      @JvmStatic
      external fun j{{setter_ctx.name|capitalize}}(id: Long, value : {{setter_ctx.args[0].converter.jdk.target_type_name}}): Void
      {%- endif %}
  cxx:
    body: |
      {%- set func_name="j%s"|format(name|capitalize) %}
      {%- set class_name = owner_class.name %}
      {%- if owner_class_is_abstract and not is_abstract %}
      {%- set class_name = owner_class.name + 'Helper' %}
      {%- endif %}
      extern "C" JNIEXPORT {{rconverter.jni.target_type_name}} {{get_jni_name(func_name, class_name)}}(JNIEnv* env, jobject obj, jobjectid id){
          return iegen::handleNativeCrash(env, [&] {
              validateID(id);
              auto this_object = iegen::{{"Unsafe" if not (shared_ref or owner_class.ancestors|any('shared_ref'))}}RefFromLong<{{cxx_type_name}}>(id);
              auto result = this_object->{{cxx_name}}();
              {{rconverter.cxx_to_jni.snippet('result')|indent(8)}}
              return {{rconverter.cxx_to_jni.converted_name('result')}};
              }
          );
      }
      {%- if setter_ctx is defined %}
      {% set func_name="j%s"|format(setter_ctx.name|capitalize) %}
      extern "C" JNIEXPORT void {{get_jni_name(func_name, class_name)}}(JNIEnv* env, jobject obj, jobjectid id, {{setter_ctx.args[0].converter.jni.target_type_name}} {{setter_ctx.args[0].name}}){
          return iegen::handleNativeCrash(env, [&] {
              validateID(id);
              auto this_object = iegen::{{"Unsafe" if not (shared_ref or owner_class.ancestors|any('shared_ref'))}}RefFromLong<{{cxx_type_name}}>(id);
              {% set converter = setter_ctx.args[0].converter.jni_to_cxx %}
              {{converter.snippet(setter_ctx.args[0].name)|indent(8)}}
              this_object->{{setter_ctx.cxx_name}}({{converter.converted_name(setter_ctx.args[0].name)}});
              }
          );
      }
      {% endif %}

