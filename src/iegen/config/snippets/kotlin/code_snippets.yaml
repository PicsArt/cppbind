file:
  kotlin:
    file_path: |
      {{vars.target_file_fullname}}
    scopes:
      - body
      - include
      - glob_init
      - glob_external
    content: |
      {{[banner_logo, vars.banner_comment]|make_doxygen_comment}}

      package {{vars.package_prefix}}.{{vars.package}}
      {% set helpers = helper_includes|format_list('import {}.*')|join_unique %}
      {%- set exc_vars = get_type_info("std::exception").vars %}
      {%- set exc_include = 'import ' + exc_vars.package_prefix + '.' + exc_vars.package + '.*' %}
      {{[helpers, exc_include, include]|sort_snippets|join(new_line)}}
      {%- if glob_init %}
      {{glob_init}}
      {%- endif %}
      {%- if body %}
      {{body}}
      {%- endif %}
      {%- if glob_external %}

      {{glob_external}}
      {%- endif %}{{new_line}}
  cxx:
    file_path: |
      {{vars.c_file_fullname}}
    scopes:
      - namespace
      - body
      - include
    content: |
      {{[banner_logo, vars.banner_comment]|make_doxygen_comment}}

      #include "jni.h"
      #include <iostream>
      {{cxx_helper_includes|format_list('#include "{}"')|join(new_line)}}
      {{include}}
      {{namespace}}

      {{body}}{{new_line}}

package:

enum:
  kotlin:
    body: |
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      enum class {{vars.name}}(val value: Int){{': ' if vars.bases_list}}{{vars.bases_list|join(', ')}} {
          {%- set comma = joiner(",") -%}
          {%- for case in enum_cases -%}
          {%- if case.name not in vars.enum_excluded_fields -%}
          {{comma()}}
          {%- if case.comment %}
          {{case.comment|make_doxygen_comment|indent(4)}}
          {%- endif %}
          {{vars.enum_field_name_prefix + case.name}}({{case.value}})
          {%- endif %}
          {%- endfor %};

          companion object {
              private val values = values()
              fun getByValue(value: Int) = values.firstOrNull { it.value == value }
          }
          {%- if vars.code_fragment %}

          {{vars.code_fragment|join(2 * new_line)|indent(4)}}
          {%- endif %}
      }

var_class_cxx: &var_class_cxx
  include:
    unique_content: |
      {%- if vars.is_proj_type -%}
      #include "{{vars.prj_rel_file_name}}"
      {%- endif -%}
      {%- macro gen_include(type_info) -%}
      {%- if type_info.vars and type_info.vars.is_proj_type -%}
      {{marker}}#include "{{type_info.vars.prj_rel_file_name}}"
      {%- endif -%}
      {%- for arg_type_info in type_info.arg_types_infos -%}
      {{gen_include(arg_type_info)}}
      {%- endfor -%}
      {%- endmacro -%}
      {%- for base in base_types_infos -%}
      {{gen_include(base)}}
      {%- endfor -%}
      {%- if vars.include_cxx -%}
      {{marker}}{{vars.include_cxx|select('match_regexp', '^<.*>$', '^".*"$')|format_list('#include {}')|join_unique}}
      {{marker}}{{vars.include_cxx|reject('match_regexp', '^<.*>$', '^".*"$')|format_list('#include "{}"')|join_unique}}
      {%- endif -%}
  namespace:
    unique_content: |
      {%- if cxx.namespace %}
      using namespace {{cxx.namespace}};
      {%- endif %}
  body:
    content: |
      {%- if not base_types_converters|map(attribute='kotlin')|rejectattr('vars.action', 'equalto', 'gen_interface')|list %}
      {%- macro gen_jni_owner_name(owner_class) -%}{#this should be a shared macro#}
      {%- if owner_class -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin -%}
      {%- set owner_name = kotlin_type_info.get_target_type_name(interface_class=vars.action == 'gen_interface') -%}
      {{gen_jni_owner_name(owner_class.owner_class)}}{{helper.map_to_jni_name(owner_name)}}_00024
      {%- endif -%}
      {%- endmacro -%}
      {%- set owner_name = gen_jni_owner_name(owner_class) + converter.kotlin.get_target_type_name(interface_class=vars.action == 'gen_interface') %}
      {%- set finalize_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, 'jFinalize') %}
      extern "C" JNIEXPORT void {{finalize_name}}(JNIEnv* env, jobject obj, jobjectid id){
          {%- set jni_to_cxx_converter = make_type_converter('std::shared_ptr<' + root_types_infos[0].cxx.pointee_unqualified_name + '>').jni_to_cxx if root.vars.shared_ref else make_type_converter(root_types_infos[0].cxx.pointee_unqualified_name).jni_to_cxx %}
          {{jni_to_cxx_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          {%- if root.vars.shared_ref %}
          delete &{{jni_to_cxx_converter.converted_name('id')}};
          {%- else %}
          delete {{jni_to_cxx_converter.converted_name('id')}};
          {%- endif %}
      }
      {%- endif %}

var_class_kotlin_include: &var_class_kotlin_include
  unique_content: |
    {{marker if vars.include}}{{vars.include|format_list("import {}")|join_unique}}
    {%- macro gen_import(converter) -%}
    {%- if converter.vars and converter.vars.is_proj_type and converter.vars.package != vars.package -%}
    {{marker}}import {{converter.vars.package_prefix}}.{{converter.vars.package}}.{{converter.target_type_name}}
    {%- endif -%}
    {%- for arg_converter in converter.args -%}
    {{gen_import(arg_converter)}}
    {%- endfor -%}
    {%- endmacro -%}
    {%- for base in base_types_converters|map(attribute='kotlin') -%}
    {{gen_import(base)}}
    {%- endfor -%}

class:
  kotlin:
    include: *var_class_kotlin_include
    body:
      scopes:
        - head
        - properties
        - body
        - companion
        - private_external
      content: |
        {%- set base_interfaces = base_types_converters|map(attribute='kotlin')|selectattr('vars.action', 'eq', 'gen_interface')|map(attribute='target_type_name')|list -%}
        {%- set all_bases_are_interface = not base_types_infos|rejectattr('vars.action', 'equalto', 'gen_interface')|list %}
        {%- set bases_specifiers = base_interfaces + base_types_converters|map(attribute='kotlin.target_type_name')|reject('in', base_interfaces)|format_list('{}(_id, _owner)') + vars.bases_list + (['AutoCloseable'] if not base_types_converters or all_bases_are_interface else []) + (['Exception()'] if vars.is_exception and not ancestors|selectattr('vars.is_exception', 'equalto', True)|list else []) -%}
        {%- if root_types_infos|length > 1 -%}
        {%- do Error.critical(cxx.type_name + ' has more than one root type.') -%}
        {%- endif -%}
        {%- if base_types_converters|map(attribute='kotlin')|rejectattr('vars.action', 'equalto', 'gen_interface')|list|length > 1 %}
        {%- do Error.critical(cxx.name + 'has more than 1 non abstract base type.') %}
        {%- endif %}
        {%- if ancestors|selectattr('vars.shared_ref', 'equalto', True)|list|length not in (0, ancestors|length) %}
        {%- do Error.critical(cxx.name + 'ancestors have different values for shared_ref variable.') %}
        {%- endif %}
        {%- if vars.comment %}
        {{vars.comment|make_doxygen_comment}}
        {%- endif %}
        {{'open ' if cxx.is_open}}class {{converter.kotlin.target_type_name}}
        internal constructor(_id: Long, _owner: Boolean = false){{' : ' + bases_specifiers|join(', ') if bases_specifiers}} {
            companion object {
                {%- if vars.c_wrapper_lib_name and all_bases_are_interface %}
                init {
                    System.loadLibrary("{{vars.c_wrapper_lib_name}}")
                }
                {%- endif %}
                {{companion|string|indent(8)}}
            }
            {% if all_bases_are_interface %}
            protected var objId = _id
            protected val owner = _owner
            {%- endif %}
            {%- if base_types_converters|map(attribute='kotlin')|selectattr('vars.action', 'equalto', 'gen_interface')|list or not base_types_converters %}
            {% if base_types_converters -%}
            {{'override '}}
            {%- else %}
            {{'open '}}
            {%- endif -%}
            val id: Long
                get() {
                    if (objId == 0L) {
                        throw RuntimeException("Object is not allocated")
                    }
                    return objId
                }
            {%- endif -%}
            {%- if head %}
            {{head|string|indent}}
            {%- endif %}
            {%- if properties %}
            {{properties|string|indent}}
            {%- endif %}
            {%- if body %}
            {{body|string|indent}}
            {%- endif %}
            {%- if all_bases_are_interface %}

            override fun close() {
                if (owner && objId != 0L) {
                    jFinalize(objId)
                    objId = 0L
                }
            }

            /**
             * Finalize and deletes the object
             */
            protected fun finalize() {
                close()
            }
            {%- endif %}
            {%- if private_external %}

            ///// External wrapper functions ////////////
            {{private_external|string|indent}}
            {%- endif %}
            {%- if all_bases_are_interface %}
            private external fun jFinalize(id: Long): Unit
            {%- endif %}
        }
  cxx: *var_class_cxx

interface:
  kotlin:
    include: *var_class_kotlin_include
    body:
      scopes:
        - head
        - properties
        - body
        - companion
        - interface_external
      content: |
        {%- set bases_specifiers = base_types_converters|map(attribute='kotlin.target_type_name')|list + vars.bases_list %}
        {%- if ancestors|selectattr('vars.shared_ref', 'equalto', True)|list|length not in (0, ancestors|length) %}
        {%- do Error.critical(cxx.name + 'ancestors have different values for shared_ref variable.') %}
        {%- endif %}
        {%- if root_types_infos|length > 1 %}
        {%- do Error.critical(cxx.type_name + ' has more than one root type.') %}
        {%- endif %}
        {% if vars.comment %}
        {{vars.comment|make_doxygen_comment}}
        {%- endif %}
        interface {{converter.kotlin.target_type_name}}{{' : ' + bases_specifiers|join(', ') if bases_specifiers else ' : AutoCloseable'}} {
            {%- if not base_types_converters %}
            val id: Long
            {%- endif %}
            {{properties|string|indent}}
            {{body|string|indent}}
        }

        {% if interface_external %}
        class {{converter.kotlin.target_type_name}}Helper {
            companion object {
                {{interface_external|string|indent(8)}}
            }
        }
        {% endif %}

        {{'open ' if cxx.is_open}}class {{converter.kotlin.get_target_type_name(interface_class=True)}}
        internal constructor(_id: Long, _owner: Boolean = false) : {{converter.kotlin.target_type_name}} {
            companion object {
                {%- if vars.c_wrapper_lib_name %}
                init {
                    System.loadLibrary("{{vars.c_wrapper_lib_name}}")
                }
                {%- endif %}
                {{companion|string|indent(8)}}
            }

            protected var objId = _id
            protected val owner = _owner
            override val id: Long
                get() {
                    if (objId == 0L) {
                        throw RuntimeException("Object is not allocated")
                    }
                    return objId
                }
            {%- if head %}
            {{head|string|indent}}
            {%- endif %}
            {%- if not base_types_converters|map(attribute='kotlin')|rejectattr('vars.action', 'equalto', 'gen_interface')|list %}

            override fun close() {
                if (owner && objId != 0L) {
                    jFinalize(objId)
                    objId = 0L
                }
            }

            /**
            * Finalize and deletes the object
            */
            protected fun finalize() {
                close()
            }
            {% endif %}
            ///// External wrapper functions ////////////
            private external fun jFinalize(id: Long): Unit
        }
  cxx: *var_class_cxx


var_method_kotlin_include: &var_method_kotlin_include
  unique_content: |
    {%- macro gen_import(converter) -%}
    {%- if converter.vars and converter.vars.is_proj_type and converter.vars.package != vars.package -%}
    {{marker}}import {{converter.vars.package_prefix}}.{{converter.vars.package}}.{{converter.target_type_name}}
    {%- endif -%}
    {%- for arg_converter in converter.args -%}
    {{gen_import(arg_converter)}}
    {%- endfor -%}
    {%- endmacro -%}
    {%- for arg_converter in args|map(attribute='converter.kotlin') -%}
    {{gen_import(arg_converter)}}
    {%- endfor -%}
    {%- if rconverter is defined -%}
    {{gen_import(rconverter.kotlin)}}
    {%- endif -%}

var_method_cxx_include: &var_method_cxx_include
  unique_content: |
    {%- if vars.is_proj_type -%}
    #include "{{vars.prj_rel_file_name}}"
    {%- endif -%}
    {%- macro gen_include(type_info) -%}
    {%- if type_info.vars and type_info.vars.is_proj_type -%}
    {{marker}}#include "{{type_info.vars.prj_rel_file_name}}"
    {%- endif -%}
    {%- for arg_type_info in type_info.arg_types_infos -%}
    {{gen_include(arg_type_info)}}
    {%- endfor -%}
    {%- endmacro -%}
    {%- for arg in args -%}
    {{gen_include(arg.type_info)}}
    {%- endfor -%}
    {%- if rconverter is defined -%}
    {{gen_include(return_type_info)}}
    {%- endif -%}

constructor:
  kotlin:
    include: *var_method_kotlin_include
    head: |
      {%- set incorrect_nullable_args = vars.nullable_arg|reject('in', args|map(attribute='name'))|list -%}
      {%- if incorrect_nullable_args -%}
        {%- do Error.critical("{} arguments are marked as nullable but {}.{} does not have such arguments.".format(', '.join(incorrect_nullable_args), owner_class.cxx.displayname, cxx.displayname)) -%}
      {%- endif -%}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      {%- set comma = joiner(', ') %}
      constructor({%- for arg in args -%}
      {{comma()}}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}{{'?' if arg.name in vars.nullable_arg or arg.is_null_ptr}}
      {%- if arg.default -%}
      {%- if arg.is_enum %}
      {%- if arg.default.split('::')|last in arg.type_info.vars.enum_excluded_fields -%}
      {%- do Error.warning("{} field of {} enum is mentioned as excluded field, so it cannot be used as a default value for {}.{} constructor argument. Iegen is skipping default value addition in target language wrappers.".format(arg.default.split('::')|last, arg.default.split('::')[-2], owner_class.cxx.displayname, cxx.displayname)) -%}
      {%- else %} = {{arg.converter.kotlin.target_type_name}}.{{arg.type_info.vars.enum_field_name_prefix + arg.default.split('::')|last}}
      {%- endif -%}
      {%- else -%}
      {%- if arg.is_literal %} = {{arg.default}}{{'F' if arg.is_float}}{{'L' if arg.is_long}}
      {%- elif arg.is_null_ptr %} = null
      {%- endif %}
      {%- endif %}
      {%- endif -%}
      {%- endfor -%}): this(construct_helper({{args|join(', ', attribute='name')}}), true) {
      }
    companion: |
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      {%- set comma = joiner(', ') %}
      protected fun construct_helper({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}{{'?' if arg.name in vars.nullable_arg or arg.is_null_ptr}}{%- endfor-%}): Long {
          {%- set call_args = [] %}
          {%- for arg in args %}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {{converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr)|indent}}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          val id = jConstructor{{overloading_prefix}}({{call_args|join(', ')}})
          return id
      }
      {% set comma = joiner(', ') %}
      @JvmStatic
      private external fun jConstructor{{overloading_prefix}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{%- endfor-%}): Long
  cxx:
    include: *var_method_cxx_include
    body: |
      {%- macro gen_jni_owner_name(owner_class) -%}{#this should be a shared macro#}
      {%- if owner_class -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin -%}
      {%- set owner_name = kotlin_type_info.get_target_type_name(interface_class=owner_class.vars.action == 'gen_interface') -%}
      {{gen_jni_owner_name(owner_class.owner_class)}}{{helper.map_to_jni_name(owner_name)}}_00024
      {%- endif -%}
      {%- endmacro -%}
      {%- set owner_name = gen_jni_owner_name(owner_class)[:-6] %}{#remove trailing _00024#}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, 'jConstructor' + overloading_prefix) %}
      extern "C" JNIEXPORT jobjectid {{jni_name}}(JNIEnv* env, jobject obj{{args|format_list(", {arg.converter.jni.target_type_name} {arg.name}", 'arg')|join}}){
          {%- set call_args = [] -%}
          {%- for arg in args -%}
          {% set converter = arg.converter.jni_to_cxx %}
          {{converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr)|indent(4)}}
          {%- do call_args.append(converter.converted_name(arg.name)) -%}
          {%- endfor %}
          {%- if 'no_throw' not in vars.throws %}
          void* err_ptr = nullptr;
          {%- endif %}
          try {
              {%- if not owner_class.root.vars.shared_ref %}
              {{owner_class.root_types_infos[0].cxx.pointee_unqualified_name}}* baseptr = new {{owner_class.cxx.type_name}}({{call_args|join(', ')}});
              return reinterpret_cast<jlong>(baseptr);
              {%- else %}
              {{owner_class.cxx.type_name}}* obj_ptr = new {{owner_class.cxx.type_name}}({{call_args|join(', ')}});
              auto this_object = std::shared_ptr<{{owner_class.cxx.type_name}}>(obj_ptr);
              {%- if owner_class.root_types_infos[0].cxx.pointee_unqualified_name != owner_class.cxx.type_name %}
              std::shared_ptr<{{owner_class.root_types_infos[0].cxx.pointee_unqualified_name}}> baseptr = std::dynamic_pointer_cast<{{owner_class.root_types_infos[0].cxx.pointee_unqualified_name}}>(this_object);
              return reinterpret_cast<jlong>(new std::shared_ptr<{{owner_class.root_types_infos[0].cxx.pointee_unqualified_name}}>(baseptr));
              {%- else %}
              return reinterpret_cast<jlong>(new std::shared_ptr<{{owner_class.cxx.type_name}}>(this_object));
              {%- endif %}
              {%- endif %}
          }
          {%- if 'no_throw' not in vars.throws %}
          {%- for exc_type in vars.throws -%}
          catch (const {{exc_type}}& e) {
              err_ptr = new {{exc_type}}(e);
              {%- set exc_vars = get_type_info(exc_type).vars %}
              jclass excCls = env->FindClass("{{[exc_vars.package_prefix, exc_vars.package, exc_vars.name]|map('replace', '.', pat_sep)|path_join}}");
              jmethodID constructor = env->GetMethodID(excCls, "<init>", "(JZ)V");
              jobject excObj = env->NewObject(excCls, constructor, reinterpret_cast<jobjectid>(err_ptr), true);
              env->Throw(jthrowable(excObj));
          }
          {%- endfor %}
          {%- endif %}
          {%- if not 'std::exception' in vars.throws %}
          catch (const std::exception& e) {
                jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
                jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
                env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
          }
          {%- endif %}
          catch (...) {
                jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
                jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
                env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
          }
          jobjectid result;
          return result;
      }

method:
  kotlin:
    include: *var_method_kotlin_include
    body: |
      {%- set incorrect_nullable_args = vars.nullable_arg|reject('in', args|map(attribute='name'))|list -%}
      {%- if incorrect_nullable_args -%}
        {%- do Error.critical("{} arguments are marked as nullable but {}.{} does not have such arguments.").format(', '.join(incorrect_nullable_args), owner_class.cxx.displayname, cxx.displayname) -%}
      {%- endif -%}
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      {%- set comma = joiner(', ') -%}
      {%- set setter_var_name = 'value' -%}
      {%- if not cxx.is_static %}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      {{'open ' if cxx.is_open}}{{'operator ' if vars.is_operator}}{{'override ' if cxx.is_override or vars.name == 'toString'}}fun {{vars.name}}(
      {%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}{{'?' if arg.name in vars.nullable_arg or arg.is_null_ptr}}
      {%- if arg.default -%}
      {%- if arg.is_enum %}
      {%- if arg.default.split('::')|last in arg.type_info.vars.enum_excluded_fields -%}
      {%- do Error.warning("{} field of {} enum is mentioned as excluded field, so it cannot be used as a default value for {}.{} method argument. Iegen is skipping default value addition in target language wrappers.".format(arg.default.split('::')|last, arg.default.split('::')[-2], owner_class.cxx.displayname, cxx.displayname)) -%}
      {%- else %} = {{arg.converter.kotlin.target_type_name}}.{{arg.type_info.vars.enum_field_name_prefix + arg.default.split('::')|last}}
      {%- endif -%}
      {%- else -%}
      {%- if arg.is_literal %} = {{arg.default}}{{'F' if arg.is_float}}{{'L' if arg.is_long}}
      {%- elif arg.is_null_ptr %} = null
      {%- endif %}
      {%- endif %}
      {%- endif -%}
      {%- endfor-%}): {{rconverter.kotlin.target_type_name}}{{'?' if vars.nullable_return}} {
          {%- set call_args = ['id'] -%}
          {%- set result_converter = rconverter.jdk_to_kotlin -%}
          {%- for arg in args %}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {%- set conversion = converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr) -%}
          {%- if conversion %}
          {{conversion|indent}}
          {%- endif %}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          {%- if owner_class.vars.action == 'gen_interface' %}
          val result = {{owner_class.converter.kotlin.target_type_name}}Helper.j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}})
          {%- else %}
          val result = j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}})
          {%- endif %}
          {{result_converter.snippet('result', nullable=vars.nullable_return)|indent}}
          return {{result_converter.converted_name('result')}}
      }


      {%- if vars.is_operator and vars.name == 'get' and not return_type_info.cxx.is_const_qualified and return_type_info.cxx.is_lval_reference %}


      {{'open ' if cxx.is_open}}{{'operator ' if vars.is_operator}}{{'override ' if cxx.is_override or vars.name == 'toString'}}fun set(
      {%- for arg in args -%}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}, {{setter_var_name}}: {{rconverter.kotlin.target_type_name}}
      {%- endfor-%}){
          {%- set call_args = ['id'] -%}
          {%- set result_converter = rconverter.jdk_to_kotlin -%}
          {%- for arg in args %}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {%- set conversion = converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr) -%}
          {%- if conversion %}
          {{conversion|indent}}
          {%- endif %}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          {%- if owner_class.vars.action == 'gen_interface' %}
          {{owner_class.converter.kotlin.target_type_name}}Helper.jSet{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}}, {{setter_var_name}})
          {%- else %}
          jSet{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}}, {{setter_var_name}})
          {%- endif %}
      }

      {%- endif %}

      {%- endif %}
    companion: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- if cxx.is_static %}
      {%- set comma = joiner(', ') -%}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      fun {{vars.name}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}{{'?' if arg.name in vars.nullable_arg or arg.is_null_ptr}}{%- endfor-%}): {{rconverter.kotlin.target_type_name}}{{'?' if vars.nullable_return}} {
          {%- set call_args = [] %}
          {%- set result_converter = rconverter.jdk_to_kotlin -%}
          {%- for arg in args -%}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {%- set conversion = converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr) -%}
          {%- if conversion %}
          {{conversion|indent}}
          {%- endif %}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          {%- if owner_class.vars.action == 'gen_interface' %}
          val result = {{owner_class.converter.kotlin.target_type_name}}Helper.j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}})
          {%- else %}
          val result = j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}})
          {%- endif %}
          {{result_converter.snippet('result', nullable=vars.nullable_return)|indent}}
          return {{result_converter.converted_name('result')}}
      }
      {%- set comma = joiner(', ') %}
      @JvmStatic
      private external fun j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{%- endfor-%}): {{rconverter.jdk.target_type_name}}
      {%- endif %}
    private_external: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- if not cxx.is_static %}
      {%- set comma = joiner(', ') -%}
      {%- set setter_var_name = 'value' -%}
      private external fun j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}(id: Long{{', ' if args}}{%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{%- endfor-%}): {{rconverter.jdk.target_type_name}}
      {%- if vars.is_operator and vars.name == 'get' and not return_type_info.cxx.is_const_qualified and return_type_info.cxx.is_lval_reference %}
      @JvmStatic
      private external fun jSet{{overloading_prefix}}{{template_postfix}}(id: Long{{', ' if args}}{%- for arg in args -%}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{{comma()}} {{setter_var_name}}: {{rconverter.kotlin.target_type_name}}{%- endfor-%})
      {%- endif %}
      {%- endif %}
    interface_external: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- if not cxx.is_static %}
      {%- set comma = joiner(', ') -%}
      {%- set setter_var_name = 'value' -%}
      @JvmStatic
      external fun j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}(id: Long{{', ' if args}}{%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{%- endfor-%}): {{rconverter.jdk.target_type_name}}
      {%- if vars.is_operator and vars.name == 'get' and not return_type_info.cxx.is_const_qualified and return_type_info.cxx.is_lval_reference %}
      @JvmStatic
      external fun jSet{{overloading_prefix}}{{template_postfix}}(id: Long{{', ' if args}}{%- for arg in args -%}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{{comma()}} {{setter_var_name}}: {{rconverter.kotlin.target_type_name}}{%- endfor-%})
      {%- endif %}
      {%- endif %}
  cxx:
    include: *var_method_cxx_include
    body: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- set objid_args=["jobjectid id"]if not cxx.is_static else [] -%}
      {%- set jni_args=["JNIEnv* env, jobject obj"] + objid_args
        + args|format_list("{arg.converter.jni.target_type_name} {arg.name}", 'arg') -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin %}
      {%- macro gen_jni_owner_name(owner_class) -%}{#this should be a shared macro#}
      {%- if owner_class -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin -%}
      {%- set owner_name = kotlin_type_info.target_type_name + 'Helper' if owner_class.vars.action == 'gen_interface' else kotlin_type_info.target_type_name -%}
      {{gen_jni_owner_name(owner_class.owner_class)}}{{helper.map_to_jni_name(owner_name)}}_00024
      {%- endif -%}
      {%- endmacro -%}
      {%- set owner_name = gen_jni_owner_name(owner_class)[:-6] %}{#remove trailing _00024#}
      {%- set setter_var_name = 'value' -%}
      {%- macro args_snippet(args, call_args) -%}
      {%- for arg in args -%}
      {%- set converter = arg.converter.jni_to_cxx %}
      {{converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr)}}
      {%- do call_args.append(converter.converted_name(arg.name))%}
      {% endfor %}
      {%- endmacro -%}
      {%- macro call_code(prefix, call_args, is_set_op=false) -%}
      {%- if 'no_throw' not in vars.throws %}
      void* err_ptr = nullptr;
      {%- endif -%}
      {% if rconverter.jni.target_type_name != 'void' and not is_set_op %}
      try {
          const auto& result = {{prefix}}{{cxx.name}}{%- if cxx.is_template -%}
                                              <{{template_choice.values()|format_list("{type}", 'type')|join(', ')}}>
                                              {%- endif -%}({{call_args|join(', ')}});
          {{rconverter.cxx_to_jni.snippet('result', nullable=vars.nullable_return)|indent(4)}}
          return {{rconverter.cxx_to_jni.converted_name('result')}};
      }
      {%- else %}
      try {
          {{prefix}}{{cxx.name}}({{call_args|join(', ')}}){{' = ' + setter_var_name if is_set_op}};
          return;
      }
      {%- endif %}
      {%- if 'no_throw' not in vars.throws %}
      {%- for exc_type in vars.throws -%}
      catch (const {{exc_type}}& e) {
          err_ptr = new {{exc_type}}(e);
          {%- set exc_vars = get_type_info(exc_type).vars %}
          jclass excCls = env->FindClass("{{[exc_vars.package_prefix, exc_vars.package, exc_vars.name]|map('replace', '.', pat_sep)|path_join}}");
          jmethodID constructor = env->GetMethodID(excCls, "<init>", "(JZ)V");
          jobject excObj = env->NewObject(excCls, constructor, reinterpret_cast<jobjectid>(err_ptr), true);
          env->Throw(jthrowable(excObj));
      }
      {%- endfor %}
      {%- endif %}
      {%- if not 'std::exception' in vars.throws %}
      catch (const std::exception& e) {
            jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
            jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
            env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
      }
      {%- endif %}
      catch (...) {
            jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
            jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
            env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
      }

      {% if rconverter.jni.target_type_name != 'void' and not is_set_op -%}
      {{rconverter.jni.target_type_name}} result;
      return result;
      {%- endif %}
      {%- endmacro -%}
      {%- macro gen_method(is_set_op=false) -%}
      {%- set func_name="j%s%s%s"|format('Set' if is_set_op else vars.name|capitalize, overloading_prefix, template_postfix) %}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}

      extern "C" JNIEXPORT {{ 'void' if is_set_op else rconverter.jni.target_type_name }} {{jni_name}}({{jni_args|join(', ')}}{{', ' + rconverter.jni.target_type_name + ' ' + setter_var_name if is_set_op}}){
          {%- set call_args = [] %}
          {{args_snippet(args, call_args)|indent(4)}}
          {%- if not cxx.is_static %}
          validateID(id);
          {%- set this_converter = make_type_converter('std::shared_ptr<' + owner_class.cxx.type_name + '>').jni_to_cxx if owner_class.root.vars.shared_ref else owner_class.converter.jni_to_cxx -%}
          {{this_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          {{call_code(this_converter.converted_name('id') + "->", call_args, is_set_op)|indent(4)}}
          {%- else %}
          {{call_code(owner_class.cxx.type_name + "::", call_args, is_set_op)|indent(4)}}
          {%- endif %}
      }
      {%- endmacro -%}
      {{gen_method()}}
      {%- if vars.is_operator and vars.name == 'get' and not return_type_info.cxx.is_const_qualified and return_type_info.cxx.is_lval_reference %}
      {{gen_method(is_set_op=true)}}
      {%- endif %}

function:
  kotlin:
    include: *var_method_kotlin_include
    body: |
      {%- set incorrect_nullable_args = vars.nullable_arg|reject('in', args|map(attribute='name'))|list -%}
      {%- if incorrect_nullable_args -%}
      {%- do Error.critical("{} arguments are marked as nullable but {}.{} does not have such arguments.").format(', '.join(incorrect_nullable_args), owner_class.cxx.displayname, cxx.displayname) -%}
      {%- endif -%}
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      {%- set comma = joiner(', ') -%}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      fun {{vars.name}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.kotlin.target_type_name}}{{'?' if arg.name in vars.nullable_arg or arg.is_null_ptr}}
      {%- if arg.default -%}
      {%- if arg.is_enum %}
      {%- if arg.default.split('::')|last in arg.type_info.vars.enum_excluded_fields -%}
      {%- do Error.warning("{} field of {} enum is mentioned as excluded field, so it cannot be used as a default value for {}.{} method argument. Iegen is skipping default value addition in target language wrappers.".format(arg.default.split('::')|last, arg.default.split('::')[-2], owner_class.cxx.displayname, cxx.displayname)) -%}
      {%- else %} = {{arg.converter.kotlin.target_type_name}}.{{arg.type_info.vars.enum_field_name_prefix + arg.default.split('::')|last}}
      {%- endif -%}
      {%- else -%}
      {%- if arg.is_literal %} = {{arg.default}}{{'F' if arg.is_float}}{{'L' if arg.is_long}}
      {%- elif arg.is_null_ptr %} = null
      {%- endif %}
      {%- endif %}
      {%- endif -%}
      {%- endfor-%}): {{rconverter.kotlin.target_type_name}}{{'?' if vars.nullable_return}} {
          {%- set call_args = [] -%}
          {%- set result_converter = rconverter.jdk_to_kotlin -%}
          {%- for arg in args %}
          {%- set converter = arg.converter.kotlin_to_jdk -%}
          {%- set conversion = converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr) -%}
          {%- if conversion %}
          {{conversion|indent}}
          {%- endif %}
          {%- do call_args.append(converter.converted_name(arg.name)) %}
          {%- endfor %}
          val result = j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({{call_args|join(', ')}})
          {{result_converter.snippet('result', nullable=vars.nullable_return)|indent}}
          return {{result_converter.converted_name('result')}}
      }
    glob_external: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- set comma = joiner(', ') -%}
      private external fun j{{vars.name|capitalize}}{{overloading_prefix}}{{template_postfix}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.jdk.target_type_name}}{%- endfor-%}): {{rconverter.jdk.target_type_name}}
    glob_init:
      unique_content: |
        {%- if vars.c_wrapper_lib_name %}
        val INIT = run {
            System.loadLibrary("{{vars.c_wrapper_lib_name}}");
        }
        {%- endif %}
  cxx:
    include: *var_method_cxx_include
    body: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' %}
      {%- set func_name="j%s%s%s"|format(vars.name|capitalize, overloading_prefix, template_postfix) %}
      {%- set jni_args=["JNIEnv* env, jclass cls"] + args|format_list("{arg.converter.jni.target_type_name} {arg.name}", 'arg') -%}
      {%- macro args_snippet(args, call_args) %}
      {%- for arg in args -%}
      {%- set converter = arg.converter.jni_to_cxx %}
      {%- set conversion = converter.snippet(arg.name, nullable=arg.name in vars.nullable_arg or arg.is_null_ptr) %}
      {%- if conversion %}
      {{conversion|indent(0)}}
      {%- endif %}
      {%- do call_args.append(converter.converted_name(arg.name))%}
      {%- endfor %}
      {%- endmacro %}
      {%- macro call_code(call_args) %}
      {%- if 'no_throw' not in vars.throws %}
      void* err_ptr = nullptr;
      {%- endif -%}
      {%- if rconverter.jni.target_type_name != 'void' %}
      try {
          const auto& result = {{cxx.namespace}}::{{cxx.name}}{%- if cxx.is_template -%}
                                              <{{template_choice.values()|format_list("{type}", 'type')|join(', ')}}>
                                              {%- endif -%}({{call_args|join(', ')}});
          {{rconverter.cxx_to_jni.snippet('result', nullable=vars.nullable_return)|indent(4)}}
          return {{rconverter.cxx_to_jni.converted_name('result')}};
      }
      {%- else %}
      try {
          {{cxx.namespace}}::{{cxx.name}}({{call_args|join(', ')}});
          return;
      }
      {%- endif %}
      {%- if 'no_throw' not in vars.throws %}
      {%- for exc_type in vars.throws -%}
      catch (const {{exc_type}}& e) {
          err_ptr = new {{exc_type}}(e);
          {%- set exc_vars = get_type_info(exc_type).vars %}
          jclass excCls = env->FindClass("{{[exc_vars.package_prefix, exc_vars.package, exc_vars.name]|map('replace', '.', pat_sep)|path_join}}");
          jmethodID constructor = env->GetMethodID(excCls, "<init>", "(JZ)V");
          jobject excObj = env->NewObject(excCls, constructor, reinterpret_cast<jobjectid>(err_ptr), true);
          env->Throw(jthrowable(excObj));
      }
      {%- endfor %}
      {%- endif %}
      {%- if not 'std::exception' in vars.throws %}
      catch (const std::exception& e) {
            jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
            jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
            env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
      }
      {%- endif %}
      catch (...) {
            jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
            jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
            env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
      }

      {% if rconverter.jni.target_type_name != 'void' -%}
      {{rconverter.jni.target_type_name}} result;
      return result;
      {%- endif %}
      {%- endmacro %}
      {%- set owner_name = helper.map_to_jni_name(vars.file|capitalize + 'Kt') %}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}
      extern "C" JNIEXPORT {{rconverter.jni.target_type_name}} {{jni_name}}({{jni_args|join(', ')}}){
          {%- set call_args = [] %}
          {{args_snippet(args, call_args)|indent(4)}}
          {{call_code(call_args)|indent(4)}}
      }


var_getter_kotlin_include: &var_getter_kotlin_include
  unique_content: |
    {%- macro gen_import(converter) -%}
    {%- if converter.vars and converter.vars.is_proj_type and converter.vars.package != vars.package -%}
    {{marker}}import {{converter.vars.package_prefix}}.{{converter.vars.package}}.{{converter.target_type_name}}
    {%- endif -%}
    {%- for arg_converter in converter.args -%}
    {{gen_import(arg_converter)}}
    {%- endfor -%}
    {%- endmacro -%}
    {{gen_import(rconverter.kotlin)}}

var_getter_cxx_include: &var_getter_cxx_include
  unique_content: |
    {%- macro gen_include(type_info) -%}
    {%- if type_info.vars and type_info.vars.is_proj_type -%}
    {{marker}}#include "{{type_info.vars.prj_rel_file_name}}"
    {%- endif -%}
    {%- for arg_type_info in type_info.arg_types_infos -%}
    {{gen_include(arg_type_info)}}
    {%- endfor -%}
    {%- endmacro -%}
    {{gen_include(return_type_info)}}

property_getter:
  kotlin:
    include: *var_getter_kotlin_include
    properties: |
      {%- if not cxx.is_public -%}
        {%- do Error.critical("{}.{} is not a public field. Make it public or remove iegen API.".format(owner_class.cxx.displayname, cxx.displayname)) -%}
      {%- endif -%}
      {%- set owner_name = owner_class.converter.kotlin.target_type_name -%}
      {% set result_converter = rconverter.jdk_to_kotlin %}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      {{'var' if vars.action == 'gen_property_setter' else 'val'}} {{vars.name}}: {{result_converter.target_type_name}}{{'?' if vars.nullable_return}}
          get() {
              {%- if owner_class.vars.action == 'gen_interface' %}
              val result = {{owner_name}}Helper.j{{vars.name|capitalize}}(id)
              {%- else %}
              val result = j{{vars.name|capitalize}}(id)
              {%- endif %}
              {{result_converter.snippet('result', nullable=vars.nullable_return)|indent(8)}}
              return {{result_converter.converted_name('result')}}
          }
          {%- if vars.action == 'gen_property_setter' %}
          {%- set converter = rconverter.kotlin_to_jdk %}
          set(value) {
              {{converter.snippet('value', nullable=vars.nullable_return)|indent(8)}}
              {%- if owner_class.vars.action == 'gen_interface' %}
              {{owner_name}}Helper.jSet{{vars.name|lower}}(id, {{converter.converted_name('value')}})
              {%- else %}
              jSet{{vars.name|lower}}(id, {{converter.converted_name('value')}})
              {%- endif %}
          }
          {% endif %}
    private_external: |
      private external fun j{{vars.name|capitalize}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if vars.action == 'gen_property_setter' %}
      private external fun jSet{{vars.name|lower}}(id: Long, value: {{rconverter.jdk.target_type_name}}): Unit
      {%- endif %}
    interface_external: |

      @JvmStatic
      external fun j{{vars.name|capitalize}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if vars.action == 'gen_property_setter' %}

      @JvmStatic
      external fun jSet{{vars.name|lower}}(id: Long, value: {{rconverter.jdk.target_type_name}}): Unit
      {%- endif %}
  cxx:
    include: *var_getter_cxx_include
    body: |
      {%- macro gen_jni_owner_name(owner_class) -%}{#this should be a shared macro#}
      {%- if owner_class -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin -%}
      {%- set owner_name = kotlin_type_info.target_type_name + 'Helper' if owner_class.vars.action == 'gen_interface' else kotlin_type_info.target_type_name -%}
      {{gen_jni_owner_name(owner_class.owner_class)}}{{helper.map_to_jni_name(owner_name)}}_00024
      {%- endif -%}
      {%- endmacro -%}
      {%- set owner_name = gen_jni_owner_name(owner_class)[:-6] %}{#remove trailing _00024#}
      {%- set func_name="j%s"|format(vars.name|capitalize) %}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}
      {%- set this_converter = make_type_converter('std::shared_ptr<' + owner_class.cxx.type_name + '>').jni_to_cxx if owner_class.root.vars.shared_ref else owner_class.converter.jni_to_cxx -%}
      extern "C" JNIEXPORT {{rconverter.jni.target_type_name}} {{jni_name}}(JNIEnv* env, jobject obj, jobjectid id){
          validateID(id);
          {{this_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          const auto& result = {{this_converter.converted_name('id')}}->{{cxx.name}};
          {{rconverter.cxx_to_jni.snippet('result', nullable=vars.nullable_return)|indent(4)}}
          return {{rconverter.cxx_to_jni.converted_name('result')}};
      }
      {%- if vars.action == 'gen_property_setter' %}
      {% set func_name="jSet%s"|format(vars.name|lower) %}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}
      extern "C" JNIEXPORT void {{jni_name}}(JNIEnv* env, jobject obj, jobjectid id, {{rconverter.jni.target_type_name}} value){
          validateID(id);
          {{this_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          {% set converter = rconverter.jni_to_cxx %}
          {{converter.snippet('value', nullable=vars.nullable_return)|indent(4)}}
          {{this_converter.converted_name('id')}}->{{cxx.name}} = {{converter.converted_name('value')}};
      }
      {% endif %}

getter:
  kotlin:
    include: *var_getter_kotlin_include
    properties: |
      {%- do helper.validate_getter(cxx, vars, args, owner_class, setter|default(none)) -%}
      {%- do helper.validate_template_getter_setter(cxx, vars, owner_class, setter|default(none)) -%}
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      {%- set owner_name = owner_class.converter.kotlin.target_type_name -%}
      {% set result_converter = rconverter.jdk_to_kotlin %}
      {%- if vars.comment %}
      {{vars.comment|make_doxygen_comment}}
      {%- endif %}
      {{'open ' if cxx.is_open}}{{'override ' if cxx.is_override}}{{'var ' if setter is defined else 'val '}}
                                             {%- if cxx.is_template -%}
                                             {%- for name in template_names or [] %}
                                             {%- if name != None %}{{name}}{% else %}{{template_type_converters[loop.index - 1].custom.tname}}{% endif %}
                                             {%- endfor %}
                                             {%- else %}{{vars.name}}
                                             {%- endif -%}: {{result_converter.target_type_name}}{{'?' if vars.nullable_return}}
          get() {
              {%- if owner_class.vars.action == 'gen_interface' %}
              val result = {{owner_name}}Helper.j{{vars.name|capitalize}}{{template_postfix}}(id)
              {%- else %}
              val result = j{{vars.name|capitalize}}{{template_postfix}}(id)
              {%- endif %}
              {{result_converter.snippet('result', nullable=vars.nullable_return)|indent(8)}}
              return {{result_converter.converted_name('result')}}
          }
          {%- if setter is defined %}
          {%- set incorrect_nullable_args = setter.vars.nullable_arg|reject('in', setter.args|map(attribute='name'))|list -%}
          {%- if incorrect_nullable_args -%}
            {%- do Error.critical("{} arguments are marked as nullable but {}.{} does not have such arguments.".format(', '.join(incorrect_nullable_args), setter.owner_class.cxx.displayname, setter.cxx.displayname)) -%}
          {%- endif -%}
          {%- set converter = setter.args[0].converter.kotlin_to_jdk %}
          {%- if cxx.is_override %}
          set(value) {
              super.{{vars.name}} = value
          }
          {%- else %}
          set(value) {
              {{converter.snippet('value', nullable=vars.nullable_return)|indent(8)}}
              {%- if owner_class.vars.action == 'gen_interface' %}
              {{owner_name}}Helper.j{{setter.vars.name|capitalize}}{{template_postfix}}(id, {{converter.converted_name('value')}})
              {%- else %}
              j{{setter.vars.name|capitalize}}{{template_postfix}}(id, {{converter.converted_name('value')}})
              {%- endif %}
          }
          {%- endif %}
          {%- endif %}
    private_external: |
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      private external fun j{{vars.name|capitalize}}{{template_postfix}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if setter is defined %}
      private external fun j{{setter.vars.name|capitalize}}{{template_postfix}}(id: Long, value: {{setter.args[0].converter.jdk.target_type_name}}): Unit
      {%- endif %}
    interface_external: |
      {% set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      @JvmStatic
      external fun j{{vars.name|capitalize}}{{template_postfix}}(id: Long): {{rconverter.jdk.target_type_name}}
      {%- if setter is defined %}

      @JvmStatic
      external fun j{{setter.vars.name|capitalize}}{{template_postfix}}(id: Long, value: {{setter.args[0].converter.jdk.target_type_name}}): Unit
      {%- endif %}
  cxx:
    include: *var_getter_cxx_include
    body: |
      {%- macro gen_exc_try_block(vars) -%}
      {%- if 'no_throw' not in vars.throws %}
      {%- for exc_type in vars.throws -%}
          catch (const {{exc_type}}& e) {
              err_ptr = new {{exc_type}}(e);
              {%- set exc_vars = get_type_info(exc_type).vars %}
              jclass excCls = env->FindClass("{{[exc_vars.package_prefix, exc_vars.package, exc_vars.name]|map('replace', '.', pat_sep)|path_join}}");
              jmethodID constructor = env->GetMethodID(excCls, "<init>", "(JZ)V");
              jobject excObj = env->NewObject(excCls, constructor, reinterpret_cast<jobjectid>(err_ptr), true);
              env->Throw(jthrowable(excObj));
          }
      {%- endfor %}
      {%- endif %}
      {%- if not 'std::exception' in vars.throws %}
          catch (const std::exception& e) {
              jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
              jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
              env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF(e.what()));
          }
      {%- endif %}
          catch (...) {
              jclass handlerCls = env->FindClass({{"\"{}/exceptionUtils/ExceptionHandler\"".format(vars.helpers_package_prefix|replace('.', pat_sep))}});
              jmethodID handlerMethod = env->GetStaticMethodID(handlerCls, "handleUncaughtException", "(Ljava/lang/String;)V");
              env->CallStaticVoidMethod(handlerCls, handlerMethod, env->NewStringUTF("Uncaught Exception"));
          }
      {%- endmacro -%}
      {%- set template_postfix = template_type_converters|format_list("{arg.kotlin.custom.tname}", 'arg')|join if cxx.is_template else '' -%}
      {%- set func_name="j%s%s"|format(vars.name|capitalize, template_postfix) %}
      {%- if cxx.is_template -%}
      {%- set template_args = '<' + template_choice.values()|format_list("{type}", 'type')|join(', ') + '>' %}
      {%- else %}
      {%- set template_args = '' %}
      {%- endif %}
      {%- macro gen_jni_owner_name(owner_class) -%}{#this should be a shared macro#}
      {%- if owner_class -%}
      {%- set kotlin_type_info = owner_class.converter.kotlin -%}
      {%- set owner_name = kotlin_type_info.target_type_name + 'Helper' if owner_class.vars.action == 'gen_interface' else kotlin_type_info.target_type_name -%}
      {{gen_jni_owner_name(owner_class.owner_class)}}{{helper.map_to_jni_name(owner_name)}}_00024
      {%- endif -%}
      {%- endmacro -%}
      {%- set owner_name = gen_jni_owner_name(owner_class)[:-6] %}{#remove trailing _00024#}
      {%- set jni_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}
      {%- set this_converter = make_type_converter('std::shared_ptr<' + owner_class.cxx.type_name + '>').jni_to_cxx if owner_class.root.vars.shared_ref else owner_class.converter.jni_to_cxx %}
      extern "C" JNIEXPORT {{rconverter.jni.target_type_name}} {{jni_name}}(JNIEnv* env, jobject obj, jobjectid id){
          validateID(id);
          {{this_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          {%- if 'no_throw' not in vars.throws %}
          void* err_ptr = nullptr;
          {%- endif %}
          try {
              const auto& result = {{this_converter.converted_name('id')}}->{{cxx.name}}{{template_args}}();
              {{rconverter.cxx_to_jni.snippet('result', nullable=vars.nullable_return)|indent(8)}}
              return {{rconverter.cxx_to_jni.converted_name('result')}};
          }
          {{gen_exc_try_block(vars)}}

          {{rconverter.jni.target_type_name}} result;
          return result;
      }
      {%- if setter is defined %}
      {% set func_name="j%s%s"|format(setter.vars.name|capitalize, template_postfix) %}
      {%- set jni_setter_name = helper.get_jni_func_name(vars.package_prefix + '.' + vars.package, owner_name, func_name) %}
      extern "C" JNIEXPORT void {{jni_setter_name}}(JNIEnv* env, jobject obj, jobjectid id, {{setter.args[0].converter.jni.target_type_name}} {{setter.args[0].name}}){
          validateID(id);
          {{this_converter.snippet('id', cxx_is_pointer=True)|indent(4)}}
          {%- set converter = setter.args[0].converter.jni_to_cxx %}
          {{converter.snippet(setter.args[0].name, nullable=vars.nullable_return)|indent(4)}}
          {%- if 'no_throw' not in vars.throws %}
          void* err_ptr = nullptr;
          {%- endif %}
          try {
             {{this_converter.converted_name('id')}}->{{setter.cxx.name}}{{template_args}}({{converter.converted_name(setter.args[0].name)}});
          }
          {{gen_exc_try_block(setter.vars)}}
      }
      {% endif %}
