std::__ndk1::pair:
  std::pair

nlohmann::json:
  custom:
    pname: json
  kotlin:
    type_info: String
  jni:
    type_info: jstring
  jdk:
    type_info: String
  jni_to_cxx: |
    auto {{target_name}} = nlohmann::json::parse(iegen::jni_to_string(env, {{name}}))
  cxx_to_jni: |
    {{target_type_name}} {{target_name}} = iegen::string_to_jni(env, {{name}}.dump(4));
  kotlin_to_jdk:
  jdk_to_kotlin:

json:
  nlohmann::json

std::pair:
  custom:
    pname: Pair
  kotlin:
    type_info: "Pair<{{args_t[0]}}, {{args_t[1]}}>"
  jni:
    type_info: jobject
  jdk:
    type_info: "Pair<{{args_t[0]}}, {{args_t[1]}}>"
  jni_to_cxx: |
    jclass pairClass = env->FindClass("kotlin/Pair");

    jfieldID firstID = env->GetFieldID(pairClass, "first", "Ljava/lang/Object;");
    jfieldID secondID = env->GetFieldID(pairClass, "second", "Ljava/lang/Object;");

    auto firstObject = env->GetObjectField({{name}}, firstID);
    auto secondObject = env->GetObjectField({{name}}, secondID);
    {%- set tmp_first = '_' + target_name %}
    {%- set extract_first = 'iegen::extract{}'.format(args[0].custom.pname) %}
    {%- set extract_second = 'iegen::extract{}'.format(args[1].custom.pname) %}
    auto first = {{extract_first}}(env, firstObject);
    auto second = {{extract_second}}(env, secondObject);
    {{args[0].snippet('first')}}
    {{args[1].snippet('second')}}
    {{cxx_pointee_unqualified_name}} {{target_name}} = std::make_pair({{args[0].converted_name('first')}}, {{args[1].converted_name('second')}});
  cxx_to_jni: |
    auto first = {{name}}.first;
    auto second = {{name}}.second;
    {{args[0].snippet('first')}};
    {{args[1].snippet('second')}};
    {%- if args[0].custom.pname == 'Long' %}
    {{target_type_name}} {{target_name}} = iegen::make_jni_long_pair(env, {{args[0].converted_name('first')}}, {{args[0].converted_name('second')}});
    {%- else %}
    {{target_type_name}} {{target_name}} = iegen::make_jni_object_pair(env, {{args[0].converted_name('first')}}, {{args[0].converted_name('second')}});
    {%- endif %}
  kotlin_to_jdk: |
    val first = {{name}}.first
    val second = {{name}}.second
    {{args[0].snippet('first')|indent}}
    {{args[1].snippet('second')|indent}}
    val {{target_name}} = {{target_type_name}}({{args[0].converted_name('first')}}, {{args[0].converted_name('second')}})
  jdk_to_kotlin: |
    val first  = {{name}}.first
    val second  = {{name}}.second
    {{args[0].snippet('first')|indent}}
    {{args[1].snippet('second')|indent}}
    val {{target_name}} = {{target_type_name}}({{args[0].converted_name('first')}}, {{args[0].converted_name('second')}})
