char:
  std::__cxx11::basic_string

std::string:
  std::__cxx11::basic_string

std::__ndk1::shared_ptr:
  std::shared_ptr

std::__ndk1::vector:
  std::vector

std::__ndk1::map:
  std::map

std::__ndk1::unordered_map:
  std::map

std::__ndk1::function:
  std::function

std::__ndk1::basic_string:
  std::__cxx11::basic_string

std::__ndk1::pair:
  std::pair

std::__1::shared_ptr:
  std::shared_ptr

std::__1::vector:
  std::vector

std::__1::map:
  std::map

std::__1::unordered_map:
  std::map

std::__1::function:
  std::function

std::__1::basic_string:
  std::__cxx11::basic_string

std::__1::pair:
  std::pair

$Object:
  custom:
    pname: object
    tpostfix: |
      {#- this is an internal section no need to define in user defined custom converters #}
      {%- for name in template_args_postfixes or [] -%}
      {%- if name != None %}{{name}}{% else %}{{args_converters[loop.index - 1].python.custom.tname}}{% endif -%}
      {%- endfor -%}
    namespace: |
      {#- this is an internal section no need to define in user defined custom converters #}
      {%- if parent_type_info -%}
      {%- set converter = make_type_converter(parent_type_info.cxx.type_name) -%}
      {{converter.python.target_type_name}}.
      {%- endif -%}
    tname: |
      {{vars.name}}{{custom.tpostfix}}
  types:
    python: |
      {{custom.namespace if not definition|default(False)}}
      {%- if interface_class|default(False) -%}
      {{vars.interface_class_name}}{{custom.tpostfix}}
      {%- else -%}
      {{custom.tname}}
      {%- endif -%}
    pybind: |
      {%- if interface_class|default(False) -%}
      {{vars.interface_class_name}}{{custom.tpostfix}}
      {%- else -%}
      {{custom.tname}}
      {%- endif -%}
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

$Enum:
  custom:
    pname: int
    tname: "{{vars.name}}"
  types:
    python: "{{custom.tname}}"
    pybind: "{{custom.tname}}"
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

$FunctionProto:
  custom:
    tname: Callable
  types:
    python: |
      {%- set comma = joiner(', ') -%}Callable[[{%- for arg in args[:-1] -%}{{comma()}}{{arg.target_type_name}}{%- endfor -%}], {{(args|last).target_type_name}}]
    pybind: |
      {%- set comma = joiner(', ') -%}Callable[[{%- for arg in args[:-1] -%}{{comma()}}{{arg.target_type_name}}{%- endfor -%}], {{(args|last).target_type_name}}]
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

std::__cxx11::basic_string:
  custom:
    tname: String
  types:
    python: str
    pybind: str
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    pybind_to_python:
    python_to_pybind: |
      {{target_name}} = {{target_type_name}}({{name}})

std::string_view:
  std::__cxx11::basic_string

std::vector:
  custom:
    tname: List[{{args[0].custom.tname}}]
  types:
    python: List[{{args[0].target_type_name}}]
    pybind: list
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

std::function:
  custom:
    tname: "Function"
  types:
    python: "{{args[0].target_type_name}}"
    pybind: "{{args[0].target_type_name}}"
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

std::map:
  custom:
    tname: "Map{{args_converters[0].python.custom.tname}}{{args_converters[1].python.custom.tname}}"
  types:
    python: dict
    pybind: dict
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

std::unordered_map:
  std::map

std::shared_ptr:
  custom:
    tname: "{{args_converters[0].python.custom.tname}}"
  types:
    python: "{{args[0].target_type_name}}"
    pybind: "{{args[0].target_type_name}}"
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

nlohmann::json:
  custom:
    pname: json
  types:
    python: dict
    pybind: dict
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

json:
  nlohmann::json

std::pair:
  custom:
    tname: "Pair{{args_converters[0].python.custom.tname}}{{args_converters[1].python.custom.tname}}"
  types:
    python: tuple
    pybind: tuple
  converters:
    pybind_to_cxx:
    cxx_to_pybind:
    python_to_pybind:
    pybind_to_python:

# dummy converters to not throw error on container types converter build
# currently, these are not used
std::hash:
  types: { }
  converters: { }

std::equal_to:
  types: { }
  converters: { }

std::allocator:
  types: { }
  converters: { }

std::less:
  types: { }
  converters: { }

