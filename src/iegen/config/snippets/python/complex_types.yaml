char:
  std::__cxx11::basic_string

std::string:
  std::__cxx11::basic_string

std::__ndk1::shared_ptr:
  std::shared_ptr

std::__ndk1::vector:
  std::vector

std::__ndk1::map:
  std::map

std::__ndk1::unordered_map:
  std::map

std::__ndk1::function:
  std::function

std::__ndk1::basic_string:
  std::__cxx11::basic_string

std::__ndk1::pair:
  std::pair

std::__1::shared_ptr:
  std::shared_ptr

std::__1::vector:
  std::vector

std::__1::map:
  std::map

std::__1::unordered_map:
  std::map

std::__1::function:
  std::function

std::__1::basic_string:
  std::__cxx11::basic_string

std::__1::pair:
  std::pair

$Object:
  custom:
    pname: object
    tpostfix: |
      {%- for name in type_ctx.template_names or [] -%}
      {%- if name != None %}{{name}}{% else %}{{args[loop.index - 1].custom.tname}}{% endif -%}
      {%- endfor -%}
    tname: |
      {{vars.name}}{{custom.tpostfix}}
  python:
    type_info: "{{custom.tname}}"
  pybind:
    type_info: |
      {%- if interface_class|default(False) -%}
      {{vars.interface_class_name}}{{custom.tpostfix}}
      {%- else -%}
      {{custom.tname}}
      {%- endif -%}
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

$Enum:
  custom:
    pname: int
    tname: "{{vars.name}}"
  python:
    type_info: "{{custom.tname}}"
  pybind:
    type_info: "{{custom.tname}}"
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

$FunctionProto:
  custom:
    pname: func
    tname: Callable
  python:
    type_info: |
      {%- set comma = joiner(', ') -%}Callable[[{%- for arg in args_t[:-1] -%}{{comma()}}{{arg}}{%- endfor -%}], {{args_t|last}}]
  pybind:
    type_info: |
      {%- set comma = joiner(', ') -%}Callable[[{%- for arg in args_t[:-1] -%}{{comma()}}{{arg}}{%- endfor -%}], {{args_t|last}}]
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

std::__cxx11::basic_string:
  custom:
    pname: str
    tname: String
  python:
    type_info: str
  pybind:
    type_info: str
  pybind_to_cxx:
  cxx_to_pybind:
  pybind_to_python:
  python_to_pybind: |
    {{target_name}} = {{target_type_name}}({{name}})


std::vector:
  custom:
    pname: list
    tname: List[{{args[0].custom.tname}}]
  python:
    type_info: List[{{args_t[0]}}]
  pybind:
    type_info: list
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

std::function:
  custom:
    pname: function
    tname: "Func{{args[0].custom.tname}}"
  python:
    type_info: "{{args_t[0]}}"
  pybind:
    type_info: "{{args_t[0]}}"
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

std::map:
  custom:
    pname: dict
    tname: "Map{{args[0].custom.tname}}{{args[1].custom.tname}}"
  python:
    type_info: dict
  pybind:
    type_info: dict
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

std::unordered_map:
  std::map


std::shared_ptr:
  custom:
    pname: object
    tname: "{{args[0].custom.tname}}"
  python:
    type_info: "{{args_t[0]}}"
  pybind:
    type_info: "{{args_t[0]}}"
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:


nlohmann::json:
  custom:
    pname: json
    tname: JSON
  python:
    type_info: dict
  pybind:
    type_info: dict
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python:

json:
  nlohmann::json

std::pair:
  custom:
    pname: tuple
    tname: "Pair{{args[0].custom.tname}}{{args[1].custom.tname}}"
  python:
    type_info: tuple
  pybind:
    type_info: tuple
  pybind_to_cxx:
  cxx_to_pybind:
  python_to_pybind:
  pybind_to_python: