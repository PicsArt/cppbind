file:
  swift:
    file_path: |
      {{out_dir + pat_sep + [package_prefix, package, file]|map('replace', '.', pat_sep)|path_join}}.swift
    scopes:
      - include
      - body
    content: |
      {{helper.make_doxygen_comment((banner_logo + new_line + banner_comment).split(new_line))}}

      import Foundation
      import {{c_wrapper_lib_name}}
      {{include}}

      {{body}}
  cc:
    file_path: |
      {{cxx_out_dir + pat_sep + [package_prefix, package, 'c_' + file]|map('replace', '.', pat_sep)|path_join}}.cpp
    scopes:
      - namespace
      - body
      - include
    content: |
      {{helper.make_doxygen_comment((banner_logo + new_line + banner_comment).split(new_line))}}

      #include <string.h>
      #include <memory>
      #include "{{path.relpath(cxx_out_dir + pat_sep + [package_prefix, package]|map('replace', '.', pat_sep)|path_join, out_prj_dir)}}/c_{{file}}.h"
      {{include}}
      {{namespace}}

      {{body}}
  ch:
    file_path: |
      {{cxx_out_dir + pat_sep + [package_prefix, package, 'c_' + file]|map('replace', '.', pat_sep)|path_join}}.h
    scopes:
      - body
      - include
    content: |
      {{helper.make_doxygen_comment((banner_logo + new_line + banner_comment).split(new_line))}}

      #ifndef _C_{{file}}_WRAPPER_
      #define _C_{{file}}_WRAPPER_

      {{cxx_helper_includes|format_list('#include "{}"')|join(new_line)}}
      {{include}}
      #include <stdbool.h>

      #if __cplusplus
      extern "C" {
      #endif
          {{body | string | indent}}
      #if __cplusplus
      }
      #endif
      #endif /* ifndef _C_{{file}}_WRAPPER_ */

package:

enum:
  swift:
    body: |
      public enum {{name}}: CUnsignedInt{{', ' if ctx.bases_list}}{{ctx.bases_list|join(', ')}} {
          {%- for case in enum_cases -%}
          {%- if case.comment %}
          {{helper.make_enum_case_comment(case.comment)|string|indent(4)}}
          {%- endif %}
          case {{case.name}} = {{case.value}}
          {%- endfor %}
          {%- if code_fragment %}

          {{code_fragment|join(2 * new_line)|indent(4)}}
          {%- endif %}
      }

var_class_include: &var_class_include
    unique_content: |
      {%- if ctx.is_proj_type -%}
      #include "{{prj_rel_file_name}}"
      {%- endif -%}
      {%- macro gen_import(converter, current_ctx) -%}
      {%- set type_ctx = converter.ctx -%}
      {%- if type_ctx and type_ctx.is_proj_type and (type_ctx.package != current_ctx.package or type_ctx.file != current_ctx.file) -%}
      {{marker}}#include "{{type_ctx.prj_rel_file_name}}"
      {%- endif -%}
      {%- for tmpl_arg_converter in converter.template_args -%}
      {{gen_import(tmpl_arg_converter, current_ctx)}}
      {%- endfor -%}
      {%- endmacro -%}
      {%- for base in base_types_converters -%}
      {{gen_import(base, ctx)}}
      {%- endfor -%}
      {%- if include_cxx -%}
      {{marker}}{{include_cxx|select('match_regexp', '^<.*>$', '^".*"$')|format_list('#include {}')|join_unique}}
      {{marker}}{{include_cxx|reject('match_regexp', '^<.*>$', '^".*"$')|format_list('#include "{}"')|join_unique}}
      {%- endif -%}

class:
  swift:
    include:
      unique_content: |
        {{marker if include}}{{include|format_list("import {}")|join_unique}}
    body:
      scopes:
        - head
        - properties
        - body
        - private_external
      content: |
        {%- set bases_specifiers = base_types_converters|map(attribute='swift.target_type_name')|list + ctx.bases_list -%}
        {{helper.make_comment(comment)}}
        public class {{name}}{{template_suffix}} {{': ' + bases_specifiers|join(', ') if bases_specifiers}}
                                {%- if ctx.is_exception and not helper.Exceptions.has_exc_base(ctx) -%}
                                {{', ' if bases_specifiers else ' : Error'}}
                                {%- endif %} {
            {% if not base_types_converters|rejectattr('ctx.action', 'equalto', 'gen_interface')|list and not helper.Exceptions.is_std_custom_exc(ctx)%}
            public let cself : {{converter.sc.target_type_name}}
            public let owner : Bool

            // internal main initializer
            internal required init(_ _cself: {{converter.sc.target_type_name}}, _ _owner: Bool = false) {
                self.cself = _cself
                self.owner = _owner
            }
            deinit {
                if owner {
                    release_{{name}}{{template_suffix}}(cself)
                }
            }
            {%endif%}
            {{head|string|indent}}
            {{properties|string|indent}}
            {{body|string|indent}}
        }
  cc:
    include: *var_class_include
    namespace:
      unique_content: |
        {%- if ctx.namespace %}
        using namespace {{ctx.namespace}};
        {%- endif %}
    body:
      content: |
        void release_{{name}}{{template_suffix}}({{converter.c.target_type_name}} _Nonnull cself) {
            {%- if root.shared_ref %}
            delete static_cast<std::shared_ptr<{{cxx_root_type_name}}>*>(cself);
            {%- else %}
            delete dynamic_cast<{{cxx_type_name}}*>(static_cast<{{cxx_root_type_name}}*>(cself));
            {%- endif %}
        }
  ch:
    body:
      content: |
        void release_{{name}}{{template_suffix}}({{converter.c.target_type_name}} _Nonnull cself);


interface:
  swift:
    include:
      unique_content: |
        {{include|format_list("import {}")|join_unique}}
    body:
      scopes:
        - interface_head
        - interface_properties
        - interface_body
        - head
        - properties
        - body
      content: |
        {%- set bases_specifiers = base_types_converters|map(attribute='swift.target_type_name')|list + ctx.bases_list -%}
        {{helper.make_comment(comment)}}
        public protocol {{interface_name}}{{template_suffix}} {{': ' + bases_specifiers|join(', ') if bases_specifiers}} {

            {% if not base_types_converters %}
            var cself : {{converter.sc.target_type_name}} { get }
            {% endif %}
            {{interface_head|string|indent}}
            {{interface_properties|string|indent}}
            {{interface_body|string|indent}}
        }
        extension {{interface_name}}{{template_suffix}} {
            {{properties|string|indent}}
            {{body|string|indent}}
        }
        public class {{interface_class_name}}{{template_suffix}} : {{interface_name}}{{template_suffix}} {
            public let cself : {{converter.sc.target_type_name}}
            public let owner : Bool

            // internal main initializer
            internal required init(_ _cself: {{converter.sc.target_type_name}}, _ _owner: Bool = false) {
              self.cself = _cself
              self.owner = _owner
            }
            deinit {
              if owner {
                release_{{interface_class_name}}{{template_suffix}}(cself)
              }
            }

            {{head|string|indent}}
        }
  cc:
    include: *var_class_include
    namespace:
      unique_content: |
        {%- if ctx.namespace %}
        using namespace {{ctx.namespace}};
        {%- endif %}
    body:
      content: |
        void release_{{interface_class_name}}{{template_suffix}}({{converter.c.target_type_name}} _Nonnull cself){
            {%- if root.shared_ref %}
            delete static_cast<std::shared_ptr<{{cxx_root_type_name}}>*>(cself);
            {%- else %}
            delete dynamic_cast<{{cxx_type_name}}*>(static_cast<{{cxx_root_type_name}}*>(cself));
            {%- endif %}
        }
  ch:
    body:
      content: |
        void release_{{interface_class_name}}{{template_suffix}}({{converter.c.target_type_name}} _Nonnull cself);

var_method_cxx_include: &var_method_cxx_include
  unique_content: |
    {%- macro gen_import(converter, current_ctx) -%}
    {%- set type_ctx = converter.ctx -%}
    {%- if type_ctx and type_ctx.is_proj_type -%}
    {{marker}}#include "{{type_ctx.prj_rel_file_name}}"
    {%- endif -%}
    {%- for tmpl_arg_converter in converter.template_args -%}
    {{gen_import(tmpl_arg_converter, current_ctx)}}
    {%- endfor -%}
    {%- endmacro -%}
    {%- for arg in args -%}
    {{gen_import(arg.converter, ctx)}}
    {%- endfor -%}
    {%- if rconverter is defined -%}
    {{gen_import(rconverter, ctx)}}
    {%- endif -%}

constructor:
  swift:
    head: |
      {{helper.make_comment(comment)}}
      {%- set comma = joiner(', ') %}
      public convenience init(
      {%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.swift.target_type_name}}{{'?' if arg.nullable}}
      {%- if arg.default -%}
      {%- if arg.is_enum %} = {{arg.converter.swift.target_type_name}}.{{arg.default.split('::')|last}}
      {%- else -%}
      {%- if arg.is_literal %} = {{arg.default}}
      {%- elif arg.is_null_ptr %} = nil
      {%- endif %}
      {%- endif %}
      {%- endif -%}
      {%- endfor-%}) {
      {%- set call_args = [] %}
      {% for arg in args -%}
      {%- set converter = arg.converter.swift_to_sc %}
          {{converter.snippet(arg.name, nullable=arg.nullable)|indent}}
      {%- do call_args.append(converter.converted_name(arg.name)) %}
      {%- endfor %}
          self.init(create_{{owner_class.name}}{{owner_class.template_suffix}}{{overloading_prefix}}({{call_args|join(', ')}}), true)
      }
  cc:
    include: *var_method_cxx_include
    body: |
      {%- set comma = joiner(', ') %}
      {{owner_class.converter.c.target_type_name}} _Nonnull create_{{owner_class.name}}{{owner_class.template_suffix}}{{overloading_prefix}}({%- for arg in args -%}{{comma()}}{{arg.converter.c.target_type_name}}
      {%- if arg.converter.c.custom.is_c_pointer_type %} {{'_Nullable' if arg.nullable else '_Nonnull'}}{% endif %} {{arg.name}}{%- endfor-%}){
        {%- set call_args = [] -%}
        {%- for arg in args -%}
        {% set converter = arg.converter.c_to_cxx %}
          {{converter.snippet(arg.name, nullable=arg.nullable)|indent}}
        {%- do call_args.append(converter.converted_name(arg.name)) -%}
        {% endfor %}
          auto this_object = new {{owner_class.cxx_type_name}}({{call_args|join(', ')}});
          {%- if owner_class.root.shared_ref %}
          return new std::shared_ptr<{{owner_class.root.cxx_type_name}}>(this_object);
          {%- else %}
          return static_cast<{{owner_class.root.cxx_type_name}}*>(this_object);
          {%- endif %}
      }
  ch:
    body:
      content: |
        {%- set comma = joiner(', ') %}
        {{owner_class.converter.c.target_type_name}} _Nonnull create_{{owner_class.name}}{{owner_class.template_suffix}}{{overloading_prefix}}({%- for arg in args -%}{{comma()}}{{arg.converter.c.target_type_name}}
        {%- if arg.converter.c.custom.is_c_pointer_type %} {{'_Nullable' if arg.nullable else '_Nonnull'}}{% endif %} {{arg.name}}{%- endfor-%});

function:
  swift:
    body: |
      {{helper.make_comment(comment)}}
      {%- set comma = joiner(', ') %}
      {%- if is_operator %}
      public static func {{helper.get_map_cxx_operator_name(name)}}(cself: {{owner_class.name}}{{', ' if args}}{%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.swift.target_type_name}}{{'?' if arg.nullable}}{%- endfor-%}) {{'throws ' if helper.Exceptions.can_throw(throws)}}-> {{rconverter.swift.target_type_name}}{{'?' if nullable_return}} {
        {%- set call_args = ['cself.cself']%}
      {%- else%}
      {% set override = is_override and not (original_definition_context and original_definition_context.action == 'gen_interface') -%}
      public {{"static " if is_static}}{{"override " if override}}func {{name}}(
      {%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.swift.target_type_name}}{{'?' if arg.nullable}}
      {%- if arg.default -%}
      {%- if arg.is_enum %} = {{arg.converter.swift.target_type_name}}.{{arg.default.split('::')|last}}
      {%- else -%}
      {%- if arg.is_literal %} = {{arg.default}}
      {%- elif arg.is_null_ptr %} = nil
      {%- endif %}
      {%- endif %}
      {%- endif -%}
      {%- endfor-%}) {{'throws ' if helper.Exceptions.can_throw(throws)}}-> {{rconverter.swift.target_type_name}}{{'?' if nullable_return}} {
        {%- set call_args = ['cself'] if not is_static else [] %}
      {%endif%}
        {%- for arg in args %}
        {%- set converter = arg.converter.swift_to_sc %}
          {{converter.snippet(arg.name, nullable=arg.nullable)|indent}}
        {%- do call_args.append(converter.converted_name(arg.name))%}
        {%- endfor %}
          var err = ErrorObj()
        {%- if rconverter.c.target_type_name != 'void' %}
          let result = {{helper.get_c_func_name("{}{}_{}{}".format(owner_class.name, owner_class.template_suffix, name, overloading_prefix))}}({{call_args|join(', ')}}{{', ' if call_args}}&err);
          {{rconverter.sc_to_swift.snippet('result', nullable=nullable_return)|indent}}
        {%- else %}
          {{helper.get_c_func_name("{}{}_{}{}".format(owner_class.name, owner_class.template_suffix, name, overloading_prefix))}}({{call_args|join(', ')}}{{', ' if call_args}}&err);
        {%- endif %}
          let err_type = Int(err.err_type)
          if (err_type != 0) {
              switch(err_type) {
              {%- if helper.Exceptions.can_throw(throws) %}
              {%- for exc_type in throws %}
                  case({{loop.index}}):
                      throw {{ctx.lookup_ctx_by_name(exc_type).name}}(err.err_ptr, true)
              {%- endfor %}
              {%- endif %}
              {%- if not 'std::exception' in throws %}
                  case({{throws|length + 1 if helper.Exceptions.can_throw(throws) else 1}}):
                      let exc_obj = {{ctx.lookup_ctx_by_name("std::exception").name}}(err.err_ptr, true)
                      ExceptionHandler.handleUncaughtException(exc_obj.what())
              {%- endif %}
                  default:
                      ExceptionHandler.handleUncaughtException("Uncaught Exception")
              }
          }
        {%- if rconverter.c.target_type_name != 'void' %}
          return {{rconverter.sc_to_swift.converted_name('result')}};
        {%- endif %}
      }
    interface_body: |
      {%- set comma = joiner(', ') -%}
      {{helper.make_comment(comment)}}
      func {{name}}({%- for arg in args -%}{{comma()}}{{arg.name}}: {{arg.converter.swift.target_type_name}}{{'?' if arg.nullable}}{%- endfor-%}) {{'throws ' if helper.Exceptions.can_throw(throws)}}-> {{rconverter.swift.target_type_name}}{{'?' if nullable_return}}
  cc:
    include: *var_method_cxx_include
    body: |
      {%- set comma = joiner(', ') %}
      {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{helper.get_c_func_name("{}{}_{}{}".format(owner_class.name, owner_class.template_suffix, name, overloading_prefix))}}(
      {%- if not is_static -%}
      {{owner_class.converter.c.target_type_name}} _Nonnull cself, {% endif -%}
      {%- for arg in args -%}{{comma()}}{{arg.converter.c.target_type_name}}{% if arg.converter.c.custom.is_c_pointer_type %}{{' _Nullable' if arg.nullable else ' _Nonnull'}}{% endif %} {{arg.name}}{%- endfor-%}{{', ' if args}}ErrorObj* _Nonnull err){
        {%- set call_args = [] %}
        {%- for arg in args -%}
        {%- set converter = arg.converter.c_to_cxx %}
          {{converter.snippet(arg.name, nullable=arg.nullable)|indent}}
        {%- do call_args.append(converter.converted_name(arg.name))%}
        {% endfor %}
        {%- if not is_static %}
          {%- if owner_class.root.shared_ref %}
          auto c_to_cxx_cself = std::dynamic_pointer_cast<{{owner_class.cxx_type_name}}>(
                    *static_cast<std::shared_ptr<{{owner_class.cxx_root_type_name}}>*>(cself)
                    );
          {%- else %}
          auto c_to_cxx_cself = dynamic_cast<{{owner_class.cxx_type_name}}*>(static_cast<{{owner_class.cxx_root_type_name}}*>(cself));
          {%- endif %}
        {%- endif %}

        {%- if rconverter.c.target_type_name != 'void' %}
          try {
            const auto& result = {%if not is_static %}c_to_cxx_cself->{%else%}{{owner_class.cxx_type_name}}::{% endif %}{{cxx_name}}{%- if ctx.node.is_function_template -%}
                                                                      <{{template_choice.values()|format_list("{type}", 'type')|join(', ')}}>{%- endif -%}({{call_args|join(', ')}});
            {{rconverter.cxx_to_c.snippet('result', nullable=nullable_return)|indent}}
            return {{rconverter.cxx_to_c.converted_name('result')}};
          }
        {%- else %}
          try {
              {%if not is_static %}c_to_cxx_cself->{%else%}{{owner_class.cxx_type_name}}::{% endif %}{{cxx_name}}({{call_args|join(', ')}});
          }
        {%- endif %}
        {%- if helper.Exceptions.can_throw(throws) %}
          {%- for exc_type in throws -%}
          catch (const {{exc_type}}& e) {
              err->err_type = {{loop.index}};
              err->err_ptr = new {{exc_type}}(e);
          }
          {%- endfor %}
          {%- endif %}
          {%- if not 'std::exception' in throws %}
          catch (const std::exception& e) {
              err->err_type = {{throws|length + 1 if helper.Exceptions.can_throw(throws) else 1}};
              err->err_ptr = new std::exception(e);
          }
          {%- endif %}
          catch (...) {
              err->err_type = -1;
          }

          {%- if rconverter.c.target_type_name != 'void' %}
          {{rconverter.c.target_type_name}} result;
          return result;
          {%- endif %}
      }
  ch:
    body:
      content: |
        {%- set comma = joiner(', ') %}
        {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{helper.get_c_func_name("{}{}_{}{}".format(owner_class.name, owner_class.template_suffix, name, overloading_prefix))}}(
        {%- if not is_static -%}
        {{owner_class.converter.c.target_type_name}} _Nonnull cself, {% endif -%}
        {%- for arg in args -%}{{comma()}}{{arg.converter.c.target_type_name}} {% if arg.converter.c.custom.is_c_pointer_type %}{{'_Nullable' if arg.nullable else '_Nonnull'}}{% endif %} {{arg.name}}{%- endfor-%}{{', ' if args}}ErrorObj* _Nonnull err);

var_getter_cxx_include: &var_getter_cxx_include
  unique_content: |
    {%- macro gen_import(converter, current_ctx) -%}
    {%- set type_ctx = converter.ctx -%}
    {%- if type_ctx and type_ctx.is_proj_type -%}
    {{marker}}#include "{{type_ctx.prj_rel_file_name}}"
    {%- endif -%}
    {%- for tmpl_arg_converter in converter.template_args -%}
    {{gen_import(tmpl_arg_converter, current_ctx)}}
    {%- endfor -%}
    {%- endmacro -%}
    {{gen_import(rconverter, ctx)}}

property_getter:
  swift:
    properties: |
      {% set result_converter = rconverter.sc_to_swift %}
      {{helper.make_comment(comment)}}
      public var {{name}}: {{result_converter.target_type_name}}{{'?' if nullable_return}} {
          get {
              let result = _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}(cself);
              {{result_converter.snippet('result', nullable=nullable_return)|indent(8)}}
              return {{result_converter.converted_name('result')}}
          }
          {%- if ctx.action == 'gen_property_setter' %}
          {% set converter = rconverter.swift_to_sc %}
          set(value) {
              {{converter.snippet('value', nullable=nullable_return)|indent(8)}}
              _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}(cself, {{converter.converted_name('value')}})
          }
          {% endif %}
      }
    interface_properties: |
      {% set result_converter = rconverter.sc_to_swift %}
      {{helper.make_comment(comment)}}
      var {{name}}: {{result_converter.target_type_name}}{{'?' if nullable_return}} { get {% if ctx.action == 'gen_property_setter' %}set{% endif %} }
  cc:
    include: *var_getter_cxx_include
    body: |
      {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}({{owner_class.converter.c.target_type_name}} _Nonnull cself){
          {%- if owner_class.root.shared_ref %}
          auto c_to_cxx_cself = std::dynamic_pointer_cast<{{owner_class.cxx_type_name}}>(
                    *static_cast<std::shared_ptr<{{owner_class.cxx_root_type_name}}>*>(cself)
                    );
          {%- else %}
          auto c_to_cxx_cself = dynamic_cast<{{owner_class.cxx_type_name}}*>(static_cast<{{owner_class.cxx_root_type_name}}*>(cself));
          {%- endif %}
          auto result = c_to_cxx_cself->{{cxx_name}};
          {{rconverter.cxx_to_c.snippet('result', nullable=nullable_return)|indent}}
          return {{rconverter.cxx_to_c.converted_name('result')}};
      }
      {%- if ctx.action == 'gen_property_setter' %}
      void _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}({{owner_class.converter.c.target_type_name}} _Nonnull cself, {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{name}}){
          {%- if owner_class.root.shared_ref %}
          auto c_to_cxx_cself = std::dynamic_pointer_cast<{{owner_class.cxx_type_name}}>(
                    *static_cast<std::shared_ptr<{{owner_class.cxx_root_type_name}}>*>(cself)
                    );
          {%- else %}
          auto c_to_cxx_cself = dynamic_cast<{{owner_class.cxx_type_name}}*>(static_cast<{{owner_class.cxx_root_type_name}}*>(cself));
          {%- endif %}
          {{rconverter.c_to_cxx.snippet(name, nullable=nullable_return)|indent}}
          c_to_cxx_cself->{{cxx_name}} = {{rconverter.c_to_cxx.converted_name(name)}};
      }
      {% endif %}
  ch:
    body:
      content: |
        {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}({{owner_class.converter.c.target_type_name}} _Nonnull cself);
        {%- if ctx.action == 'gen_property_setter' %}
        void _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}({{owner_class.converter.c.target_type_name}} _Nonnull cself, {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{name}});
        {% endif %}

getter:
  swift:
    properties: |
      {% set result_converter = rconverter.sc_to_swift %}
      {%- if ctx.node.is_function_template %}
      {%- if template_names %}
      {%- set _name = template_names|join %}
      {%- else %}
      {%- set _name = overloading_prefix %}
      {%- endif %}
      {%- else %}
      {%- set _name = name %}
      {%- endif %}
      {{helper.make_comment(comment)}}
      {% set override = is_override and not (original_definition_context and original_definition_context.action == 'gen_interface') -%}
      public {{'override ' if override}}var {{_name}}: {{result_converter.target_type_name}}{{'?' if nullable_return}} {
          get {
              let result = _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}{{overloading_prefix}}(cself);
              {{result_converter.snippet('result', nullable=nullable_return)|indent(8)}}
              return {{result_converter.converted_name('result')}}
          }
          {% if setter_ctx is defined %}
          {% set converter = setter_ctx.args[0].converter.swift_to_sc %}
          set(value) {
              {{converter.snippet('value', nullable=nullable_return)|indent(8)}}
              _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{setter_ctx.name}}{{setter_ctx.overloading_prefix}}(cself, {{converter.converted_name('value')}})
          }
          {% endif %}
      }
    interface_properties: |
      {% set result_converter = rconverter.sc_to_swift %}
      {{helper.make_comment(comment)}}
      var {{name}}: {{result_converter.target_type_name}}{{'?' if nullable_return}} { get{% if setter_ctx is defined %} set{% endif %}
      }
  cc:
    include: *var_getter_cxx_include
    body: |
      {%- if ctx.node.is_function_template -%}
      {%- set template_args = '<' + template_choice.values()|format_list("{type}", 'type')|join(', ') + '>' %}
      {%- else %}
      {%- set template_args = '' %}
      {%- endif %}
      {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}{{overloading_prefix}}({{owner_class.converter.c.target_type_name}} _Nonnull cself){
          {%- if owner_class.root.shared_ref %}
          auto c_to_cxx_cself = std::dynamic_pointer_cast<{{owner_class.cxx_type_name}}>(
                    *static_cast<std::shared_ptr<{{owner_class.cxx_root_type_name}}>*>(cself)
                    );
          {%- else %}
          auto c_to_cxx_cself = dynamic_cast<{{owner_class.cxx_type_name}}*>(static_cast<{{owner_class.cxx_root_type_name}}*>(cself));
          {%- endif %}
          auto result = c_to_cxx_cself->{{cxx_name}}{{template_args}}();
          {{rconverter.cxx_to_c.snippet('result', nullable=nullable_return)|indent}}
          return {{rconverter.cxx_to_c.converted_name('result')}};
      }
      {%- if setter_ctx is defined %}
      {% set converter = setter_ctx.args[0].converter.c_to_cxx %}
      void _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{setter_ctx.name}}{{setter_ctx.overloading_prefix}}({{owner_class.converter.c.target_type_name}} _Nonnull cself, {{setter_ctx.args[0].converter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{setter_ctx.args[0].name}}){
          {%- if owner_class.root.shared_ref %}
          auto c_to_cxx_cself = std::dynamic_pointer_cast<{{owner_class.cxx_type_name}}>(
                    *static_cast<std::shared_ptr<{{owner_class.cxx_root_type_name}}>*>(cself)
                    );
          {%- else %}
          auto c_to_cxx_cself = dynamic_cast<{{owner_class.cxx_type_name}}*>(static_cast<{{owner_class.cxx_root_type_name}}*>(cself));
          {%- endif %}
          {{converter.snippet(setter_ctx.args[0].name, nullable=nullable_return)|indent}}
          c_to_cxx_cself->{{setter_ctx.cxx_name}}{{template_args}}({{converter.converted_name(setter_ctx.args[0].name)}});
      }
      {% endif %}
  ch:
    body:
      content: |
        {{rconverter.c.target_type_name}}{% if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} _prop_get_{{owner_class.name}}{{owner_class.template_suffix}}_{{name}}{{overloading_prefix}}({{owner_class.converter.c.target_type_name}} _Nonnull cself);
        {%- if setter_ctx is defined %}
        {% set converter = setter_ctx.args[0].converter.c %}
        void _prop_set_{{owner_class.name}}{{owner_class.template_suffix}}_{{setter_ctx.name}}{{setter_ctx.overloading_prefix}}({{owner_class.converter.c.target_type_name}} _Nonnull cself, {{converter.target_type_name}}
        {%- if rconverter.c.custom.is_c_pointer_type %}{{' _Nullable' if nullable_return else ' _Nonnull'}}{% endif %} {{setter_ctx.args[0].name}});
        {% endif %}
