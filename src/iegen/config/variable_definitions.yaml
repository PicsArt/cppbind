action:
  inheritable: false
  default: null
  allowed_on: [ cxx, file_system ]

file:
  inheritable: true
  default: '{{_file_name}}'
  allowed_on: [ class, class_template, struct, struct_template, enum, function, function_template ]

file_fullname:
  inheritable: true
  default: '{{_file_fullname}}'
  allowed_on: [ class, class_template, struct, struct_template, enum, function, function_template ]

package:
  inheritable: true
  default: 'undefined'
  allowed_on: [ dir, file, class, class_template, struct, struct_template, enum, function, function_template ]

name:
  inheritable: false
  type: str
  default: '{{_object_name}}'
  python.default: '{{_helper_module.get_operator_name(_object_name) if _is_operator else _object_name}}'
  kotlin.default: '{{_helper_module.get_operator_name(_object_name) if _is_operator else _object_name}}'
  swift.default: '{{_helper_module.get_operator_name(_object_name) if _is_operator else _object_name}}'
  allowed_on: [ cxx, file_system ]

interface_name:
  inheritable: false
  type: str
  kotlin.default: 'I{{name}}'
  swift.default: '{{name}}'
  allowed_on: [ class, class_template, struct, struct_template ]

interface_class_name:
  inheritable: false
  type: str
  default: '{{name}}Impl'
  allowed_on: [ class, class_template, struct, struct_template ]

include:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ dir, file, class, class_template, struct, struct_template, enum ]

code_fragment:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ dir, file, enum ]

include_cxx:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ class, class_template, struct, struct_template ]

shared_ref:
  inheritable: true
  default: false
  type: bool
  allowed_on: [ class, class_template, struct, struct_template ]

template:
  inheritable: true
  default: null
  type: dict
  allowed_on: [ class_template, struct_template, function_template ]

is_operator:
  inheritable: false
  default: '{{_is_operator}}'
  type: bool
  allowed_on: [ cxx_method, function_template ]

is_exception:
  inheritable: false
  default: false
  type: bool
  allowed_on: [ class, class_template, struct, struct_template ]

throws:
  inheritable: false
  type: list
  allowed_on: [ function, function_template, cxx_method, constructor ]
  required_on: [ function, function_template, cxx_method, constructor ]

bases_list:
  inheritable: false
  type: list
  default: [ ]
  allowed_on: [ class, class_template, struct, struct_template, enum ]

nullable_return:
  inheritable: false
  default: false
  type: bool
  allowed_on: [ cxx_method, function, function_template, field ]

nullable_arg:
  inheritable: false
  default: [ ]
  type: list
  allowed_on: [ cxx_method, constructor, function, function_template ]

project_dir:
  inheritable: True
  default: '{{_current_working_dir}}'
  allowed_on: [ dir ]

project_link:
  inheritable: True
  default: '{{_get_git_repo_url(project_dir)}}'
  allowed_on: [ dir ]

comment_del_regex:
  inheritable: true
  type: list
  default:
    - '\s*\\internal([\s\S]*?)\\endinternal\s*'
    - '\s*\\internal[\s\S]*'
  allowed_on: [ cxx, file_system, root ]

comment:
  inheritable: false
  python.default: |
    {%- set regex = comment_del_regex|join('|') -%}
    {{_pure_comment|replace_regex(regex, '')}}
    {%- if _file_fullname and path.isfile(_file_fullname) and project_dir is defined %}
    Documentation generated from: `{{path.relpath(_file_fullname, project_dir)}}#L{{_line_number}}
    <{{project_link}}/{{path.relpath(_file_fullname, project_dir)}}#L{{_line_number}}>`_
    {%- endif %}
  default: |
    {%- set regex = comment_del_regex|join('|') -%}
    {{_pure_comment|replace_regex(regex, '')}}

banner_comment:
  inheritable: false
  default: |
    This file is generated by iegen on {{_output_modification_time}}.
    Please do not change it manually.
  allowed_on: [ cxx, file_system ]

out_prj_dir:
  inheritable: true
  default: wr_out
  allowed_on: [ cmd_line ]

run_dir:
  inheritable: true
  default: example_lib
  allowed_on: [ root ]

cxx_out_dir:
  inheritable: true
  default: '{{path.join(out_prj_dir, run_dir, "cxx_out")}}'
  allowed_on: [ cmd_line ]

out_dir:
  inheritable: true
  kotlin.default: '{{path.join(out_prj_dir, run_dir, "android", run_dir, "source/main/java")}}'
  python.default: '{{path.join(out_prj_dir, "python", run_dir, "src")}}'
  swift.default: '{{path.join(out_prj_dir, "swift")}}'
  allowed_on: [ cmd_line ]

cxx_base_out_dir:
  inheritable: true
  default: null
  allowed_on: [ cmd_line ]

is_proj_type:
    inheritable: false
    default: '{{path.abspath(_file_fullname).startswith(path.abspath(out_prj_dir) + path.sep)}}'
    allowed_on: [ cxx ]
    type: bool
    description: "Boolean showing whether the given type is user's type or is the type from standard/3pty lib"

prj_rel_file_name:
  inheritable: false
  default: '{{path.relpath(_file_fullname, out_prj_dir)}}'
  allowed_on: [ cxx ]

package_prefix:
  inheritable: true
  kotlin.default: com.picsart.example_lib
  python.default: example_lib
  swift.default: com.picsart.example_lib
  allowed_on: [ root, dir, file, class, class_template, struct, struct_template, enum ]

helpers_package_prefix:
  inheritable: true
  default: '{{package_prefix}}{{"." if package_prefix}}iegen'
  allowed_on: [ root ]

helpers_out_dir:
  inheritable: true
  default: '{{path.abspath(path.join(out_dir, helpers_package_prefix|replace(".", path.sep)))}}'
  allowed_on: [ root ]

exception_helpers_package:
  inheritable: true
  default: exception_helpers
  allowed_on: [ root ]

exception_file_name:
  inheritable: true
  default: std_exc_classes
  allowed_on: [ root ]

common_helpers_dir:
  inheritable: true
  default: '{{path.abspath(path.join(_iegen_extras_dir, "std_helpers"))}}'
  allowed_on: [ root ]

cxx_helpers_dir:
  inheritable: true
  swift.default: '{{path.join(common_helpers_dir, "swift/cxx")}}'
  default: '{{path.join(common_helpers_dir, "cxx")}}'
  allowed_on: [ root ]

helpers_dir:
  inheritable: true
  kotlin.default: '{{path.join(common_helpers_dir, "kotlin")}}'
  python.default: '{{path.join(common_helpers_dir, "python")}}'
  swift.default: '{{path.join(common_helpers_dir, "swift")}}'
  allowed_on: [ root ]

cxx_base_source_dir:
  inheritable: true
  default: '{{path.abspath(path.join(_iegen_extras_dir, "base"))}}'
  allowed_on: [ root ]

file_postfix:
  inheritable: true
  default: _gen
  allowed_on: [ root ]

extension:
  inheritable: true
  kotlin.default: kt
  python.default: py
  swift.default: swift
  allowed_on: [ root ]

pybind_module:
  inheritable: true
  python.default: example_lib
  allowed_on: [ root ]

c_wrapper_lib_name:
  inheritable: true
  swift.default: CWrapper
  kotlin.default: wrapper_jni
  allowed_on: [ root, file_system ]

target_arch:
  inheritable: false
  default: x86_64
  allowed_on: [ cmd_line ]
  type: str
  description: "Variable for setting target architecture"

clang_args:
  inheritable: false
  default: []
  allowed_on: [ root ]
  type: list

src_glob:
  inheritable: false
  default:
    - ./examples/example_cxx/**/*.h*
  allowed_on: [ root ]
  type: list

src_exclude_glob:
  inheritable: false
  default: [ ]
  allowed_on: [ root ]
  type: list

include_dirs:
  inheritable: false
  default:
    - .
  allowed_on: [ root ]
  type: list

extra_headers:
  inheritable: false
  default: [ ]
  allowed_on: [ root ]
  type: list

enum_field_name_prefix:
  inheritable: false
  default: ''
  allowed_on: [ enum ]

enum_excluded_fields:
  inheritable: false
  default: [ ]
  allowed_on: [ enum ]
  type: list

cxx_out_rel_path:
  inheritable: true
  default: "{{path.relpath(cxx_out_dir, out_prj_dir)}}"
  allowed_on: [ root ]

c_file_fullname:
  inheritable: true
  kotlin.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  swift.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, 'c_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ class, class_template, struct, struct_template, enum, function, function_template ]

h_file_fullname:
  inheritable: true
  kotlin.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.hpp"
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.hpp"
  swift.default: "{{cxx_out_dir + pat_sep + [package_prefix, package, 'c_' + file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.h"
  allowed_on: [ class, class_template, struct, struct_template, enum, function, function_template ]

target_file_fullname:
  inheritable: true
  default: "{{out_dir + pat_sep + [package_prefix, package, file + file_postfix]|map('replace', '.', pat_sep)|path_join}}.{{extension}}"
  allowed_on: [ class, class_template, struct, struct_template, enum, function, function_template ]

pybind_module_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + '_module']|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ root ]

c_pybind_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + file_postfix]|map('replace', '.', pat_sep)|path_join}}.cpp"
  allowed_on: [ root ]

h_pybind_filename:
  inheritable: true
  python.default: "{{cxx_out_dir + pat_sep + [package_prefix, pybind_module.split('.')[-1] + file_postfix]|map('replace', '.', pat_sep)|path_join}}.hpp"
  allowed_on: [ root ]

descendants:
  inheritable: false
  default: null
  allowed_on: [ class, class_template, struct, struct_template ]
