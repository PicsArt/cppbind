"""
Main module which parses command line arguments and runs iegen.
"""

import argparse
import os
import sys

from iegen import default_config, logging
from iegen.builder.ir_builder import CXXIEGIRBuilder
from iegen.builder.out_builder import Builder
from iegen.common.error import Error, IEGError
from iegen.context_manager.ctx_desc import ContextDescriptor
from iegen.context_manager.ctx_mgr import ContextManager
from iegen.ir.exec_rules import RunRule
from iegen.parser.ieg_parser import CXXParser
from iegen.utils import (
    clear_iegen_generated_files,
    get_host_platform,
    load_rule_module,
    copy_yaml_config_template
)


class WrapperGenerator:
    """
    Class for generating wrappers for target language from source files.
    """

    def __init__(self):
        pass

    @staticmethod
    def run(plat_lang_options):
        """Run iegen for every platform + language combination"""

        logging.info(
            f"Start running wrapper generator for "
            f"{', '.join(list(map(lambda x: x[0] + '.' + x[1], plat_lang_options)))} options.")
        for plat, lang in plat_lang_options:
            WrapperGenerator.run_for(plat, lang)

    @staticmethod
    def run_for(platform, language):
        """Run iegen for current target language + platform"""

        logging.info(f"Start running wrapper generator for "
                     f"{language} language for {platform} platform.")
        parser = CXXParser()

        ctx_desc = ContextDescriptor(getattr(default_config.application, 'context_def_glob', None),
                                     platform,
                                     language)
        ctx_mgr = ContextManager(ctx_desc)
        ir_builder = CXXIEGIRBuilder(ctx_mgr)

        root_ctx = ir_builder.start_root()

        if not root_ctx:
            Error.critical(f"""Could not find any config file with path - {default_config.application.context_def_glob}.
                           Run `iegen init` command under project's root directory to create an initial config file.""")

        logging.debug("Start parsing and building IR.")
        parser.parse(ir_builder, **root_ctx)

        ir_builder.end_root()

        if Error.has_error:
            raise Error.critical('Cannot continue: iegen error has occured')

        ir = ir_builder.ir
        logging.debug("IR is ready.")

        run_rule = RunRule(ir, ctx_desc, platform, language)
        # load rule modules
        logging.debug("Loading ruler scripts.")
        lang_rule = load_rule_module(language,
                                     default_config.application.rule,
                                     default_config.default_config_dirs)
        logging.debug("Creating builders and running rules on IR.")
        builder = Builder()
        run_rule.run(lang_rule, builder)
        # now we can dump builders into file
        logging.debug("Dumping builders to files.")

        if Error.has_error:
            raise Error.critical('Cannot continue: iegen error has occured')

        builder.dump_outputs()


def run(args):
    """Process language + platform command line arguments and run the main function"""
    plat_lang_options = []
    for option in args.languages:
        if '.' in option:
            plat, lang = option.split('.')
        else:
            plat, lang = get_host_platform(), option
        plat_lang_options.append((plat, lang))

    try:
        WrapperGenerator.run(set(plat_lang_options))
    except IEGError as err:
        Error.error(err)
        sys.exit(1)


def clean(args):
    """Cleans the files in directory generated by iegen"""
    if not os.path.isdir(args.dir):
        raise ValueError(f'{args.dir} is not a valid directory.')
    clear_iegen_generated_files(args.dir)


def init(args):
    """Creates an initial iegen config file which contains default values."""
    copy_yaml_config_template()


def run_package():
    """
    Command line arguments parser
    """

    parser = argparse.ArgumentParser(description="Runs iegen for given languages.")
    choices = list(default_config.languages) + \
              [plat + '.' + lang for plat in default_config.platforms
               for lang in default_config.languages]

    sub_parser = parser.add_subparsers(required=True)

    run_parser = sub_parser.add_parser('run', help='Run iegen to generate code for given languages.')
    run_parser.add_argument('languages', type=str, nargs='+',
                            choices=choices,
                            help='list of languages for which wrapper will be generated.')
    run_parser.set_defaults(func=run)

    clean_parser = sub_parser.add_parser('clean', help='Clean all iegen generated files from directory.')
    clean_parser.add_argument('dir', help='Directory from where all iegen generated files will be deleted.')
    clean_parser.set_defaults(func=clean)

    init_parser = sub_parser.add_parser('init', help='Creates an initial config file in current directory.')
    init_parser.set_defaults(func=init)

    # print help if nothing is passed
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help'])
    args.func(args)


if __name__ == "__main__":
    run_package()
